The Product Owner role is responsible for Product Backlog management, and it sounds like most of these tasks fall squarely into that realm. Specifically, the Scrum Guide says this about the Product Owner: 

The question about combining the Product Owner and Scrum Master is a frequent one. It's been asked here on Project Management Stack Exchange and here (by me) on Software Engineering Stack Exchange. Mike Cohn also wrote a blog post on the subject. Although the things done by the Product Owner and Scrum Master are typically done by someone in a Project Management role in other process frameworks, there are advantages to splitting up the role. I do think that a very skilled person may be able to be a Product Owner and Scrum Master, it's easier to ensure that all of the functions are being done at their peak by splitting them up to be done by two people. The Product Owner can focus on optimizing the product while the Scrum Master can focus on optimizing the team and process used to make the product. 

Personally, until your organization and team understands the underpinnings of the agile methods and Scrum (the Manifesto for Agile Software Development, the 12 Principles of Agile Software), I would want to stick as close as possible to a framework (such as Scrum) and then explore the things that are and aren't working. I would want the Product Owner to be someone focused on the product, the Scrum Master to focus on the process, and the Team Lead to focus on the people (and, to be truer to Scrum, a member of the Development Team). The people in these roles should work together to maximize the effectiveness of the team, especially over time as the team and product change. 

You now have a full backlog that you will be working on for your iteration. However, one of the stories is actually partially completed. One of two things could happen. You might finish all of the points early, before the iteration ends. Or, depending on how much work had to be done to complete the story, you might finish on time. If you finish all points at the end, you're good - just calculate your velocity and plan the next iteration. However, if you finish early, you have a few options. You could move another story into the iteration, beginning design and implementation of it, with the understanding that it might not be finished. Or perhaps you'll give your team some time to do corporate-mandated training. Or maybe just do some refactoring or write a few extra test cases that you've been meaning to get to, but weren't a high enough priority to do.