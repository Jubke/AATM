You say that people participate in more than 1 project at a time. I would really, really encourage you to stop doing this. Assign a project to a team, and let them finish it. Assigning more than 1 project to the same team will generally result in both projects taking longer (due, mostly, too context switching). Unless there is a substantial blocking problem, try to keep it at 1 project per team at a time. But don't take my word for it: google "Why multdisciplined Scrum teams" 

3) Specialized teams are bad at design. The more focused your teams are on one aspect of your projects, the less likely they will be able to see and understand the overarching design of your project. 

The flip side to that is I generally also don't consider giving warnings. If we drop the ball on a project because the team didn't put the effort in, we'll talk about it in our retrospective. If one of my team members isn't adult enough to recognize what needs to be done going forward, they won't remain on my team. I really dislike all three of your solutions. Each of them fails to treat your team members as adults. Treat your team members with respect, and expect them to perform. A PM isn't a baby sitter and your team members aren't children (well, hopefully not at least). 4) Specialized teams have to hand work off before the software is working. If you have a backend team, a UI team, and a QA team each team needs to hand off the work to another team, before the software is actually fully functional. Bugs found by the QA team need to be handed back to a different team, which then goes to another team, which then goes.... etc. This breaks the idea of delivering working software at the end of each sprint, and greatly increases project time with all the context switching required. 

Split your teams into cross-functional non-specialized units. In a good Scrum implementation, a PM should be able to handle 4-5 projects (given that your projects are relatively short in length) at a time. Just make sure your PM is staying out of the day to day workings of your teams. 

Phone them, mail them, fax them, meet them, remind them, let post-its on their desk, call them at home, whatever. It cannot fail. When it's more annoying for them to listen to you than to do what you need (which they have to do anyway sooner or later, as it's actually their job), they will do it as quickly as possible. 

Your arithmetic is right, but the logic behind is not. Never forget productivity is not linear, exactly like 9 women cannot give birth to a baby in one month! Currently, this application is a pain for all the team because it's way to buggy due to technical limitations of Zinc. So we want to remake it from scratch in C#, which will allow us to get a much better software. The main thing to say is this: if your team needs on a constant basis to do overtime to get the job done, it means the project planning is not worth a penny. 

After several times, they will even do it before you begin your annoyance tactic, and you actually trained them! 

Apart our online photo sharing application, we get a Windows desktop application which makes it possible to burn video DVD with the slideshows made with the online application. It's written with Zinc, an alternative to Adobe AIR, with some Imapi code and FFMpeg. And here comes the real matter: We cannot afford to hire another senior engineer, and we don't have currently the C# skills in-house. 

That being said, how to remotivate your team: All the seniors work in the company since 4 years and are fully committed. Not completly on-topic, but one unspoken strategy to get things done is: annoyance. I annoy people not doing what I think needs to be done for the project, in order to have them do the stuff just to get rid of me. And it's working everytime! Team members, providers, contractors, other employees of the company somehow involved in the project. If they protest, just say "it's really important for the project to succeed", and what could they possibly answer?