PO has to prioritize the backlog (the what part) where as the team decides amount of work that can be delivered in each sprint (the how-much part). Similarly PO provides feedback on the sprint during sprint review meetings and decides to approve or reject the sprint which has been delivered by the team thus causing conflict of interest. 

Wont have items also need to be documented and assigned a status of closed, so that we dont loose sight of those and can be tracked. These items can be those feedback items which are not relevant to the product or are not cost effective to implement at this time. becomes one of the acceptance test of the first story: 

Feedback gets implemented based on the priority set by the PO. If PO wants a feature/story to be completed before the feedback items then the team will implement the feedback in a future sprint. 

In case of stories being carried over to future sprints, the Scrum team should not be held responsible for stories which were not part of the sprint backlog to begin with. I'd start by working out what the flow of work looks like from initial idea through to a fully released and supported product. Spend some time meeting and sitting with each of the teams along that pipeline and identify what their inputs are (what material/information they need from upstream teams) and what their outputs are (what they hand off to downstream areas). 

You could then introduce separate stories for the other media that do both the back end and front end together. In every team I've been in that's used a virtual board, people update it very infrequently (typically in a rush before standups after the Scrum Master has had to go and ask them to do it) so it doesn't always have a good picture of what's going on. 

It's (usually) easier to change your process. These help share new engineering practices and ideas across the teams and the free lunch usually guarantees a good attendance. It's a reasonable balance between push and pull - people aren't forced to attend but it provides a structured way for people to find out more about what their colleagues are working on. 

Also, consider how much work the requester is having to test in one go. If they're having to test several weeks worth of features in one go, it'll be harder for them to find the time to do it. Reducing how much work you are batching up by getting them to test (for example) once a week might help you get feedback sooner and make doing the testing a less onerous task. 

Rather than undertaking several projects for one requester, would it be possible to focus efforts on the most important one and deliver that before moving onto the next? The requester will be able to focus better on just one project rather than juggling several which in turn should improve their availability for answering questions and reviewing work. Equally, the people who will be using the software will get value quicker as your developers are able to complete work more rapidly. As our iterations got shorter and we got burnt by more stories being blocked awaiting design sign off, we tried: We run regular 'Brown Bag' sessions where the company provides lunch (usually Pizza, nom nom) and people from teams can come and present cool new stuff they are working on. Topics have included MVC, Facebook API, Deming's red bead experiment, dependency injection and so on, as well as more specific session on particular projects people are working on. In this scenario, it's a good idea to do a spike to help you understand the issue at hand. 

Only Scrum Alliance Certified Scrum Trainers (CST) can run the Scrum Alliance Certified Scrum xxx courses (CSM, CSPO etc). Scrum uses velocity to measure capacity. Velocity is the average number of story points they complete in a sprint (defined time period, usually between 1 - 4 weeks). It communicates to other stakeholders more easily. 

The total range as well as the assumptions and risks can then be presented back to the committee. If there is too much uncertainty (the range is too big) for them to commit to the project, you can then ask for time to investigate some of the risks and assumptions to see if you can get some more certainty. 

Team availability is how much time team members can devote to the project due to holiday, commitments with other teams, admin they might have to do etc. Low availability (i.e. in cases where a team member is working on more than one project) reduces capacity. Either way, the strict daily checking may lead to internal conflicts and failed sprints because of the unnecessary pressure and avoidance of failure. That's why we tend to have iterations or sprints as the shortest check period so that the team has space to deliver in its best way. Actually, I know an IT manager who is using empowerment and almost everybody from his organisation want to work with him, so the other managers have started to learn more about empowerment, because they don't want to lose their people. The only solution I've found so far is that you have find a manager who has a good press inside the organisation, but likes to try out new approaches. You don't need the most open minded one, because she may not be that well connected, which is wrong for the purpose. 

It is not mandatory to have the specs before start, but it helps a lot clarify the details and sort out misunderstandings. Actually, the point of BDD - this is what you are doing - is to start the conversation between the "customer" and the development team(s).