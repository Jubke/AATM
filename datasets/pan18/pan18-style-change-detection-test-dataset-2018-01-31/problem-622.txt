Strings are not mutable in Java, so concatenation can be an expensive operation. To get around this, there's a series of collection Objects, one of which is named ArrayList that will act more like PHP arrays (although the holds one type business is still true). You don't get the array like syntax, all manipulation is done through methods Prior to PHP 5.4, when you're using the Like anything Magento, there are a lot of steps, and any one being wrong could trip you (or me!) up. You'll also notice a translate attribute here, along with a corresponding label tag. This allows you to use any string you want in the HTML interface as a group title, but internally keep the name a valid XML tag name. Our tag is named Every variable in Java needs to be prepended with a data type. This includes primitive types such as boolean, int, double and char, as well as Object data-types, such as ArrayList, String, and your own objects Create an Empty Magento Module First, you'll want to setup a magento module to hold all your custom configuration values. Creating a magento module involves Fidelity: Winner PHP. PHP serialization will allow you to store data with native PHP data types, including objects defined by custom classes. JSON will only allow you to store generic primitive types, lists of primitive types ("arrays") and key/value pair Objects. PHP Serialization may provide some advantages here if you're developing a PHP application. Conclusion: Go with JSON unless you have a compelling reason to use PHP Serialization . Is there some *nix tool or perl/php library that will let you easily create directory tree visualizations that look like the following? Current versions of Magento register certain global variables (not PHP globals, but things global to the Magento system) on certain pages. I know I can add to the navigation with an override that looks something like this In anticipation of the first quick answer, I realize that stripping out any HTML tags, or otherwise XSS filtering each element of the JSON object would work, but I'm looking for a concise way of doing this. Similar to how this The other xml structure is needed, and is (mostly) used to control what kind of HTML inputs will be used for your config. If you want a particular interface element, find an example in the core module and copy the XML structure. Portability: Winner JSON. JSON is supported on a wider variety of platforms, while PHP de-serialization is only supported (as far as I know) by PHP. While it's possible to parse either format in any language, JSON has more pre-built libraries. To clarify, I know what reflection is and how to use it. What I'm curious about is this "export" format, which appears deliberately designed but is NOT valid PHP. Is it a standard CS/programming format of some kind, or just something one off for PHP?