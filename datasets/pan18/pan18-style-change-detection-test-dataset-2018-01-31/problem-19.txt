I understand, that accurate estimates demand more effort and don’t believe in “miracle” high quality estimation without effort. But maybe you can suggest to me other ways (or some tips) on how to make Release Planning more accurate without having complicated heavy waterfall-style planning? Or, maybe, I just misunderstand concept of Story Points? 

All is good with pit digging. But what if the next story is "catching of an elephant"? I had an interview with one company. They use Scrum, but don’t like rough estimates during Release Planning. So, they asked me, how to make Release Planning more accurate (they don’t want more than 30 percent of deviations from the plan). 

Going back to the planning list: in Scrum we implicitly did 1-3 steps during initial Release Planning and steps 4-6 during each Sprint Planning. I suggested to do all these steps during Release Planning explicitly. Despite the fact that this was the first (and only) way I figured to improve the accuracy of a release plan, I don’t really like it because (in my opinion) this kind of planning does not conform to the ideology of Agile. 

Let's assume, that it will take 1 SP for digging a pit one meter depth. Accordingly, we need 2 SP for making a pit two meters depth. Very convenient. We don't care about our equipment. If we have a shovel then 1 SP will map to 1 man-day. If we have an excavator then 1 SP will map to 1 man-hour. But two meters pit anyway will take to us twice more time then one meter pit. 

Find "verbs" dependencies and put them in a timeline. - i.e. GANT diagram 

I suggested they do following: 

Filter requirements and create scope. 

Decompose "nouns" to "verbs" (work needs to be done to implement "nouns"). Decompose scope to "nouns" (deliverable items). - i.e. WBS structure 

Story Points (SP) is a good measurement, that allow to estimate User Stories. 

SP (in my understanding, it's important note) is convenient because it is relative and not related with time. All estimates are based on comparison with common basis. But what if two stories have completely different bases? Estimate "verbs" considering risks. For simplicity, let's look for example that is not related with any specific area. Like digging a pit. 

As you can see, it is more complicated than initial story mapping, and looks more like “heavy waterfall” style, than “agile” style. As I understand Agile philosophy, accuracy of estimation of final release date is not high priority, because "responding to change over following a plan". 

Or, if we know, that 1) catching of one elephant will take for us 1 man-day 2) we still use shovel for digging, then we should estimate this "elephant" story to 1 SP? This suggestion sounds absolutely wrong to me. But I wrote it, because in my practice people use this option in most cases. 

A final word: track time!! So that you can use it for the project after this one. Not only to be able to compare with previous realised work packages or tasks (if you track time on this detail), but also to track how well you're doing the estimations. If you notice that you under-estimate by a certain %, you can use that 'evidence' next time as a separate margin or even to adjust the most likely estimates. The final schedule is based upon the most likely estimates or any other way of calulating it (eg PERT), but make sure you also calculate some margin, in both time and money. As estimating seems to be a problem, you better argument to take the difference between the most likely (or average, or PERT or whatever ) and the worst case. Since you will manage against the former, that should be ok. 

Summing all these estimates up will give you the required budget in hours or days for each work package and ultimately for the whole project, and possible alternatives of execution. 

Perform risk identification (use the WBS!) and add specific risk mitigation tasks where required. 

Make sure these cost items are identified so that you know your contingency budget and how it is applied. 

Next each work package needs to be estimated. Ashes has given some typical methods for getting a valid estimate. As estimating seems to be a problem, I would advise to develop each work package (or lowest level WBS element) into all the tasks required to complete the deliverable (= task definition). Each task is then separately estimated into ideal work hours or days. Meaning that if someone would work uninterrupted on this task it would take him x hours. Again, estimating is done by subject matter experts and/or the people who will perform them. Estimating is best done with a group of people, instead of individually. Next make your network of all work packages (this is the plan you are going to follow) and schedule the tasks and assign people or profiles to each of them, so you also know the cost estimate and the delivery time.