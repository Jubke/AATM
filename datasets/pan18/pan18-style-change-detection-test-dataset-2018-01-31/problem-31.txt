One thing that you mention, "communicate and track support" may also fall into the role of Scrum Master. The Scrum Master does provide support to not only the Development Team, but also the Product Owner and the organization. The Scrum Master should be helping the Product Owner find ways to deal with these incoming requests and methods to appropriately manage the Product Backlog, including writing good Product Backlog items. The Scrum Master is also responsible for making sure that any impediments to the Development Team are removed. Have to use the Product Backlog to drive my work. I see, first-hand, any problems that may have arisen with the creation or management of Product Backlog Items. This allows me to raise issues that I experience to the Product Owner. Of course, other Development Team members also see things and can bring them up to me to raise to the Product Owner at the same time. However, cutting out the middle man is helpful sometimes in getting things corrected. So, no. You do not include Spikes when reviewing the work that you have accomplished in the Sprint. You may want to mention that you have done certain Spikes to better understand particular work, but that's about it. Typically, there is nothing to demonstrate in a Spike. You haven't done anything to the project that you are working on. If anything, you may have completed a prototype or mockup. But you wouldn't want to demonstrate that at a Sprint Review for fear of giving the impression that there has been more work done on the design and development work for the Product Backlog Items. He could also be involved in measuring product quality through the use of appropriate measurements and metrics. These would include cyclomatic complexity, test coverage, Halstead complexity, defects, lines of code, and so on. He could then report on these for each iteration, identifying modules that are high in complexity (indicating that a possible refactoring is in order), have low test coverage (indicating that perhaps more unit or integration tests are needed), and defect density. Since he has some experience with writing code as well, he would be able to look at the code base, understand it, and be able to comment on its health in a manner appropriate for both technical and non-technical audiences, even if he isn't actively developing. Personally, I would involve a quality assurance specialist at every phase of the lifecycle, from requirements through release. This would mean reviewing your requirements to ensure that they are good requirements and to provide early exposure to build test cases from, designs (with an emphasis on the testability and correlating design decisions with requirements), documentation (especially that which is shipped to the customer), code and tests, and released packages of material.