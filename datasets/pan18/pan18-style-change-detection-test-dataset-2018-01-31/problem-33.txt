Few years ago it was almost impossible to sign an agreement where sponsor would not get: clearly described what product he will get, when it will be ready, how much will it cost and what milestones you should achieve to get paid at all. Collaboration meant that customer will change the requirements in the middle of the project (sponsor would name it being more descriptive) without changing the contract or a milestone plan. 

Scrum Master is the owner of each impediment and he owns the part about solving the issue. On the other hand, SM is not directly capable of solving every issue. Some may be solved by the team itself, some by the management and some by someone out of the loop, so big part of such issue is not owned by SM. Her job is to make others solve such impediments. 

I don't believe it can happen in a harsh environment with a very strict, hierarchical management style as no one can fit two different personalities in one person. But as well, I don't believe such management style could work for a long term agile software project. So let's assume you have rather soft relations and your team is driven mostly by intrinsic motivations. 

I started coding in 90's. It was pascal I think. First time I got payed for coding in 2000 or 20001. Industry experience since 2003 or 2004. 

You wont get far with theory only. Not all the lessons one can learn from other's mistakes, so finding a company which will trust you and THE team is the first step in making your own mistakes. Try it sooner than later even if it mean very tiny little project. 

Of course there was not so much knowledge about processes and not so much tools. In-home developers worked - back then and now as well - in small teams of friends where project management isn't so easy to implement and tools are usually too expensive. So it leaves you with individuals and interactions alone. The project management is not about the practices, it's about decisions and reasons of those. I find it important to know what decisions other managers made and where it lead them. So I consider blogs as interesting (or even more) than literature. Maybe you should find people (other PM) you value and trust and track their blog entries. My personal top 3: 

I really do not know even single one developer who would like to work on documentation. Really. In-home developers do documentation only when sponsor asks them to do so. Quality of such documentation is the other thing as well as "working software" term. Today we know many indicators of quality and customer satisfaction and collaboration so "working software" means whole different thing than years before. TDD, user stories, code coverage is relatively new and even now I wouldn't bet in-home developers do all of that. I can see couple of influencing factors: 

Well, Agile Manifesto is a strange thing a bit like an iceberg. Seeing it is one thing, but the understanding and imagination of what remains unseen is another. 

If the meeting involves only a status report then there is only a concern about describing it in a compact, yet valuable manner. People usually learn in special manner. At first they need small, easy, little successfull steps. So don't take everything at once. You will probably need to make many shortcuts, put some things in black boxes and simplify others. Decide what to learn at once and where to dig deeper. Use this thread's links wisely :) Responding to change over following a plan One of the main reasons we do research is to reduce uncertainty. While we reduce it, we often need to change the direction we are going. So, every time your research achieves a progress there is a rising probability that someone else status needs to be influenced as well. To anticipate it and give an update is probably one of the reasons such meeting exist. 

I can not give you the exact number of days sprint should take, as what I said above is tightly connected to the team quality, technology and architecture used, and product you are working on. It is probably not the best idea to change the sprint length too often because it affects your and team ability to predict velocity. If you were new to Scrum and sprints, I would say you should start with some given length (3 weeks or 30 days) and check if it works for you and make changes if necessery. Instead, it looks like you are already familiar with sprints, so question is: what is your experience with sprint duration? Do you have any doubts which makes you ask the question?