I'm closing in on finishing a Windows Desktop Gadget that downloads plugins from my web server. I'm wondering how I can track the use of these plugins for reporting purposes like seeing which plugins are popular in which countries, how many times a plugin is used per day/month/week and other stuff like that. Manual formatting solution If you don't need to do it programmatically, Try JSON Lint. Not only will it prettify your JSON, it will validate it at the same time. Solving this problem is much more within reach nowadays. The HTML5 History API allows us to manipulate the location bar to display any URL within the current domain. 

Make sure you're actually in IE 8 mode by using the preferred method, a standards doctype... Most specifically, I'm looking for answers to the following questions: 

Another side effect of creating methods inside the constructor is poorer performance. Each method has to be created every time the constructor function runs. Methods on the prototype chain are created once and then "inherited" by each instance. On the flip side of the coin, public methods have access to "private" variables, which isn't possible with inherited methods. In particularly, I want to know why it was completely scrapped in favour of ECMA-262 5th Edition and why it wasn't just improved upon. Some of the features are pretty cool, like generators, iterators, let, new assignment operators and (my particular favourite) destructuring assignment. 

• Built-in objects such as Math, String, Date, parseInt, etc. These have attributes { DontEnum }. • Additional host defined properties. This may include a property whose value is the global object itself; for example, in the HTML document object model the window property of the global object is the global object itself. Without seeing your code, it's hard to answer other than a stab in the dark. I would guess that the string you're passing to encodeURIComponent(), which is the correct method to use, is coming from the result of accessing the innerHTML property. The solution is to get the innerText/textContent property value instead: 

EDIT: Updated browser support (again). I've been looking for some information regarding the scrapped ECMAScript 4th Edition without much success, even on SO. I know Mozilla's JavaScript 1.7 implemented many (all?) of the new features offered in 4th Edition and I thought I remembered a good John Resig post on it but I can't seem to find it on his blog now. Something like the following achieves the same: I know all of those particular features would just throw errors in browsers with out-of-date ECMAScript implementations, but why not include them anyway with the knowlege that one day those implementations would be few and far between? Were there other reasons too? Are we likely to see some of the scrapped features reappear in a future release, or are vendors so scared of breaking compatibility that we will probably never see such improvements to the standard? 

EDIT I should have originally stated that I'm not re-inventing the wheel, I'm looking to simplify many common tasks between Windows Desktop Gadgets, so I don't need the cross-browser compatibility of other libraries and their core functionality doesn't really apply to what I'm doing. I tried to keep the question general and not specifically relating to desktop gadgets, so that this question would be useful for others. 

As an aside, it would be nice to know some opinions on the matter, are you annoyed to see some features cut from the 5th Edition or do you think it's better this way? Is it worth playing around with implementations of ECMAScript 4? 

You need to create a separate scope that saves the variable in its current state by passing it as a function parameter: As control enters execution contexts, and as ECMAScript code is executed, additional properties may be added to the global object and the initial properties may be changed. This works in Chrome 9, Firefox 4, Safari 5, Opera 11.50 and in IE 10. For unsupported browsers, you could always write a gracefully degrading script that makes use of it where available: 

Methods that inherit via the prototype chain can be changed universally for all instances, for example: 

Logging this on every user action could cause my server problems as there'd be constant requests. Is it best to keep a local log and upload it to the server on a regular basis or is it possible to use something like Google Analytics or another provider for this sort of thing? Also, does anyone know why octal literals are dropped from ECMAScript 5th Edition in strict mode? 

Google Custom Search Engines use a timer to check the hash against a previous value, whilst the child iframe on a seperate domain updates the parent's location hash to contain the size of the iframe document's body. When the timer catches the change, the parent can resize the iframe to match that of the body so that scrollbars aren't displayed.