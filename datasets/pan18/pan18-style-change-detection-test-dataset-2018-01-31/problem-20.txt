As new work is required, the Development Team adds it to the Sprint Backlog. As work is performed or completed, the estimated remaining work is updated. When elements of the plan are deemed unnecessary, they are removed. I am afraid the Pessimistic, Optimistic and Most Likely estimates have gone away in MS Project 2010. I found that somebody has developed an add-on he claims will help you do this. I have not used this add-on, nor do I know whether it is being maintained: http://blogs.technet.com/b/projectified/archive/2009/11/24/3296207.aspx Arms length contracts fail: I am not saying that you don't estimate/plan at all. I am saying that you cannot do arms length contracts on the lines of: "You give me the scope, I will give you a firm estimate. You approve it. I go away and build the software and come back to deliver it when ready." That model is known to fail big time for software. You need velocity numbers over a reasonable period of time. Minimum is three sprints, more is preferred. Even if you do have velocity numbers over several sprints, it is recommended that you use a range rather than a precise looking number ("Our velocity is between 25 and 35 points."). This is a failed approach. In software development, there are two inherent limitations to trying to arrive at a good estimate from a fixed scope: Go with one of the agile processes. Scrum is the most popular one. Work closely with your stakeholders. Show them working code every few weeks and get their feedback. Working together you can make it a success. Exercise adequate due diligence to avoid such surprises. Two of the valuable practices that I can recommend very strongly are - doing a research story to size unfamiliar work and building a proof-of-concept to minimize risk in unpredictable work. If, after doing all that you do run into an issue, as you said on rare occasions, you can re-estimate the remaining work at the beginning of the next sprint, reprioritize and move on. Hopefully this helps to point you in the right direction. Here is a link that can lead you to additional material on this topic: Agile Estimating and Planning Additional clarifications based on good points made by @DavidEspina: If it happens frequently, do everything that Péter suggested. Microsoft Project 2010 does have PERT charts. It is now called by its generic name "Network Diagram". You can select it from the "View" menu. I don't have MS Project 2013, but I suspect it will be available by the same name "Network Diagram". Checkout whether that is what you are looking for. Dev team should get embedded with the client Product Management: The only way to build software is for the vendor to partner with the client. The dev team should function as a single team with the client's product management team who have the vision. This requires the client PM team to commit resources and time for the duration of the project. This is very hard to secure, but absolutely critical to the success of the project. Structure the project this way and then you can do the planning/estimation to meet financial (ROI) needs. Software development, by its very nature, is part R&D and is unpredictable. This is the very reason why we practice Scrum - with its transparency and inspect/adapt cycles. For software development projects, fixed scope and firm estimations are a bad idea I am afraid you are looking at this from the wrong angle. You said: However, in order to implement this simple model, there are many prerequisites: The harder part is to estimate the story points for new projects under negotiation: Software work is not fully predictable @Péter Török gave you a great answer. However, I would like to disagree with one aspect of what he said, "You accepted a story into the sprint which was not yet understood well enough to be ready for development. You failed to identify in time a significant part of the work to be completed..." He seems to expect that you can fully predict the work during the sprint planning and there should be no surprises. Not really! Estimate story points and apply a velocity range Here is the simplistic arithmetic: Here is the relevant extract from the Scrum Guide: