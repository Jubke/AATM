You can experience with how the startup community works, though. Start setting up the web server, do ugly pages with limited functionality (almost like a wireframe), do not bother much with Computer Science things as highly optimized algorithms, and do not bother with technology (you'll need the last when you want to scale your product). Do something that works. 

Additionally, with approach you'll know where you are with your project. Let's assume you have 12 things to do, and you one with this style in a week. You know that about 12 weeks you are going to be done. Ok, this is not really true, but at least you get a sense of progress and a bit of forecasting. 

check your feature list and pick the one you cannot continue without, you do the feature quickly (e.g. login), check if it works (test), make it pretty (but do not over do it, max one day - called refactoring), go to step 1 In case you face technical difficulties, and you are not making progress in a couple of days, just cut corners. The point is to get to step 3 as fast as you can so that you can validate your work. You can sort out difficulties later in step 4. 

Disclaimer: I have never worked in a digital agency and I am aware that the role of Project Manager in Digital Agencies can be somewhat different to that commonly accepted in other I.T. operations whether in-house or software development suppliers. Furthermore I am not clear on the exact differences. 

1. The Project/Accounts Manager isn't a developer In all cases ensure you have documented any changes required to the software specifications, once you have reached agreement with each party on their approved form, and ensure you have a paper trail containing an agreement from each party that you have accurately represented their needs in the requirement and their approval of the specification (this is the 'rigour' mentioned in your brief). Do they though? Or do they become what developers think are project managers? Do the developers start actively managing the employers' and the clients' risks? Do they begin negotiating resource levels, contracts and expectations? Do they rearrange the project plan to take into account new dependencies and ensure regular clear communications goes out against the communications plan? etc. etc. etc. If they really do start being project managers then clearly you have an ineffective project manager. Or perhaps you have a PM that is inexperienced and doesn't communicate properly, or doesn't work with the development team to understand what is happening to the project? 

3. The client wants to speak directly with the developers. 

So what? These are very different roles with very different responsibilities. In my experience developers often think that the role of Project Manager is akin in some way to Team Lead, or Development Lead. Undoubtedly in some organisations that is the case in practise, but I assume it isn't here as you have already stated you have Dev Leads. So this is a statement of fact rather than an actual problem. It can lead to significant project problems if the PM needs a technical appreciation in order to complete their PM work or if the development team use the PM's lack of technical experience against them by, say, over or under-estimating workload when the PM doesn't have the necessary skills to review and challenge estimates. But it is not, in itself, a problem. It would be worth thinking about why this is a problem to you or to the project as that will uncover issues that can be addressed. 

I suggest not to overcomplicate your project and have fun. If you professor want to have a "hands on experience" he should terminate the semester earlier, change the requirements randomly, and change the projects members :-) 

Check if it works for others too not just your teams (we call it user test). If it works and your test subjects like it, you can make it pretty and working (add user experience). Now you can add the next ugly thing, and do the testing again. This is called iterative development. In real life a small but working portion of functionality is more appreciated than a lot of features that do not work. check your feature list and pick the one you cannot continue without, you do the feature quickly (e.g. login), check if it works (test), make it pretty (but do not over do it, max one day - called refactoring), go to step 1 In case you face technical difficulties, and you are not making progress in a couple of days, just cut corners. The point is to get to step 3 as fast as you can so that you can validate your work. You can sort out difficulties later in step 4.