Build a team, not a collection of individuals...and don't throw the Scrum Guide at them. It's just a PDF written by a couple of guys no smarter than yourself. I have included some of the examples I use below As resource bottlenecks arise, the resource/trade is piled with more and more pressure which forces them to leave making the bottleneck worse increasing the demands which means more resource leaves... That gives you an approximate capacity for 21 hours of work * 8 days = 168 hours of work capacity. 

The new Scrum Master balked at any documentation and we seem to have settled upon documenting any aspect which has the risk of impacting another departments dependency. A full Scrum Team in a Business Intelligence environment working within a corporation using waterfall for most projects. Team consists of Scrum Master, Line Manager/Architecture Expert, Product Owner, Deputy Product Owner, Developers. For a developer to return to the original state depends on its complexity. Which can require anything from 5 to 30 minutes? Now imagine multiple interruptions and you can easily see how productivity will flatline. 

Never forget that Agile does not mean don't plan, plans are crucial, it simply means respond to change on a regular basis due to empirical information. Scrum timeboxes allow us to do that but metrics and working software are two sides of the same coin that allow us to demonstrate confidence to the people ultimately paying the team's salary. 

Effective short term, effective long term. 

Understandably the stakeholders, well versed in Agile and Lean Product have intervened to say the team have not thin sliced the service. They have simply created a series of building blocks which are delivered in a spiral iteration...block after block and once all the blocks are in place the service will work end to end. Without the delivery of all blocks then the business cannot use the value... 

A shared resource is indicative of poor management not investing in cross-functional training, not hiring needed resource, not incentivising staff to remain in the company, not promoting people to the roles they are aspiring to or not accurately forecasting the book of work for the year (or possibly all five). These drawbacks are just that - drawbacks. Every decision has pros and cons. The fact that there are pros and cons does not make a conflict of interest between the two roles. 

If issues are being reported from outside the Scrum Team (which consists of the three roles), then those issues have an impact on the Product Backlog. Things like bug reports, changes to existing features, or new feature requests would be new or modified Product Backlog items. 

If your team is doing well at planning and executing their Sprints while estimating the items in the backlog in hours or days, why do you feel the need to change that? Note: This answer was originally written against Revision 1 of the question. This revision only contained tags referencing scrum and agile. The information regarding SAFe was added in Revision 2. This answer is based on my experience with Scrum and Disciplined Agile Delivery and not SAFe. SAFe does have guidance on Spikes that, to some extent, disagrees with this answer. So, now, you have an unfinished story. That means you didn't get any points for it in the iteration that just finished. Assuming the priority of the story hasn't changed, it gets moved into the next iteration. Since your velocity for the previous iteration was lower, you now take fewer points into the next iteration. If your velocity for the previous iteration was X and the unfinished story was worth Y points, move the next (X-Y) points into the current iteration. 

Personally, I think that the Product Owner, perhaps with support from one member of the Development Team (perhaps on a rotating basis) and the Scrum Master, should take the lead on these items. Investigating incoming issues and turning them into Product Backlog Items is definitely a Product Owner function, which may be delegated. Working to resolve impediments is definitely a Scrum Master function, which may include appropriate escalation. Tracking support may be a shared responsibility, but I would consider this to be a task that should be done by the Scrum Master to allow the Development Team to focus on development rather than tracking other people's work. Scrum only provides three roles: Scrum Master, Product Owner, and Development Team. No other roles are defined in Scrum. Since Scrum does allow for some elements of each role to be delegated, you may choose to give a name to the role assigned to the person who is delegated certain tasks and this name would be up to your organization. There's nothing in the Scrum Guide that says that estimation needs to be done in points. There's also nothing that says that items in the Product Backlog or Sprint Backlog must be user stories. 

A retrospective is a chance for the team to review and reflect on their way of working - the things that went well, the things that didn't go well, and potential improvements. The Principles Behind the Agile Manifesto says that teams reflect on "how to become more effective" and then "tune and adjust its behavior accordingly" "at regular intervals". In Scrum, this is embodied in the Sprint Retrospective and is held by the Scrum Team (the Development Team, the Scrum Master, and the Product Owner).