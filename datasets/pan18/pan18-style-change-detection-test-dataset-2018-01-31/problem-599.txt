Using a DB with C++ is a real mess and it was refreshing when I moved to Java to be able to use a unified system to abstract the whole layer away (aka Hibernate). I am currently using MAC OS X. But information about other platforms would also be useful. Windows: We have multiple windowing libs This article is about somebody that is having problems correctly defining the bool relationship operators. It is also traditional for these objects to return a reference to a stream object so you can chain stream operations together. Usage: ====== This allows you to define interfaces that show the explicit transfer of ownership. When you use these as stream operators (rather than binary shift) the first parameter is a stream. Since you do not have access to the stream object (its not yours to modify) these can not be member operators they have to be external to the class. Thus they must either be friends of the class or have access to a public method that will do the streaming for you. Code The socket wrapper code is a very thin layer of standard sockets (just throwing exceptions when things go wrong). The current code is here if needed but I don't think it matters. For example do I need to download boost to use shared_ptr or can I get it from std::tr1? STL/Boost cover all the low level stuff. There are two places memory can be allocated: At what point will the blocking model break down? At 255 concurrent requests I was not expecting the threading model to keep up. I obviously need to reset my expectations here. Networking: There are a couple out there (including the Boost low level stuff). But is there anybody working on a Service based network layer? What is the recomended method for doing this? In C++ ownership is documented by the type a RAW pointer is wrapped inside thus in a good (IMO) C++ program it is very rare [RARE not NEVER] to see RAW pointers passed around (as RAW pointers have no inferred ownership thus we can not tell who owns the memory and thus without careful reading of the documentation you can't tell who is responsible for ownership). [Alpha:~/X] myork% g++ t.cpp t.cpp: In function ‘int main()’: t.cpp:10: error: ‘N::N(const N&)’ is private t.cpp:25: error: within this context t.cpp:10: error: ‘N::N(const N&)’ is private t.cpp:26: error: within this context