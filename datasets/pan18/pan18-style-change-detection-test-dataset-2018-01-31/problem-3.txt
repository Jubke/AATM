Definitely remind anyone looking at your forecast that it is an estimate Quickly check out how variable your velocity is. What is the team's last 3 iteration velocity? Current iteration? Total project duration? A highly variable velocity should prompt you to lower your confidence in any long-term forecasting results. List all your assumptions and the method you used to derive the forecast before presenting your number(s). Make sure your audience understands the impact of the assumptions you had to make. Be honest about your confidence in providing the forecast Try and provide a date range rather than a specific date with best, middle, and worst case numbers. You can go all kinds of fancy with Monte Carlo simulations and tools like Crystall Ball if you want. Use your scenarios as a chance to escalate risks DON'T make any long-term timing commitments based on your forecast numbers. The forecast should be used primarily as a tool to discuss and highlight risks/deficiencies that should be addressed to meet the customer's high level needs. You can estimate a completion date, date range, completion sprint, etc by dividing the current backlog size (in SP) by the teams current velocity but... 

Multiple Projects: I've seen teams add stories done for work outside of the project into their burnup, but leave the scope line the same. For obvious reasons, it messes up your chart. Either increase your scope line when you add extra stuff in or don't include it in your burn-up line. Prioritization: Let's say something is lower on the backlog and I don't need it done right now, but I need it done before New Years. I can use these lines to know how far up the backlog it needs to be in order to be certain it's done in time without having to throw it to the front. Obviously being able to give the PO and stakeholders some idea of how the overall project is awesome, but there are some other things it's great for too. It's also important to remember how much Agile stresses sustainable pace. People working nights and weekends has a massive cost to it that is often hidden. You don't want to accidentally encourage cowboy heroics for a monthly reward by sacrificing the long-term health of your teams. Being a PO needs frequent engagement with both the client and the team so that everyone has aligned vision of what needs to be delivered when. PO has to be available to answer questions coming from the team. If your time is divided between engagement and development it is bound to have a negative effect on efficiency for both dev and PO roles. 

Some reference about the use of MoSCoW in agile: 

An ideal DoD would contain everything that the team needs to perform in order to build a potentially shippable product every sprint. However based on the context, situation, and team's skills a subset can be chosen as initial DoD. Simplify your DoD to items which you can ensure for all user stories and stick to it. This would mean that at some point you'll have to work on the left out portion of the ideal DoD (this is mentioned as Undone Work in the article mentioned by OP). With the passage of time, you may add more items to your DoD list making it more closer to the ideal DoD.