If issues are being reported from outside the Scrum Team (which consists of the three roles), then those issues have an impact on the Product Backlog. Things like bug reports, changes to existing features, or new feature requests would be new or modified Product Backlog items. Note: This answer was originally written against Revision 1 of the question. This revision only contained tags referencing scrum and agile. The information regarding SAFe was added in Revision 2. This answer is based on my experience with Scrum and Disciplined Agile Delivery and not SAFe. SAFe does have guidance on Spikes that, to some extent, disagrees with this answer. 

To the Product Owner, the Scrum Master helps to find out techniques to manage the Product Backlog (including organization, writing good backlog items, arranging by value), gives an understanding of empirical project planning and how previous Sprints can be used to predict future Sprints work, and help in facilitating events (in my experiences, the Product Owner tends to drive the Sprint Planning, any backlog refinement or grooming activities, and the Sprint Review). 

Scrum has strict limitations of events in time. It is hard to stay in the events time-boxes that Scrum Guide prescribes. 

Ok, you said, that customer can change unfinished features, but can he change requirements to functionality, that you are already implemented? 

If development process has iterations, this mean only that you use Iterative Development Model. Development process based on Iterative Development Model may be not agile, but agile process should use iterative development model. 

Craig Larman took as a basis following approach (which was used by another manager in China): But if you are Product Owner and you have no communication problem with Stakeholders, you may feel free to operate with such kind of requirements representation as you want. 

Story Points Estimation is a relative measurement. It's very convenient for high level planning. If the team increases its productivity (by using CI, for example), then the team will just forecast more SP in the next Sprint. In the case of hours estimation, the team should re-estimate (and reduce needed hours) the whole Product Backlog. This is another quote (Scrum and XP from the Trenches) that sums up all that is written above: This process should have facilitator, who will help people to organize themselves in well balanced cross-functional teams. 

Find "verbs" dependencies and put them in a timeline. - i.e. GANT diagram 

The longer answer Nothing in Scrum is required (Though by the technical writing of the Scrum guide if you don't use all the events and artifacts it's not technically scrum). Scrum and agile are based on the concept of inspect and adapt. Figure out what works for the team and organization and keep doing that. Affinity map the postits. If four people all post about the build server, group the postits together. Do this as people are putting content up. So the first one is a great thing to have. In fact, if the PO isn't seeing stories until the Review, then you have a problem. The Review is led by the PO, so they should know what's being demoed. When you first get started though, simple is very good. If your stories are decomposed far enough, then you don't even need to create tasks. If you are not to that evolution of team yet, then doing quick estimating on tasks can be helpful to make sure the team is capable of completely the work they commit to. When a Scrum Event is not working, start with asking why. They exist because of decades of experience that they work. Making it Stick - Action Planning Now comes the hard part. If you want people to keep doing retrospectives, they need to see value out of it. If they come to retros and nothing ever happens, they will start to question why. Brain Storm: 15 minutes Take two minutes tops to explain the circle. Once you've explained the rules, set a timer for 10 minutes. The challenge is the product management organization is still operating in their traditional model. This can lead to a major roadblock to agile driven project adoption. The dev organization is trying to operate in an iterative style but requirements are still delivered in the old style requirements documents and all detailed up front. Resistence to going to the agile model can often be high. "I don't care how engineering builds it, just build what I want." Product management orgs also rarely want to make the time commitment that a Product Owner needs to make. They are too busy running off to the next customer meeting. If you wait until Sprint Planning, then you're probably only working based on Cost and not Value. Asking for Jire (or Rally or VersionOne) before starting agile is like asking for a Porsche before you learn to drive. 

The Sprint Review's primary purpose is to "inspect the Increment and adapt the Product Backlog if needed". It's your GPS on if you are building the right thing, in the right way. 

To tweak the Field of Dreams quote "Do it and the tools will come." Tools are not the solution, they are tools to aid the solution. You need the solution first. For more retrospective resources you can also check out: - Tastycupcaks.org - Innovationgames.com 

3- Estimate: I recommend that in the Backlog Refinement you are doing final estimation of the "Ready" User Stories. The reason for this is the Product Owner needs to know what the Cost / Level of Effort is, so that they can compare this to the Business Value (POs should be estimating value just like Devs estimate Effort, that's a whole other topic though). The PO then can rank order the backlog based on a balance of Value vs. Cost. 

Once you've got a track record of success, then you can point out how the successful development practices require translation to a legacy PLM software product and how it would save time and create more accurate reporting if you moved to a tool that supported the way you work.