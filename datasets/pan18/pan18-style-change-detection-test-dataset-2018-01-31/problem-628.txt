Just to be clear, I'd like to do this programmatically, not by watching what shows up at the server end. 

The large version of the icon is used to generate smaller versions for display in the app store and in other places that require icons in sizes other than the ones you submit. That way, if they need a version of your icon that's 162 px square, or 204 px square, or whatever, they have plenty of pixels in the larger version to ensure a reasonable rendition at smaller size. The view itself is a UIView used as a placeholder. 

In Xcode 3, there's a view above the editor that lists the files in the project. There's a checkbox on the right side of that view for each file, and you can uncheck the box to remove the file from the current target. The second possibility is to write your own protocol handler. This works only within your app, but you can use it in conjunction with the technique described above. Use the method above to get the system to launch your app for a given URL, and then use a custom URL protocol handler within your app to leverage the power of iOS's URL loading system: 

Install a protocol handler to handle whatever scheme you like. Update: At this point I've written code that effectively constructs a request using the data in a NSURLRequest, so I'm not asking how to go about that. However, I'd still like to know if there's a way to access the request stream that the URL loading system would generate. In other words, can I get access to the exact bytes that would be sent if a NSURLConnection were to send my NSURLRequest? Because your device only has one processor, GCD probably only creates one thread for executing blocks and your blocks execute sequentially. You've created 10 different threads, though, and those each get a little piece of the available processing time. Fortunately, sleeping isn't very processor-intensive, so all your threads run together pretty well. Try a similar test on a machine with 4 or 8 processing cores, and you'll see GCD run more of your blocks in parallel.