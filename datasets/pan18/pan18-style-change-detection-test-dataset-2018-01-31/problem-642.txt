The new destructuring assignment features of ES6 are fairly well known now (live copy on Babel's REPL); in the case of variables that already exist: For instance, off-the-cuff, this finds out how many full months lie between two dates, not counting partial months (e.g., excluding the month each date is in): I have a sorted, static list to display with KO, and wanted to show category headers whenever the category changed (since the list is sorted by category). I'm still genning up on KO, is this the "KO" way to do this, or is there a better approach? In particular the syntax to access the previous item in the list is a bit hairy, which makes me suspect I'm missing a feature that would improve this. :-) Actually, your code will pretty much work as is, just declare your callback as an argument and you can call it directly using the argument name. Note I'm not talking about when creating an object, we could do that with the wonderful new object initializer syntax that lets us not repeat the names unnecessarily: No. All of the solutions here defer it until after the object is created (in various ways) and then assign the third property. The simplest way is to just do this: Say this is your original data: But for the most part, you can happily access the earlier elements. Consider: If you're not using jQuery, you can do this: But if you're not in control of the generation of the object, or updating the map of ids-to-indexes is too much code and/ora maintenance issue, then you'll have to do a brute force search. Slightly off-topic, but: Note that client-side validation is no substitute for server-side validation. Client-side validation is purely to make it possible to provide a nicer user experience. For instance, if you don't allow uploading a file more than 5MB, you could use client-side validation to check that the file the user has chosen isn't more than 5MB in size and give them a nice friendly message if it is (so they don't spend all that time uploading only to get the result thrown away at the server), but you must also enforce that limit at the server, as all client-side limits (and other validations) can be circumvented. Just to emphasize, the question is what's the specified behavior here, and where in the spec is it specified. I can't seem to figure out an expression where the result is different than it would be if they had the same precedence. I figure there must be some way for it to matter or they'd be listed as having the same precedence if it didn't. Use an Object Instead of an Array If you're in control of the generation of this thing, does it have to be an array? Because if not, there's a much simpler way. Instead, wrap your code in a scoping function and use variables local to that scoping function, and make your other functions closures within it: I have a form in a fluid design consisting of a series of labels and fields, where I want them to flow one after another and wrap down if necessary to support the width of the window. (The label and input must flow as a unit, no dangling label at the end of one row with its input on the next row.) But when they wrap, I want the fields to line up in a tidy way. Is there some way to do this with HTML and CSS? (Unfortunately, I have to support older browsers without CSS3 columns [if they'd even help here].) Yes, there's a new feature from the W3C that's supported by some modern browsers, the File API. It can be used for this purpose, and it's easy to test whether it's supported and fall back (if necessary) to another mechanism if it isn't. I've tried several things, such as giving the labels (well, spans in them) a fixed length (you'll want to click the 'Full Screen' button in the snippet so the snippet window width isn't fixed): As far as I can tell, this is covered by this section of the specification, which explicitly only sets the function name if the IsIdentifierRef of the LeftHandSideExpression is true (which apparently it isn't for property references). Suppose you had a function that was supposed to always accept a string. You'd want to know if someone called that function with something that wasn't a string. So you might do: Ideally, each "column" would take the size of the longest label or field in it (although for now all the fields are the same size), responsively, as the label+field pairs wrapped. I'm using jQuery, if we get into needing a JavaScript solution Here's the shortest I can get it: The obvious, simple answer is missing, so for completeness: It looks like you need this to be an array, in which case there isn't really a better way than searching through the array unless you want to put a map on it, which you could do if you have control of the generation of the object. E.g., say you have this originally: It looks okay when they're stacked up with the longest label in each column: Please don't speculate or theorize. TC39 had a reason for not including it. I'm interested in what that reason was. I've been through the TC39 meeting notes but haven't found it yet. The closest I've found so far is Allen Wirfs-Brock replying to Bergi to say there was no consensus for doing it for that form because of "various objections," but sadly he didn't say what those objections were. Now, despite the above, the usual way to check for those is to use the fact that they're falsey: outer: x = 42
Parent#show: arg = arg
 To prove to myself that the "works" case wasn't that the functions were being optimized away, I returned them out of the method and called them. Here's that slightly-more complex case (note the comments); this version works: