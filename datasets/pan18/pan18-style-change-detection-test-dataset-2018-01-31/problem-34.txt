However, in order to implement this simple model, there are many prerequisites: Improve your estimation: Perhaps your point estimation is not consistent. Some people use benchmark stories. For example, identify a typical story as a 1-point story and another as a 2-point story and so on. When doing the estimate, use those to compare. Is this story more effort/complex than the benchmark story? This is easier to understand if you contrast Scrum with Waterfall In the waterfall process, tickets are assigned to individual developers by name. At any given point in time, at a minimum, each developer will be working on one ticket. The developer will typically complete the development, unit test it, check it in and move on to the next ticket. At some pre-determined interval, a build will be taken and thrown over the wall to the testing team. Sometimes each developer may be working on more than one ticket, either because one ticket is blocked or because, in the developer's opinion, it is more convenient to work on related tickets together. From David Anderson Interview: The most commonly cited instance where Kanban is extremely successful is software maintenance. Anderson says this involves fixing production bugs and doing small incremental improvements. Kanban works well with software maintenance because such work isn't a natural fit for projects and one to four week sprints. Anderson says, "It makes more sense just to take the requests, work on them, and when they're ready, find some way of deploying them to production." On a side-note I am pretty worried by your words: The Agile way is more the other way around: The best way to introduce teams to new practises is to let them find out they need them and then let them implement it themselves. Forcing practises does not really feel self-organizing. I as a tester part of an Agile team always sit in with the planning poker sessions and estimate just with the team, keeping in mind the complexity and size of the testing efforts needed to complete the story to done. If I know the area we are working on lacks a lot of automated test coverage I will give the story a higher estimate then the programmers in our team, often we average out the points in these cases. One of the major Dutch web-shops with around 20 Scrum teams (in 2013) did experiments with the length of Sprint planning meetings to get and idea what level of detail is good enough. They told me that doing Sprint planning meetings in 15 minutes (yes just 15 minutes) lead to relative the same average estimations as 4 hours would. Now I think this will lead to a bit of more discussion during the Sprint, but it highlights that details are not the most important thing of a Sprint planning. Scrum expects cross-functional team members, when developers do not help with the testing part of product backlog items, then they are not cross-functional. Everyone should focus on getting work done, its a team effort. Agile teams are cross-functional teams. They estimate the work from design to delivery often on a story based level. This includes the testing work, since testing should be part of the definition of done. During the planning meeting (from the Scrum guide) Software development is a highly uncertain creative process. Its done when its done, not when you said it would be done. It just doesn't work like that. This means there is also no good reason to commit to it, unless you want to pressure developers in doing overtime (which ofcourse is stupid, because they will make a mess, meaning you will go slower in the long run). Keeping tasks small will help if you have to keep seperate roles between creating code and testing. Testers can start testing after the first tasks are done. Trying using INVEST to define upcoming sprint backlog items to keep them small and testable. then requirements will change and you might not need all the database structures you envisioned at the start for example. In your example users do not want to minimize the website, that is the solution. They want it to be faster, but do they really or is it a developer thinking the users wants this? Writing a user story about "Users wanting a faster website" could lead to more solutions that just minimizing it. During the Sprint our teams starts each story with an "architecture and design" task, this is a session which results in a design and technical sub-tasks. Including design, coding, but also testing tasks. This is the moment the actual detailed design becomes clear based on the higher-level acceptance criteria noted down in the Sprint planning. After this session we swarm to complete the user story as quick as possible. The sessions length depend on complexity of the story at hand. I would say this is a dev-team group session, but sometimes if the complexity is low a single person could prepare everything with a short introduction to the rest of the team. If it is a larger company, maybe some more traditional teams exists. I would suggest to move this person there.