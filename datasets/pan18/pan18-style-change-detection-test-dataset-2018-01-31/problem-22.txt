Only somebody who is deeply engaged with the development team is likely to understand the significance of all the code being added. One approach is to pick out a baseline story and use this as a reference for the other stories. In a BI team I worked for their baseline story was to add a single measure to a report. They would judge all other stories against that one. Having a baseline made it quite simple for the team to say 'smaller than the baseline' or 'bigger than the baseline'. One trick is to step away from the original business story and evaluate if it is possible to deliver something smaller but that still produces business value. Mike Cohn has blogged about this. Task When a development team works on a story they often find it easier to break it down in to tasks. The tasks no longer need to be understandable by business users and so can be highly technical. The process of breaking a story down in to tasks also helps the development team better understand what needs to be done. Story A story is a functional requirement that provides some business value. It also has to be small enough to comfortably fit within a sprint. Epic An epic is like a super-story. When a story is too big to fit comfortably in a sprint and/or contains a lot of unknowns then it is usually better suited to be an epic. Epics are fine on the product backlog, but as they approach the top of the backlog they are typically decomposed down in to several stories. We don't bring epics in to sprints. As an employee I want to have access to HR policy documents so that I can be sure I am following policy. Make a CSS that follows the company style guide Stories are written in a language that is easily understood by the Product Owner and business users. That way they can understand the progress that has been achieved by completing the story. Take the story you listed as an example: Make the news story list update from a file that can be edited by the HR team Breaking stories down can be a real challenge. There are several techniques used that help with story point estimation. As a [role] I want [something] so that [value] As an employee I want to know the contact names of all the people in HR so that I know who to phone/email when I have a question. As it approaches the top of the backlog they break it down in to stories that include: The Product Owner talks the team through these stories and describes how they see this information being displayed on the home page of the site. Ideally get the team to agree on a set of coding standards and implement them as templates in the various code quality tools. Then run the tools from continuous integration and possibly even fail builds when the quality standards are not met. It is important to remember that tasks are focused on the development team and stories are focused towards the Product Owner and business users. When a development team completes a task it helps them to understand how they are progressing in a sprint. But it is the completion of stories that is important to the Product Owner as they understand what the story means. These kinds of tools are great for helping with the facilitation of code reviews and they also help a lot with code reviews run remotely (say when a team member is working from home). Code Quality Tools It is worth thinking about using automated code quality tools like Findbugs, PMD and Checkstyle. What constitutes 'extra code' is a much more difficult question. It is quite possible that code is added: Example A Product Owner puts an epic on the backlog that says: "Simple website for the HR department". Sometimes it is necessary to introduce an intermediate stage like this to help break a story down. As long as each stage delivers value that is usually OK.