Here's an example of how to set it up in Xcode: (You cannot toggle this while Instruments is recording, which it starts by default as soon as you choose your template.) Then, connect the button to an action on its view controller. In the action, perform the validation and either perform the segue or show an alert based on whether the validation succeeded. It will look something like this: Your constraint is “relative to margin”. When you create the constraint with the “Add New Constraints” popover, you can choose whether it's margin-relative or not: If you create your table view and your cell prototypes in a storyboard, the storyboard loader takes care of registering the cell prototypes that you defined in the storyboard. It always defaults to margin-relative; you have to turn the checkbox off every time you add constraints if you don't want them to be margin-relative. After we've added exactly the specified number of frames, we finalize the destination and release it: I changed the view controller's size from “Inferred” to “Freeform”. Then I changed its view's height from 460 to 800. (By the way, control-shift-click gives you a menu of all objects under the cursor.) The default memberwise initializer for a structure type is considered private if any of the structure’s stored properties are private. Otherwise, the initializer has an access level of internal. The resources are specialist map tiles which are in the form of hundreds of PNG images, contained in semantically relevant folders. If you want to get a pointer to a particular cell: Now, I'll select the text field, and pin the top space to the superview: And here it is in a UITableView Swift extension: If you add a subview at 20,30 to this view, then a point at 0,0 in the subview corresponds to a point at 20,30 in the superview. This conversion is what those methods are doing. Note: Things have moved on since this question was asked; see here for a good recent overview. I have tried (I think) all combinations of the wantsfullscreenlayout property, I was setting it in the method below but it made no difference, so I ended up setting it (on the navigationcontroller) to NO in the nib. As an example, imagine you had a game where a bomb was flying across the screen. If the user doesn't tap the bomb, it explodes when it reaches the edge. So you'd have one animation to move the bomb, and your completion block would have another animation to show the explosion, and maybe a call to some method to decrease a score or something. At this point it prompts you for the previous model to base it on. Taken from the Data Formatting Guide As already mentioned you have to use NSDateFormatter to format your NSDate objects. The easiest way to do it is creating a read-only computed property NSDate extension. edit/update: Xcode 8.3.2 • Swift 3.1 Update: Xcode 8.3.2 • Swift 3.1 You can simplify the declaration of a read-only computed property by removing the get keyword and its braces: Then resize it to 50w 50h pixels (maximum: 96 x 64) and save it as iconTab0@2x.png. Create a method with a completion handler to get the image data from your url Finally resize it to 25w 25h pixels (maximum: 48 x 32) and save it as iconTab0.png. Now all you need is to select those 3 images at your finder and drag them to your image assets. You can use Calendar to help you create an extension to do your date calculations as follow: You can use filter() to filter your array as follow You can use the method dropLast(n:) on the characters to remove any number of characters: I have created a ^^ operator in Swift. How do I make it work with Integers and Doubles like all other operators? You can design your own Gradient View as follow: You must declare computed properties—including read-only computed properties—as variable properties with the var keyword, because their value is not fixed. The let keyword is only used for constant properties, to indicate that their values cannot be changed once they are set as part of instance initialization. Now String conforms to RangeReplaceableCollection so now you can use Array's method dropLast straight in the String and therefore an extension it is not necessary anymore. The only difference is that it returns a Substring. If you need a String you need to initialize a new one from it: You can convert UIColor to CIColor and then extract the color components from it as follow: If you know HTML and CSS you can use it to easily control the font style, color and size of your attributed string as follow: A computed property with a getter but no setter is known as a read-only computed property. A read-only computed property always returns a value, and can be accessed through dot syntax, but cannot be set to a different value. You can not use same name and same signature for function. Yes function overloading is there and it means that you can use same name with different parameters. You can create as many function as you want using same name. The thumb rule is each overloading function must have different parameters.