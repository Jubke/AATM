which seems to me as if either you don't understand the purpose of User Stories, or else your Team is not using them correctly. User Stories are a form of (living) documentation. Years later, when trying to figure out why a piece of code was written, you should be able to go from the code to its corresponding User Story, and see it there. If you cannot, then that is an issue that needs to be addressed. Only the tasks in the product backlog could be prioritized via the MoSCoW method. If one were to do as you suggest, trying to get a distribution of priorities in the Sprint backlog, then the Team will be ignoring those project-priorities. I would focus on the need, rather than the implementation. The user story would then simply be: 

This seems like a pretty good approach, to me. Allowing the customer as much (non-secret/sensitive) information about your business with them is the best way to improve the feedback cycle. As such, this is a valid reasoning for splitting each project into its own JIRA project. Though you could also, in theory, keep a 'Requester' custom field and make new Projects/Boards based on the Requester field, that is more or less just a different approach to what I suggested above, just even more work. 

When a user attempts to contact a developer directly, simply instruct the developer to say "Thank you for bringing this to us. However, as per company procedure, I am not allowed to work on anything without it going through the Product Owner first. Please contact at [email/phone] with this issue if you wish it to be worked on." You point out the lack of a Software Requirement Specification or Detailed Design. To me, this lack is a good thing. Expending too much effort into upfront design has two side-effects. Firstly, it puts more time and effort into design and documentation instead of writing code. Secondly, it locks the Team into a particular mindset, which in nearly all cases will either be wrong, will become wrong as requirements change, or both - thereby making the Team less able to respond to change and update their code. They will always, in the back of their minds, be trying to 'stick to the plan'. Both of these will harm the Team's ability to create working software - which, again, as per the Agile Manifesto, is more important than documentation. I am much more interested in project management activities, requirement gathering, optimising my sprints, organising my backlog, reading burn down charts, making sure scrum is followed properly and so on. 

I do not mind at all doing this, but I have expressed the following concerns: I suggest keeping a change log to track all change requests, and try and ensure that the requirement gathering is done thoroughly before work has begun. I feel that at best I can point him in the right direction and give suggestions on how to solve the problem, but in the end, he has to find the solution. My boss doesn't seem to get that and expects me to hand hold him. 1) How to handle change requests Many clients do not care about this, and it only works extremely well when you're working in an environment or project that adopts this approach. I feel that since I am not hands on coding, the support that I can provide is limited, given that I cannot try different things out with the code. If I am required to start developing, than that is going beyond my job description. I have made it clear to my boss that I have no interest at all writing code again. 

As an agile project manager, I am currently working with one sub contractor, the problem that I am currently facing is that he is just not pulling his weight with not only doing the work but also answering technical queries, and my boss is expecting me to investigate and on a theoretical level solve the problem for him. Minor tweaks are fine, but at some point you will need to be firm, charge the clients for them and make them aware how the changes will impact the delivery date. How can I convey this to my boss without getting to confrontational? Is he correct, and is the level of support that I am supposed to provide? 

Wont have items also need to be documented and assigned a status of closed, so that we dont loose sight of those and can be tracked. These items can be those feedback items which are not relevant to the product or are not cost effective to implement at this time. becomes one of the acceptance test of the first story: http://www.scrumalliance.org/community/articles/2008/february/the-case-of-the-time-tyrant Feedback items eventually become part of the product backlog by either revising or adding new items in the backlog. These have to be prioritized by the Product Owner before the team pulls them into a Sprint/Iteration Backlog. So to answer your question: For the issues you have encountered, new stories / technical debt tasks should be created and added to the sprint backlog (as per the team's velocity). These may cause some user stories (maybe feature requests) to be pushed into future sprints, which is fine as long as the stakeholders agree that paying off technical debt provides more value as opposed to feature requests. 

100% user story completion vs 100% productivity Think in terms of value delivered vs utilization. Goal of Scrum team should be to maximize output and not maximize utilization. Anything (whether a machine or person) working on 100% capacity for longer duration will eventually break.