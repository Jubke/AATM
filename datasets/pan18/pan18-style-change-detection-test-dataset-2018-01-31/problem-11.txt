Moving from waterfall to agile. Following the Scrum (or a modified Scrum) process. Congratulations! You are on the right track. It is possible to work out the other steps from here. Unbalanced work: You may have work that is not balanced across development, design and testing teams. This may lead to idle time in some disciplines. The solution here is to get the team to be more cross-functional. Impediments: Do stories/tasks get blocked often because of impediments? If that is the case, track impediments, assign accountability and adjust your sprint, as needed. Rework: Do you have lots of rework? May be the team declares a story completed and the Product Owner asks for fixes, involving rework and retesting. The solution here is to write testable acceptance criteria upfront. You can use the Nokia Test as a starting point The Nokia Test (also known as the ScrumButt Test) was developed by Bas Vodde of Nokia and tuned by Jeff Sutherland, the co-creator of Scrum. I would take two immediate steps to improve this: However, it is not clear why the ScrumMaster, let these concerns pile up instead of addressing them as they arose: Steps for moving from waterfall to agile Looks like you have made the two most important decisions for transforming your software development process: If I were the ScrumMaster, instead of being on the defensive, I will try to drill down into these concerns and make a serious effort to understand the root causes and look for solutions. One departmental supervisor (who manages 4 Scrum teams and other staff) I know holds a fortnightly all hands to share plans, admin matters and so on. You might want to consider something along those lines. We are doing Sprint retrospectives with the entire team including the ScrumMaster and the Product Owner present. We have constructive discussion and good ideas are being generated. However, to improve implementation we are looking into the start-stop-continue format - what should we start, stop or continue doing from the current process. What is a good format for Sprint retrospectives? In Scrum everything cannot be top priority. The Product Owner creates an ordered list. The Development Team works on them in that order. You don't seem to have the two essential roles for Scrum - the Product Owner and the Scrum Master. However, if you wish to practice Scrum, you can start by sending a few people for Scrum training. Your team is too large to be a single Scrum team. You can split it into two Scrum teams. You can designate the Scrum Master and the Product Owner for the teams. The same Scrum Master and/or Product Owner can be shared by the teams, if needed. One example I have heard is that of people cleaning up a messy conference room, after a teamwork exercise involving sticky notes, posters, markers, paper aeroplanes, balloons...etc. Nobody tells anyone what to do â€“ everyone pitches in to do some part of the clean-up until it is all completed. You can attend and listen in the Daily Scrum but not speak From the Scrum Guide - The Scrum Master enforces the rule that only Development Team members participate in the Daily Scrum. Find a way to prioritize projects: If management says "everything is top priority" they are in effect saying nothing is priority. When you designate one of the projects "top priority" what you are saying is "assign resources to this project first and if any resources are left assign them to other projects". If "everything is top priority" then all projects will be starved of resources. In reality, more resources will be wasted in context switching. Work in fixed iterations (say 2 weeks): Split the team into two and assign half the projects to each team: Regardless of other factors, communication is a problem in teams that are too big. At a minimum you will save the need for everyone to stay and listen to all project meetings. Keep the teams relatively stable. You can split the projects between the teams. However, you will get better productivity and team morale if each team focuses on one project per sprint. You can make an exception if there are critical production bugs on other projects that cannot wait. Improve your estimation: Perhaps your point estimation is not consistent. Some people use benchmark stories. For example, identify a typical story as a 1-point story and another as a 2-point story and so on. When doing the estimate, use those to compare. Is this story more effort/complex than the benchmark story? In Scrum there are no status meetings. The Daily Scrum is a 15-minute time-boxed event for the Development Team to coordinate their work. None of what you described is Scrum Scrum doesn't have the roles you described.