Kanban is suitable for software maintenance work Scrum is not suitable for software maintenance. Kanban is. 

None of what you described is Scrum Scrum doesn't have the roles you described. 

In addition to Brooks' Law, in your case the bigger factor is the potential frustration to your in-house team. They have to do a lot of hand holding to get the freelancer started. This is during the time they are under time pressure in a late project. After they have come and gone, the in-house team has to deal with the fallout of any issues arising from their code. Limit Work In Progress (WIP): Minimizing WIP improves throughput. The biggest problem is Brooks' Law You did not say why you are trying to add freelance developers to the small project temporarily. If your project is late and you are hoping to crash the time line, remember Brooks' Law, "adding manpower to a late software project makes it later". 

Kanban has only a few principles: 

David Anderson literally wrote the book on the use of Kanban in Information Technology (IT). You can attend and listen in the Daily Scrum but not speak From the Scrum Guide - The Scrum Master enforces the rule that only Development Team members participate in the Daily Scrum. 

c. Let them review and accept all code from the freelancer with the explicit understanding that they will take ownership of that code when the freelancer leaves. As pointed out by CodeGnome, velocity is always going to be a range. However, if you find that your velocity fluctuates a lot, here are some things to check and suggestions for improvement: It takes some "ramp up" time for the resources added to the project to become productive. Measure the lead time: Cumulative flow charts are very useful for this purpose. And look for ways to make continuous improvements in small increments. Find a way to prioritize projects: If management says "everything is top priority" they are in effect saying nothing is priority. When you designate one of the projects "top priority" what you are saying is "assign resources to this project first and if any resources are left assign them to other projects". If "everything is top priority" then all projects will be starved of resources. In reality, more resources will be wasted in context switching. 

Estimate story points and apply a velocity range Here is the simplistic arithmetic: You need velocity numbers over a reasonable period of time. Minimum is three sprints, more is preferred. Even if you do have velocity numbers over several sprints, it is recommended that you use a range rather than a precise looking number ("Our velocity is between 25 and 35 points."). Do you account for holidays? For example, if you run 2-week sprints, you may have one sprint with 2 holidays which is 20% less duration than a normal 10-workday sprint. Also, if some people are on vacation, you will have less capacity. May be you want to adjust your sprints for 10 working days, instead? I would take two immediate steps to improve this: You don't seem to have the two essential roles for Scrum - the Product Owner and the Scrum Master. Kanban was developed at Toyota in Japan to improve the auto assembly line. Split the team into two and assign half the projects to each team: Regardless of other factors, communication is a problem in teams that are too big. At a minimum you will save the need for everyone to stay and listen to all project meetings.