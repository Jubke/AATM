The goal of Scrum (and iterative agile development in general) is to have a sustainable and predictable development cadence. As such, it is generally better to aim for consistent velocity over time rather than for increasing velocity. 

During a round of planning poker, the programmers on the team might estimate this story at only two points, since adding a tooth-count column to a database table is a minor change for them. However, the testers might estimate this story at 13 points, since getting close enough to count a Jabberwock's teeth to gather accurate fixture data is a dangerous (and potentially fatal) task. 

TL; DR Story points represent consensus within the team. The goal of estimating story points is not to provide the largest or smallest estimate, but to accurately reflect the effort required by the entire team to meet the "definition of done." Estimating Percent Complete In the Work in Progress column, the story is estimated at five story points, and the team has guesstimated that 50% of the forecasted work has been completed. Theoretically, that means the story in the second column is half-done. Options for Compromise Within the Team You can do whatever seems reasonable in such cases. Generally, teams agree beforehand on a compromise process, but it's okay to change it on the fly so that the end result is always somewhat reasonable. If a story is accepted into the sprint, at the end of the time box the team must record an estimate. This estimate may be: 

The team is being "held accountable" by the organization to show how much effort they're putting in. This is especially common when Sprint Goals aren't met, and the team wants to say "We didn't complete all the stories needed to meet the Sprint Goal, but look how much effort we out in on Story X!" The team is improperly treating velocity as a measure of productivity, rather than a measure of historical team capacity, and trying to game the metric to improve the optics. "We estimated this story at 3 points, but it really took 8, so we really did 25 story points rather than 20 this Sprint! We're super performers; please don't fire us!" Upper management is improperly treating velocity as a performance target rather than a forecasting tool, and driving the team to take on more work than may be sustainable. The original estimate may have been set by leadership rather than the team, or the story was pushed into the Sprint by stakeholders without sufficient decomposition. Do you really want to track separate velocity metrics to cover up a deeper process problem? Review, Don't Track There are several schools of thought about whether teams should ever adjust story points within a Sprint. This is a complex topic outside the scope of this answer, but the overly-simplistic answer is that you're generally better off leaving your initial estimates alone if your goal is to improve your process. It's much better (from a process point of view) to say "Hey, we mis-estimated! Let's fix that next time!" rather than constantly moving the cheese. To sum up, it's worth reviewing discrepencies in estimates, or identifying process impediments that kept a story from being 100% done. However, tracking this data as a first-class element on a story card is very much an anti-pattern. 

The average (or mean) of the estimates. The median of the estimates. The worst-case estimate. The best-case estimate (but please don't do that). Failure to estimate properly will become obvious during the sprint, and will provide good grist for the mill during your next retrospective. Continuous process improvement is the name of the game, after all. Getting Consensus Sometimes getting consensus is hard. That's why planning poker uses time-boxing, so that consensus-building doesn't take infinite time. Remember, you can also call on the Product Owner to clarify stories, decompose stories, or swap out stories for something else on the Product Backlog. Some level of consensus should always be possible. But from my experience business executives are often really tied to management executives. So it's a 2 versus 1 situation where Scrum teams often stay undercover as you described. You might want to look closely at your situation if you're not mistaking the business resistance with what's really behind: management resistance. 

The majority of the team rate themselve as doing poor in term of synergy and collaboration. They think it's their main weakness and think they should take actions on that. 

Possibles suggestions includes: provide training, promotion, create dissatisfaction with the status quo, creating the sense of urgency, addressing individual fears, let time run its course, fire the saboteurs, praise the right behaviour, involve people, etc, etc... 

But on the other side, one of the member think they are fine in this regard and this is not an important aspect to be taken into account for the overall team performance. He says communication is fine, that they talk enough already and that bug tracker is sufficient. He says he perform better working alone and that disruption from more collaboration would deteriorate his productivity. So yes, if you don't address those mistaken belief about agile or Scrum from the management, than eventually the adoption will fail. I agree that it's good to involve devs in analysis activity too, particularly any meetings with stakeholders. We ended up with a number of smaller stories which, while quite technical, all had an outcome we could demo to a non-technical product owner. To get there, we looked at what steps the team needed to take to get there technically and identified where there were outcomes that the PO was happy to verify. Anyone can call themselves an agile coach. No idea how the courses out there compare, which is best probably depends on your objectives. I've never seen a company require (or even list as a nice to have) any agile (rather than scrum specific) qualification. They might be worth doing to learn but I doubt they'd have much impact on your resume. 

Regardless of methodology, it sounds like the principle of limiting work in progress would help you a lot. This works where the customer facing teams don't need the whole of infrastructure work but will just consume parts of it.