Edit- Per request a short, short synopsis. First off, Steve Bockman has an eBook on Amazon that goes into how to do Team Estimation. My exercise is an evolution of Steve's. When you are done, you have all the stories pointed in relation to the other stories. Round 1: Stack of Fruit You start with a stack of cards. For the exercise, it's about ten cards with the name of a fruit on it. The team stands around a table and hand the stack of cards from person to person. Each person can do one of two actions, either place a card on the table, indicating if it is more or less effort than an existing card or they may move a card already on the table. When you are done you have a single row of cards from least effort to most effort (You can do this with business value as well). Round 2: Assign Points At this point you can break out the Fibonacci cards. The lowest effort fruit card has the 1pt card put over it. From here each person takes the next numbered card and places it down using the guidance of "Is this fruit card roughly 1.5 more effort to prepare and consume than the fruit card to the left." Epics are not estimated. They are far too large and nebulous to estimate accurately, so attempting to do so does nothing but give a false sense of schedule-security. There are so very many things wrong with that statement, from a Scrum perspective. I'll go through them in order. Sure; the example you give, while not ideal (particularly the part where the timeline is decided by management, rather than the team), is not impossible to work in. Nor is it that uncommon, unfortunately. The answer depends on whether or not you are actually doing Scrum. If you are, then the answer is during the Sprint Planning Meeting (or, as some Teams do, during the Pre-Planning Meeting). Most methodologies should still work, you just have to frame your thinking differently. For instance, instead of determining whether or not you need to extend your deadline (which in this case is possible), you can determine whether or not you need to strip out some of the features. However, it's looking like your company does not really do Scrum. The commonly accepted word for what you're doing is Scrumbut. So your two options are: Now, to answer your actual question, Ask your company how they intend to implement their particular version of Pretends-To-Be-Scrum-But-Actually-Is-Not-Even-Agile. Because we, not being part of your company, cannot really answer that question for you. Keep in mind that it's possible there might not be anything actually wrong with what your company is doing, from a business-perspective... but calling it Scrum is blatantly false. As the Scrum Guide notes: Most technical initiatives are done for this reason; to provide the business with options to change in the future. Some of them have more direct business concerns which are more easily phrased, like increasing current system performance to cope with growing demand. Others may be relevant to different parts of the business - changing from Fortran to Python to attract better talent and make it easier to recruit - but in the long run, that's still about having options in the future. If the team feel pressured to churn out new features, though, they'll very quickly abandon the technical debt. It can't be seen or measured easily, and as such is usually the first victim of any pressure. In my experience, the pretence that stories should be focused on users tends to result in other stakeholders' needs being pushed back, or treated only as "Technical Stories" which then have to be delivered alongside others as 2nd class citizens. They're not user stories. Users are just one type of stakeholder. If you do that, it doesn't matter what you call them. But I'd prefer it not to involve the term "user" unless it really means it. Nobody who's interested in those kind of reports is interested in the fine detail. If you've already got stories, you can map the stories to the capabilities / outcomes and come up with them that way (search for "Story Mapping"). Thinking about the business impact and the real stakeholders who need to give feedback can really help to address project risk. In this place I agree with @jmort253. It's even better if you can avoid falling into debt in the first place, but usually there are different skill sets on a team, people learning to code well, etc. - so having the ability to refactor as you go and help educate other developers is more important than getting it right up-front.