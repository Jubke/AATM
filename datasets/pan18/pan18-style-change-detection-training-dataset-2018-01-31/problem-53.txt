The default response of the Scrum Community will be that cross-functional people are king but that is not always viable in practice, especially in Enterprise organisations or those with strict regulatory frameworks that need sign off. It could be that the developer has en employment contract which states his/her specific role and skillset. We actually run a three hour Sprint Planning session but that is an adaptation we found because of our workflow. A shared resource is indicative of poor management not investing in cross-functional training, not hiring needed resource, not incentivising staff to remain in the company, not promoting people to the roles they are aspiring to or not accurately forecasting the book of work for the year (or possibly all five). When you are a part of two teams, you are a part of no team. The Scrum teams become ever closer and the switching developer is just considered "that person they need to include". What metrics should they be interested in? Again, this is subjective but the bare minimum should A very vague question that I cannot answer, beyond what I have already provided above. You could also append something like "even from a malicious attacker", which should make it more testable (see INVEST mnemonic) - make sure all common attacks (other than social engineering, which isn't really solvable...) fail. And when things don't go smoothly and you have these "environments instability" problems crop up, you spend your slack time fixing them. No slack (or less slack) that sprint, but you still get done what you actually committed to. "As a user, I want any personal information I give (Company) to remain private and secure." This seems like a pretty good approach, to me. Allowing the customer as much (non-secret/sensitive) information about your business with them is the best way to improve the feedback cycle. As such, this is a valid reasoning for splitting each project into its own JIRA project. Though you could also, in theory, keep a 'Requester' custom field and make new Projects/Boards based on the Requester field, that is more or less just a different approach to what I suggested above, just even more work. One approach that I've seen work well is to: which seems to me as if either you don't understand the purpose of User Stories, or else your Team is not using them correctly. User Stories are a form of (living) documentation. Years later, when trying to figure out why a piece of code was written, you should be able to go from the code to its corresponding User Story, and see it there. If you cannot, then that is an issue that needs to be addressed. This could be many things and is worthy of a question in it's own right. The developer will waste valuable cycle time wondering who takes precedence over their time - Product Owner A or Product Owner B. It is likely to change from Sprint to Sprint. However the team is really failing in one key area. I have included some of the examples I use below I have been asked to explore the feasibility of a development team where each developer could theoretically be assigned to a number of projects and be heavily embedded in the requirements gathering and backlog generation alongside the Project Manager or Product Owner. The management want to know if such an approach is still "Agile" which seems to be a fixation. Summary Overall, the effectiveness of both teams are at risk and the developer can feel overworked, isolated and professionally penalised leading to real-world economic consequences. For a developer to return to the original state depends on its complexity. Which can require anything from 5 to 30 minutes? Now imagine multiple interruptions and you can easily see how productivity will flatline. Without being able to dedicate themselves to a project the velocity of the team will become inconsistent as stories forecast at the start of the Sprint are left undone lowering the velocity to an artificial level to cope with an absent team member If a Development Team runs out of work during the sprint, then the Product Owner should be informed and either the sprint should be concluded early or more work should then be added to the sprint. This should, ideally, not be a very common occurrence. If a Development Team consistently under-estimates work for their sprints, then there are issues with their estimation process. Stories, however, are about providing direct business value to the customer, and thus must be understandable to the customer. While having available guidelines for Story creation might help (such as the INVEST method) may assist, in the end they need to be vetted by someone who either is the customer, or whose job is to understand customers' needs. Whether or not you should cancel the Sprint and start over depends on whether or not your lack of ability to finish those stories translates to a lack of ability to accomplish your Sprint Goal.