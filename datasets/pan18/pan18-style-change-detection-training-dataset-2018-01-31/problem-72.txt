Before answering your question, I want to make two comments: In the other side, forecast of next Iteration/Sprint capability is Development Team's responsibility. It mean that Product Owner can't force Development Team take more tasks than they decide to take themselves. You didn't describe this aspect at all. What Scrum Master should do to avoid situation when Scrum Team didn't reach a goal of event in time? For example: You have 2 User Stories. Them Scopes are approximately equal to each other. But one of them should be implemented on C# and another on C++. Your team have two C++ developers and only one C# developer. So, of course User Story with C# implementation will be more harder for your team and, obviously, it should be estimated with more Story Points. XP and DevOps are different things. They don't contradict with each other, they can be used together, but they have different base concepts inside them. In this case "model" is just synonym of "methodology" (wikipedia keep articles about this models in "methodologies" section), or "model" is a model for methodology and metamodel for development process (i.e. set of principles on which build methodologies)? The key word is "prioritized". Team should take in iteration/Sprint only most prior items. And all decision about prioritization is Product Owner's responsibility. You can read all other details of this dividing process in the article above. This is another quote (Scrum and XP from the Trenches) that sums up all that is written above: Ok, you said, that customer can change unfinished features, but can he change requirements to functionality, that you are already implemented? By my opinion, you will have much more problems with interactions inside your company, than with tools. It's hard to be agile if your company is not agile. You can try to become a driver of changes in your company, but It is very hard challenge and topic for another question. But priority based not only by business value. In Scrum Guide is written follow: Points stories is not for exact measurement, story point is for relative measurement. While we using Story Points, we can talk that this Story is bigger or harder than another Story, but we can't be sure how much exact time we will implement it. I had an interview with one company. They use Scrum, but don’t like rough estimates during Release Planning. So, they asked me, how to make Release Planning more accurate (they don’t want more than 30 percent of deviations from the plan). All agile methodologies should be iterative. Otherwise, they will not correspond to the first and third principles of the manifesto: Wiki has the common definition of this term: As you can see, it is more complicated than initial story mapping, and looks more like “heavy waterfall” style, than “agile” style. As I understand Agile philosophy, accuracy of estimation of final release date is not high priority, because "responding to change over following a plan". Craig Larman took as a basis following approach (which was used by another manager in China): You have a basic process failure if the first time your management team reviewed the product was shortly before release. In particular, your organization failed to meet two of the core principles behind the Agile Manifesto. Specifically: The purpose of the daily Scrum is not to hold people accountable or to perform a status pull. Rather, it is intended to provide a forum for members of the Development Team to coordinate the current day's increment. The notorious "three questions" are simply guidelines; the format of how the information is presented is not strictly prescribed by the framework. You Must Address Resource Constraints. In all cases, you can't really do what you seem to be trying to do, which is spread the peanut butter ever thinner without adjusting your resource constraints. Specifically: Designers should be involved in Acceptance Test-Driven Development (ATDD), perhaps using Cucumber or Watir to specify the behavior or contents of their user interface. Programmers should be involved in Test-Driven Development (TDD), writing unit tests for all significant aspects of the product's behavior. Programmers should also be involved in writing tests for Continuous Integration (CI), to ensure that the code base is always in a potentially-shippable state. The Product Owner and Project Manager should be involved in writing tests for Behavior-Driven Development (BDD) and any non-functional requirements, ensuring that the product meets the team's "definition of done" at the end of every iteration or milestone. In the same way, systems administrators, database administrators, network administrators, or other specialists that work with the the Development Team (whether or not they are actually members of the team) should also be involved in testing. While cross-functional generalists are often the ideal for an agile team, in practice teams may contain (or matrix in) specialists for certain aspects of the project. These resource specialists are the ones best suited to develop tests that exercise their particular domains of expertise, and can help the rest of the team ensure that each vertical slice of functionality works as intended throughout the entire stack. If you find yourself writing a story that starts with "As a developer..." stop and think about what value that provides to the customer. Try and write all your stories with a customer actor in mind. Kanban is a lot harder to follow than Scrum. Consider why you have chosen Kanban. Many teams use Kanban when they are unable to get a full iterations worth of backlogs defined because requirements change so rapidly. Creation of a backlog and user stories was definitely a good first step but... I also wanted to add some thoughts on the actual Kanban board. A key concept of Kanban is visualizing your workflow. Your current board looks out of the box. Many Kanban teams will customize their Kanban flow to be more granular. For instance a team that has defined QA and Dev roles along with a UAT environment may have a flow that looks like Future>Defined>Developing>Testing>UAT>Production. Think and discuss with your team what their workflow looks like and make the board match it. In the long-run this will position you to focus on key Kanban concepts like cycle and or lead time as well as WIP limits.