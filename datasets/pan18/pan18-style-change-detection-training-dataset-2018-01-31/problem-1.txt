Definitely remind anyone looking at your forecast that it is an estimate Quickly check out how variable your velocity is. What is the team's last 3 iteration velocity? Current iteration? Total project duration? A highly variable velocity should prompt you to lower your confidence in any long-term forecasting results. List all your assumptions and the method you used to derive the forecast before presenting your number(s). Make sure your audience understands the impact of the assumptions you had to make. Be honest about your confidence in providing the forecast Try and provide a date range rather than a specific date with best, middle, and worst case numbers. You can go all kinds of fancy with Monte Carlo simulations and tools like Crystall Ball if you want. Use your scenarios as a chance to escalate risks DON'T make any long-term timing commitments based on your forecast numbers. The forecast should be used primarily as a tool to discuss and highlight risks/deficiencies that should be addressed to meet the customer's high level needs. You can estimate a completion date, date range, completion sprint, etc by dividing the current backlog size (in SP) by the teams current velocity but... Why do I favour this above burn downs. Most burn downs start late from the beginning as the first days you have not completed a story. Giving a continuous feeling that you are behind. Therefor I favoured burn-ups, but the Sprint speed adds even some more value. 

Agile teams are cross-functional teams. They estimate the work from design to delivery often on a story based level. This includes the testing work, since testing should be part of the definition of done. What is going to change when you have a visual identity? How do you measure success? 

Now it is possible that during the Sprint in such a design session the team notices that they under-estimated. Challenge the team to build only what is really necessary, apply the YAGNI principle and prevent over-engineering. If this happens often, inspect and adapt, maybe you need to take more time during the Sprint planning meeting. Discuss this in a retrospective and let the team decide how to experiment with improving this. During the Sprint our teams starts each story with an "architecture and design" task, this is a session which results in a design and technical sub-tasks. Including design, coding, but also testing tasks. This is the moment the actual detailed design becomes clear based on the higher-level acceptance criteria noted down in the Sprint planning. After this session we swarm to complete the user story as quick as possible. The sessions length depend on complexity of the story at hand. I would say this is a dev-team group session, but sometimes if the complexity is low a single person could prepare everything with a short introduction to the rest of the team. 

Let the Team find solutions to the problem during the retrospective. Instead of you finding solutions to what you think are problems. 

9:15 Setup meeting room and screen-cast recorders, dial-in external stakeholders 9:30 Start review sessions per team Start evaluation meeting after a short break. Lunch Start planning sessions 17:00 Have a beer and snacks :) http://www.rhythmsystems.com/blog/bid/87071/fire-to-protect-your-core-values 

Just do it? doing is the best example. More details during the Sprint: (this quote is from around minute 20, but start at 18m12s to get the full story.) 

TL;DR: Scrum doesn't provide for a lot of things, you need to figure out a way that works for your team and project. 

I suggest that you also let your manager read the LESS pages about Management. This to make him understand what is expected from managers in Agile environments. 

I think management is worried about hours, because they pay developers per hour. Every hour is extra money. Explain how Scrum gives developers more focus and that its harder to side-track on non important things. 

To many cooks? It's a team, they are the cooks. Teach the team something about collective code ownership as an Agile principle. Senior: Assist management to create structural and cultural changes in the organisation to become more Agile. Leads the path through Agile Fluency. You can estimate a completion date, date range, completion sprint, etc by dividing the current backlog size (in SP) by the teams current velocity but... 

Definitely remind anyone looking at your forecast that it is an estimate Quickly check out how variable your velocity is. What is the team's last 3 iteration velocity? Current iteration? Total project duration? A highly variable velocity should prompt you to lower your confidence in any long-term forecasting results. List all your assumptions and the method you used to derive the forecast before presenting your number(s). Make sure your audience understands the impact of the assumptions you had to make. Be honest about your confidence in providing the forecast Try and provide a date range rather than a specific date with best, middle, and worst case numbers. You can go all kinds of fancy with Monte Carlo simulations and tools like Crystall Ball if you want. Use your scenarios as a chance to escalate risks DON'T make any long-term timing commitments based on your forecast numbers. The forecast should be used primarily as a tool to discuss and highlight risks/deficiencies that should be addressed to meet the customer's high level needs. Still velocity is defined as the number of points you achieve in a Sprint. Just sum them. Then it is wise to average velocity of the last three Sprints, something Jeff Sutherland calls Yesterday's Weather. (this quote is from around minute 20, but start at 18m12s to get the full story.) Keep a good balance between UI and Unit-tests, UI tests are harder to maintain and with a constant changing UI it might even get frustrating to update them. Make sure UI tests are written as maintainable as possible, have the team use patterns like PageObjects. 

An Agile team should have automation testing knowledge from the start, the team should be cross-functional. Personally I think a test in each layer of the test pyramid should be defined in the definition of done for each story (feature) that is done. You need three values to forecast a cost: Speed of the team, estimate from the team and the cost of the team. Leading to a formula like this: