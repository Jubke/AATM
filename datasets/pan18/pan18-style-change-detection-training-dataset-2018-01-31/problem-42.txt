TL;DR Much of Scrum's value to an organization is in creating transparency. 100% agreement isn't the real point of planning poker; the goal is actually to narrow the cone of uncertainty around feature estimates as much as possible, and to make the level of effort and potential project risks of each story visible to stakeholders through their chosen proxy, the Product Owner. Choose a Framework; Apply Controls Which framework you choose matters, but it matters less than the application of formal controls and processes to your project. There are certainly classes of framework that are more geared towards manufacturing (e.g. Lean or Six Sigma), or towards iterative engineering (e.g. Scrum), but they all share a few things in common: The point is that you can keep re-estimating as long as opinions are converging. The key, of course, is that people need to talk about why their estimates are outliers, so that the team can consider this information when re-estimating each round. If you still have outliers after discussion has been exhausted or when the time-box has expired, then you have to use your team's defined process to find a reasonable compromise. Deviations from initial estimates are to be expected, and are handled by the inspect-and-adapt process baked into Scrum. However, if you find that your estimates are not growing more accurate over time, then you need to: Make your process visible and transparent to the team, your stakeholders, management, and the client. It is then up to them to identify the value (or lack thereof) in external processes. Your internal process will clearly identify the value that's being added by the team, and the lead time and process overhead added by any externalities. The cost of idle developer time is imposed by the external process. Your job isn't to create busy work, or to perpetuate the "100% utilization fallacy." The team can use that week to update the CI server, patch workstations, do in-service training, or just read a good book. The point is that this UAT cycle has a development cost (whether in non-product work or in iterative work) that is part of the organizational framework. Just make that cost fully visible. Do the best you can with it; the story will then either be done or not done at the end of the Sprint. If the story is essential to the Sprint Goal, coordinate with the Product Owner to see if the story's scope can be modified without negatively impacting the Sprint Goal. If neither the Sprint Backlog nor the story scope can be changed without risking the Sprint Goal, then: Regardless of how you deal with the issue, the mis-estimation (including assumptions, unexpected process issues, roadblocks, and so forth) should be grist for the mill at the next Sprint Retrospective. The point is not to lay blame for the incorrect estimate, but to understand the root cause and to continuously improve the estimation and planning process. Some options for compromise include: Release Planning in Iterative Development Release planning is primarily about defining milestones and expected shipping dates. The cone of uncertainty is always largest at the start of a new project, and therefore the accuracy of the initial release plan should be a range with a defined confidence interval. The main risk to this approach is that when UAT is completed, any changes or new work may not have been accounted for in the team's estimates. As a result, you may or may not have enough time to address the changes or rework within the Sprint. As a result, the visible cost to the project will be more failed Sprints (e.g. Sprints that don't meet the Sprint Goal), incomplete work which must then be returned to the Product Backlog, or Early Termination with a return to Sprint Planning. re-evaluate your estimation process to see where you might improve, and determine whether your original scheduling-baseline was based on faulty assumptions. Management Needs to Embrace Change, Too "Embracing change" is not the sole province of the development team in Scrum. It is also the responsibility of the Product Owner and stakeholders to embrace all necessary changes to scope, schedule, resources, market forces, and other realities that are needed to ensure the project either succeeds or fails early. An accepted axiom of agile planning is that story points are a measure of relative size (not time). The estimates are often wrong in the specific, but in the statistical aggregate they approach a "good enough" number for planning purposes and scheduling control. Planning Poker Can Have Multiple Rounds As explained on planningpoker.com: It is senior management's job to control for (or accept) process externalities. As long as everyone keeps that in mind, things will run much more smoothly. Remember, WIFO front-loads your risk. If your goal is to fail early, this can be a good thing, and often represents a huge cost-savings over projects that fail late in their cycles. However, depending on why the work is considered worst, placing it too early in the schedule can skew a project by introducing premature architectural, design, or engineering decisions that would have been more self-evident later on. Lean methodologies advocate reserving major structural decisions until the last responsible moment, while WIFO often forces these complex decisions to be made much earlier.