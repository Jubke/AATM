For a developer to return to the original state depends on its complexity. Which can require anything from 5 to 30 minutes? Now imagine multiple interruptions and you can easily see how productivity will flatline. In addition, senior management were happy that the team were under the Scrum Master control rather than a runaway train they were previous. The Product Owner is much happier that the Scrum Master is willing to lead when required and allow Agile principles to guide wherever possible. I am writing a white paper on our experience at present. In addition, that does not scale to Scrum of Scrums otherwise each Scrum team would simply proclaim their dependency was 'Done' without a Product Owner to consider that they whole product was progressing. It is important to realise this symptom may be the start of a death spiral. It's important to consider that the needs of the Scrum Team may not be in line with the career aspirations of the Developer, especially in large organisations with entrenched employees and HR. HR is on their side, no ifs, no buts. Not every Scrum Team works in a start-up environment. I can feel the frustration in your post. As someone who made the transition from a PMO to an Agile role I can understand both sides of the coin. I would focus on the need, rather than the implementation. The user story would then simply be: Alternately, you could bake it into your Definition of Done (see this answer). Note that the DoD is not a user story, task, nor epic in and of itself - it is a part of the acceptance criteria for stories. If your DoD contains sufficient security as a requirement, and you have a story that doesn't yet have that security, then the story cannot be considered as 'Done' (and thus burned down) until it meets the DoD requirements. There are so very many things wrong with that statement, from a Scrum perspective. I'll go through them in order. One final thing, you might want to look into how you're defining User Stories. A commonly-used format is "As (identity), I would like to (action) in order to (reason)." See the INVEST mnemonic for more details. If you want multiple 'projects' to be on the same Scrum-board Sprint, then you can accomplish that by having a board with the JQL filter set to read from multiple JIRA projects (ie. 'project = MultiTestOne OR project = MultiTestTwo ORDER BY Rank ASC'). Boards and projects are set up 1-to-1 by default when you create a project, but there's nothing stopping you from later altering the JQL. As for Epics: without further information on what exactly you mean by 'project', I can't give an opinion on whether or not they would make sense via Epics. If it works and everyone on your team is okay with it, though, then I don't see why not. At their heart, all Epics in JIRA are is simply a way to group Issues. Without further information, I can't possibly decide for you which of the two (or a perhaps a third) options is the best for your situation. You need to discuss with the Team to see what makes the most sense. As a side note, you stated that For tasks such as researching or learning something, many people use a spike (see 1, 2, 3). It's not part of Scrum, but it's a good fit. You should be able to estimate this type of work somehow, although it may be hard without prior experiences. In the end, it's no different than any other story, except that the completion of a spike yields an increase in knowledge and maybe some kind of deliverable that isn't a shippable software product. You place it on the backlog appropriately and do it before you need to deliver the functionality using whatever information you learned during the spike. How the stories get added to the backlog doesn't matter that much. Those that are known at the beginning can be added to the sprint backlog immediately during the planning meeting. Like you mentioned, some tasks might not be known at the start. The person who needs the task can ensure that it gets added, and could probably do a better job of describing what needs to be done to properly meet the requirement and deliver the feature.