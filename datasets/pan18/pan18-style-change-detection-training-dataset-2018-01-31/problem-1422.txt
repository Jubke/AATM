Precisely. In fact, it's still being used for this purpose today because HTTP as we know it today is still, at least fundamentally, a stateless protocol. This is because the case-sensitivity of selectors is dependent on what the document language says: As of HTML5, the foreground colors of hyperlinks, among other things, are on track for standardization in the form of guidelines for expected default rendering behavior. In particular, taken from the section Phrasing content, the recommended default colors for unvisited and visited hyperlinks are the following: "!" (U+0021) Switch to the markup declaration open state. 8.2.4.45 Markup declaration open state: Unfortunately, this is not possible. Per the spec: The following steps within section 8.2.4 lead to this conclusion, which Chrome appears to be following to the letter: 1 In quirks mode for all browsers, classes and IDs are case-insensitive. This means case-mismatching selectors will always match. This behavior is consistent across all browsers for legacy reasons, and is mentioned in this article. you don't have to worry about CSS validation either, as CSS doesn't care about non-namespaced attribute names as long as they don't break the selector syntax. In other words, for string values this means the value is always treated literally. It is never interpreted as markup, regardless of the document language in use. However, these uploaders all bring their own logic of how to handle uploads on the client side. I am looking for an unobtrusive way to "fancify" existing, classical file uploads, i.e. introducing a progress bar to normal file upload forms. Update: Official documentation in RFC 3986: Does anybody know from which version on, OSs / Service Packs / Applications ship with Unicode versions of the standard fonts? There is, for example, Microsoft's Arial unicode that ships with Office since 1999, however I do not have office installed and still my Arial has at least some of the Unicode range. I have a large, PHP-based CMS that manages web pages. All items are organized in a tree structure. When I edit an item, the "back" button usually points to its parent item. So, the usual workflow is navigating through the tree. So my question is: Is there a valid, standards compliant way - an attribute of some sort - to store arbitrary data inside HTML tags, for further processing by JavaScript? Any suggestions are highly appreciated. I would prefer an Open Source solution, but I am also open to proprietary solutions like ActiveX controls or Java Applets. Is there a robust way to do this? I have a page with a large products table. Each product is represented by an image. Now every now and then, the need arises for a workflow that "jumps" to other items without regard for the structure. It depends on the method you send the form with. This is not exactly what all the Flash-based uploaders do: They can use data from a form, but they do not provide possibilities to submit the form as is, what is what I'm looking for. I am looking for a (probably) Flash based upload function taken a step further. Posting a link would be a bit cumbersome as it's all in a closed development environment but if all else fails, I will put something together to look at. Does anybody know an Open Source or commercial solution that comes close to Kroppr and ships with source, or allow for full customization and free definition of the server-side backend? The former is used to completely hide table elements. The latter is used to completely hide everything else. In the source code, I would like to have each li on one line for easier debugging: Another problem that can happen quickly is that the GET URL containing all the "from" values becomes too long, or totally chaotic: Right now, the "history" ends at the last item so that when the user returns from the front-end view, the link to the original page is lost, and they have to search it by hand. I have solved this elegantly by opening separate windows in the past, but I really want to implement a seamless one-window workflow that works universally, mainly because multiple windows tend to confuse users. It is as if Firefox first renders the background image at 100% width, centers it, and then notices that the body needs to be stretched to 1400px. How do you go about this on the user interface side? I want to highlight some of the fields (those that have a value differing from a global template) with a star * symbol using CSS and background-image. Precisely. In fact, it's still being used for this purpose today because HTTP as we know it today is still, at least fundamentally, a stateless protocol. Unfortunately, this is not possible. Per the spec: The following steps within section 8.2.4 lead to this conclusion, which Chrome appears to be following to the letter: In other words, for string values this means the value is always treated literally. It is never interpreted as markup, regardless of the document language in use. "!" (U+0021) Switch to the markup declaration open state. you don't have to worry about CSS validation either, as CSS doesn't care about non-namespaced attribute names as long as they don't break the selector syntax. 1 In quirks mode for all browsers, classes and IDs are case-insensitive. This means case-mismatching selectors will always match. This behavior is consistent across all browsers for legacy reasons, and is mentioned in this article. This is because the case-sensitivity of selectors is dependent on what the document language says: As of HTML5, the foreground colors of hyperlinks, among other things, are on track for standardization in the form of guidelines for expected default rendering behavior. In particular, taken from the section Phrasing content, the recommended default colors for unvisited and visited hyperlinks are the following: