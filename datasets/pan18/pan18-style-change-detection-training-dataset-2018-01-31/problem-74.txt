After a while, the manager who started the experiment will become more popular and successful inside the organisation and the members of her network will come by and ask for the recipe. They'll find out that the popularity and the success weren't achieved with control, but with empowerment. Some of them will try it out some of them will never. The network is very important. I knew company where the change manager wasn't really popular and nobody really cared what he was doing, but right after having a different guy in position with better connections, things started to happen. You have historical data about your team The only tool you have in Scrum to help this situation is your velocity. I believe you know your velocity - how many story points you do in a sprint -, check the product backlog and do planning on each user story. Using these two, you'll have an estimation on a possible delivery date. Most of the managers I had the pleasure to work with never believed in organisational changes which came from their developers. They only considered ideas from top or from a trusted member of their network. So the first step is to find the right person with a middle sized network inside the organisation. After you find her, do a small Agile experiment and when it is successful make it visible to others and to the executives and keep going. Alternative one, you can check your historical data and see how long did it take to deliver a similar app, check the risks you see and provide an estimation using this. Maybe after a couple of sessions she will start to feel how good these conversations are and how much extra work you save for the organisation with a quick session. Of course, you'll need to prepare for these sessions. They may feel an unnecessary pressure on themselves in order to keep the commitments, even if it is not possible to finish the task in a day. This may lead to burnout. Additionally, team members may pick only those tasks that are easy to do in a day and won't pick hard tasks so that they can keep their commitments. If you feel that your team is slow or does not keep promises, find the root cause; mentor them to be better at estimation, task breakdown, or even at retrospectives. A very strict daily reporting will show some results in the short term, but nothing good in the long term. The funny thing is that developers talk to each other and will learn that there are projects where they can make a difference, be better at what they are doing etc so they'll ask for a transfer and the managers who still want to use control as a management tool they'll have less manpower in quantity and quality. If you have a product owner (PO), he/she should negotiate the deliveries with the customer based on your progress and delivered user stories. The PO should figure out which user stories are must for your customer to start his business. It is a subset of the whole product backlog, and therefore the formula above should provide a better estimate, because the uncertainty is lower than for the whole backlog. You do not have historical data about your team In case you don't know the velocity and has no historical data, you can try to talk to your customer and figure out which are the most crucial features. Sit down with your team and estimate the project in the old fashioned way. In case the PM has no time to do it, you can do it on your own and ask for a weekly review session preferably before the sprint planning. During these sessions you can clarify all the points you have to have a successful and accepted delivery. Remember, the point is to have the conversation not writing the actual tests, because anybody can write acceptance criteria, but only the "customer" has an idea what she wants. From the process point of view there is nothing wrong with it, because this is the closest thing you have for tracking. However, it may harm the team members on the personal level, and can easily lead to micro management. In the mean time, you can try to show the benefits of continuous delivery to your customer. Frequent talking and continuous delivery is the key to Agile, I recommend to start with them + the initial estimate. If you customer understands them and the benefits - frequent deliveries are very helpful when one schedules upstream projects -, it is going to be a win-win.