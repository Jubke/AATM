Insufficient acceptance criteria I prefer a physical board for several reasons: Effort is usually used in context of estimating how long things will take to do. A feature that requires a lot of effort will consume more of your teams capacity. That all being said, my team is co-located. In a distributed environment, I'd be using a virtual board (as well as kicking and screaming to get my team co-located!). This enabled us to bring the work in sooner, allowing us to better plan when we needed to start design work in order to ensure it was signed off in time to work on the story. This has worked OK but it does cause some issues with velocity and estimation (see Lunivore's answer) and I was never keen on having dependent stories in the backlog (design is valueless without the dev, dev cant be done without the design). Remember, the purpose of estimation isn't precision. You'll go too big sometimes and too small on other occasions, it all evens out over time. Finally, you might want to see how amenable the committee would be to changing the process slightly. We now ask the people who sign off budget for work to tell us, based on the expected benefits of the work, what the maximum they would be willing to invest would be. You've now got a pretty good map of how the work flows through the system and hopefully some data on where the biggest queues are. I'd start by looking at the largest few queues and seeing what impact that queue is having on the team at the queue and the upstream and downstream areas. It creates a focal point for standups. Here is the output of similar sessions my team did a while ago: After that, you can choose what is more important. If having the most up to date widget information on the site is critical, play a story to automate the data import. If the widgets don't change that often, it might be preferable to play a story to add one of the additional media types (again with a one off manual import). This works where the customer facing teams don't need the whole of infrastructure work but will just consume parts of it. To use the example Daniel gives in his answer: This lets you get an up front cost estimate and makes it really clear to all involved what (foreseeable) things will affect that cost without going to the level of creating all your stories up front or having to convert from points to hours. All teams now have a clear understanding of the interfaces between systems and can work under those assumptions. The key with this approach is communicating if agreed dates won't be hit or if any team needs to change the interface for any reason. Design is part of our definition of ready Another point of knowledge transfer is 'Scrum of Scrums' which a member of each team attends once a week. The intent is to keep other teams appraised of who is working on what to avoid conflicts/dependencies. It's not as effective as it perhaps should be, something we need to look at.