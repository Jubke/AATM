If second case is more correct, are there some models, that not related with life circle of software? For example, can we name "agile" model and "non-agile" model? Or "agile" it is not a model, it is just family of methodologies? Looks like I'm confused again :-/ I am interesting about four Scrum events (Daily Scrum, Sprint Planning, Sprint Review, Sprint Retrospective) and Product Backlog refinement activity (which have no time-box, but have limit of Team capacity). Filter requirements and create scope. So, you can't use iterative and non-iterative approaches at the same time. Decompose "nouns" to "verbs" (work needs to be done to implement "nouns"). Finally, quote from Scrum Primer: Of course you may! Scrum doesn't prescribe what concrete representation of requirements you should use. There is no such term as "user story" in Scrum Guide at all. Scrum Guide operate "Product Backlog Item" instead. I suggested they do following: Story Points are good for high level planning. Looks like that your process adheres agile approach. But there are too many details, that you didn't describe. That one of the reasons, why Product Owner should present on iteration/Sprint planning: datailed of story implementation may affect his decisions about prioritization. I know, that this is investigation activity for unknown and unestimated tasks. But I want know more details. Estimate "verbs" considering risks. Hours are good for low level planning. Main reason, why User Story is used: it is more customer oriented. If you still have a problem with understanding the term "Lead Time", please leave a comment, I will try to clarify it. Scope and importance are set by the product owner. Estimate is set by the team. During a sprint planning meeting, these three variables are finetuned continuously through face-to-face dialog between the team and the product owner. Update: There are several methodologies that are neither a classical waterfall nor agile (RUP or Spiral model, for example). They can take something from both approaches, but they are neither the one nor the other. P.S. If this is the correct definition of ScrumBut (ScrumButs and Modifying Scrum) then I didn't see anything wrong with this. I had the same problem. And do you know how I solved it? I bought all needed software for own money. Of course, it's not the best solution, but for me it was much more easily, than to get all required approvements and permissions. 30$ is not a huge sum of money for comfortable work (with Jira, Jira Agile and Stash). It's not an advertisement ;-) Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale. I understand, that accurate estimates demand more effort and don’t believe in “miracle” high quality estimation without effort. But maybe you can suggest to me other ways (or some tips) on how to make Release Planning more accurate without having complicated heavy waterfall-style planning? So, that's why we estimate the Product Backlog Items in Story Points and Tasks (on which we decompose BPIs) in hours. Maybe there is not any negotive connotation for this term and the word acquired a negative color only inside my quite wide, but still the local community (In the Russian language translation of ScrumBut "СкрамНо" sounds very similar to the Russian translation of the English "s-word". But on the other hand sametimes I have seen ScrumBut with an additional "t" on the end, which reinforces the negative connotation too). Ok. You have an one week iterations. This principle passed =) And now answer to your question: Let's take a look at Agile Manifesto: Going back to the planning list: in Scrum we implicitly did 1-3 steps during initial Release Planning and steps 4-6 during each Sprint Planning. I suggested to do all these steps during Release Planning explicitly. This is a good article (by Craig Larman and Ahmad Fahmy) which describe this problem in real-life situation. Iteration/Sprint Planning is always compromise between what Product Owner wants and what Development Team really may do in this time period. I have always heard this word in a negative context. But I don't understand why? I don't see anything bad in deviating from the Scrum. Why not, if it works? Well used ScrumBan is ScrumBut too. Or even if this deviation is not very good, but dictated by unavoidable external factors (such as company policy, or the terms of a contract already signed), why not take benefits from other aspects of Scrum that can be implemented? Ok. You have consultation with customer after each iterations. It is not "daily", of course, but by my opinion, it's enough. Passed. Sorry, if I'll echo Joel, but: tools are not those things, that you need to worry about. We use Hours during Sprint Planning. DevOps: unlike XP, I have not many experience with DevOps. But in my understanding, the main idea of this methodology is: "Programmers and admins should not to be enemies. Coding and deployment should not to be separated activities. Instead, these activities should be closely integrated with each other"