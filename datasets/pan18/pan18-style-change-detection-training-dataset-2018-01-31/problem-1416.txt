"Negative Character Count" Solution Other solutions allow the user to enter all they want. The character counter will go from positive to negative. The problem with these counters is lack of enforcement: They allow users to submit the form even with a negative character count. And this is how the spec defines "cross size property": In most cases you may be able to escape characters in contexts where they have restrictions or special meaning. More details here: https://developer.mozilla.org/en-US/docs/Tools/Page_Inspector/How_to/Examine_grid_layouts CSS Grid with item dimensions defined For layouts where the width and height of content items are known, here's a horizontally-flowing masonry layout in pure CSS: All my PHP include files are in a single directory: This seems to be an issue related to the way Firefox caches data and handles POST requests. The classes that an HTML element has assigned to it consists of all the classes returned when the value of the class attribute is split on spaces. (Duplicates are ignored.) UPDATE (based on comments posted) (NOTE: I'm not asking about the pros and cons of using custom elements. I just want to know what CSS does by default.) I recently read this article about creating a pure CSS modal box: The reason the alignment is off on row four is because it has only one 10px margin. must be unique in the document must not contain any space characters must contain at least one character Similar rules apply to classes (except for the uniqueness, of course). In CSS, identifiers (including element names, classes, and IDs in selectors) can contain only the characters [a-zA-Z0-9] and ISO 10646 characters U+00A0 and higher, plus the hyphen (-) and the underscore (_); they cannot start with a digit, two hyphens, or a hyphen followed by a digit. How to Build a Site that Works Like Pinterest Flex items flow vertically, not horizontally (like you need in this case). The container expands horizontally, not vertically (like the Pinterest layout). It requires the container to have a fixed height, so the items know where to wrap. As of this writing, it has a deficiency in all major browsers where the container doesn't expand to accommodate additional columns. As a result, a column-direction container is not an option in this case, and in many other cases. However, there is an easy workaround in this case: This doesn't happen in other browsers. Varying behavior among major browsers. Firefox, Chrome, Safari, Edge and IE11 don't always render images as flex items in the same way. Read this post for more details: Unlike Box A, Box B refuses to stay on the first line and just hide. It's clear that the "close" text doesn't matter. The text could be anything and the function works. But if "#" is removed, the styling fails, but the window still closes. Ellipsis for Multiline Text Because CSS has no property for ellipsis on multiline text, various workarounds have been created. Several of these methods can be found here: The web pages use an XHTML doctype: However, when both scripts appear together on the page, nothing works properly. There is one part of the code I haven't fully grasped. I've been working on adding a character counter to a TEXTAREA field. There are many, many solutions available online for this task. A true grid system is two-dimensional, meaning it can align items along horizontal AND vertical lines. Content items can span across rows and columns simultaneously, which flex items cannot do. I have two small scripts that, when working alone, have no problems. However, when appearing together in the same document, they fail to work properly. According to the bank, the site works perfectly well as-is. So apparently the browsers don't seem to care (although the pages are validating with lots of errors).