Another way to achieve what you want : Another approach I'm considering is to perform the reads and the writes in separate threads. This way I have a much better chance of getting the error messages from Apple (before the connection is closed) without compromising the speed in which I send messages to Apple. This approach is more complicated programmatically, and since my server is expected to send APNs to multiple iOS applications, each requiring its own socket and reader/writer threads, this will increase the number of threads I need by a factor of two. The approach I've seen in the source of JavaPNs to handle this is to read responses from Apple immediately after each message (or group of messages) are sent. The reading from the socket if performed frequently, and waits for a timeout in case there is nothing to read. This is acceptable if you send push notifications infrequently. Did you set up the Google Play Services SDK? Also note that this version of reduce processes a stream of Ts and returns a T, so you can't use it to reduce a stream of String to an int. This is taken from that section : I have to follow some strict indentation rules of Java code. All members defined in your classes have default values, even if you don't initialize them explicitly, so they do use memory. Is there a way to do this in Eclipse with some keyboard shortcuts (or some other way)? I checked all the available code style rules and couldn't find anything to help me. In many cases I have to jump to the 26th or 28th column of the current row. The characters between my original location and the 26th/28th column should be space characters (not TABs). The second phase (ยง15.12.2.3) performs overload resolution while allowing boxing and unboxing, but still precludes the use of variable arity method invocation. If no applicable method is found during this phase then processing continues to the third phase. This ensures that a method is never chosen through variable arity method invocation if it is applicable through fixed arity method invocation. If it is, read everything available from the stream. If you get zero bytes back, the connection was closed because of an error such as an invalid command byte or other parsing error. If you get six bytes back, that's an error response that you can check for the response code and the ID of the notification that caused the error. You'll need to send every notification following that one again.