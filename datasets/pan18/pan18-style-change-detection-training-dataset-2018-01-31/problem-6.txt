Outline how Scrum delivers value through the framework and the steps you would like to take to resurrect the delivery of the project. Lastly, consider letting one of the developers go. It does the following If your developer is split across multiple projects (let's assume all are Scrum) then they will be attending multiple stand-ups, sprint planning, retrospectives and reviews. That is not an efficient use of the time and it's unlikely the ceremonies will be in synch, they may even overlap forcing the developer to miss critical project context I know some in the community will respond with anger at my strict siding with the Product Owner but in my opinion it is absurd to think that the Developers are allowed to decide when to take work, what constitutes completion of that work and then force that work into the done column regardless of the Product Owner expectations. Should the developer leave or go absent you have now crippled two teams, rather than one. The risk is not shared; it is doubled. Especially with no cross-skilling. Good luck, even raising this issue in PM.SE indicates you have some excellent qualities to fix the issue. Producing a game does not fit well within that framework and certainly not within arbitrary timeboxes. The entire process has complex inter-dependencies between product, operations and technical activities including, but not exclusive to, direct customer feedback. Narratives need decided before level design can be implemented. Level design is required before AI and environment specific variables. In the longer term you could invest time in It is more akin to producing a movie which cannot be accomplished in a Scrum manner. Never forget that Agile does not mean don't plan, plans are crucial, it simply means respond to change on a regular basis due to empirical information. Scrum timeboxes allow us to do that but metrics and working software are two sides of the same coin that allow us to demonstrate confidence to the people ultimately paying the team's salary. With his/her time split across multiple teams it is unlikely that either team will be able to give honest feedback to the developer and the very real risk is that both teams feel unsupported and the developer is provided with negative feedback which is reflected in performance related appraisals, bonuses etc. The WIP limits of the teams are impaired because stories are blocked by a single developer and the time they can devote back to original team to progress a story. Without being dedicated to a single Scrum it is unlikely the developer will have the time to cross-skill into new technologies and conversely, will have almost no time to be able to cross-skill or pair program with anyone else to coach them into a cross-skilled state The aim is a cross-functional team as much as possible but a COBOL developer does not magically become a Jenkins expert and a QA Tester does not instantly become a Java developer etc. We have to be sensible. The key is to use the managers effectively as the next level of blockage removal. Only you can answer that and to help you it is worth mapping where your team sits within the organisation. As a Scrum Master you should spend time with the Developer and probe their motivations. Are they opposed to learning new skills? Do they feel uncomfortable? Does the organisation and the project allow punish failure? Do they feel pressured to work on new tasks? Do they have a line manager they report to discouraging a new skillset? Are they incentivised by user story completion? Once you have a healthy and well understood backlog, with some detailed stories and a simple categorization system for Themes and Epics you will be in a great position to understand how many development teams you need and how they should be structured. Always remember that doing Scrum is not the thing. Scrum is the thing that gets you to the thing. It is a framework designed to help you deliver software, it is not an end in itself. Unless you work for Scrum.