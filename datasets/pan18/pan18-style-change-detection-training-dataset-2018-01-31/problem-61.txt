Alternately, you could bake it into your Definition of Done (see this answer). Note that the DoD is not a user story, task, nor epic in and of itself - it is a part of the acceptance criteria for stories. If your DoD contains sufficient security as a requirement, and you have a story that doesn't yet have that security, then the story cannot be considered as 'Done' (and thus burned down) until it meets the DoD requirements. Documentation From the Agile Manifesto: 

This means, essentially, two things. First, that documentation is important (more on that below). Second, that working software is more important. Of course, that's only for Stories (requirements that provide direct value to the customer). Tasks are the domain of the developers', as they're often the only ones to understand them. 

There are various ways to accomplish this - code review, pair programming, better hiring, training and culture to obtain/raise/retain better programmers, technological assistance (such as a StyleCop of some kind). 

The second option is to allow anyone to add Stories, but to have the Product Owner (or equivalent) vet them. 

Code-first Regarding the code-first approach (versus a database-first approach, or an approach where both are designed separately and then connected somehow), that is a completely separate Question that is out of scope of PMSE. Suffice it to say, there are, at the least, many people who consider it to be a valid approach. Lots to parse here. TLDR; Focus on what's important (maintainable code), rather than jumping to an assumed/unverified root cause (lack of documentation). 

I've never been fond of the 'all-in-one' approach. What if, a year later, that small change is found to somehow have major ramifications? You trace the code back to the Story and... it's clumped together with a bunch of others. This isn't to say that developers should never be contacted by users. Face-to-face is among the best ways to gather feedback. However, nothing should ever be worked on until the work has been made visible and prioritized (the latter of which only the Product Owner is authorized to do). There's not really anything outsiders can do to get around "I am not allowed to do that." Eventually, your users will simply stop attempting to bring requests directly to the developers, and will bring them through the Product Owner instead. First, a possible answer is 'The Product Owner' (or someone/someones with the same responsibilities). Namely, someone who knows the customer's requirements. With HTTPS then being an implementation detail of that story. After all, if you found some other means of completing the requirement (such as not getting any personal information in the first place), then HTTPS would become irrelevant. TLDR Don't multi-task. If that is not possible, use JIRA features to both combine the boards and keep them separate. Just keep in mind that the user shouldn't really care whether the web page is secure. They care that their data is no compromised. You could have a (potentially very large) user story for everything necessary to secure is secured. (depending on how large it is, it might invalidate INVEST, though.)