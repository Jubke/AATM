Using Celery 2.0.2 and djcelery, I found `inspect' in the documentation. I tried: I think I should say that this method is called inside a Django model method itself. I don't know if it's relevant, but here is the code: Generally, choose one method that works for something and stick to it. Don't show alternative ways. E.g: Obfuscation is really hard Even compiled programs can be reverse-engineered so don't think that you can fully protect any code. You can analyze obfuscated PHP, break the flash encryption key, etc. Newer versions of Windows are cracked every time. If you want something you can't see through, look for another tool. This is not a bad thing, it is important that several different tools exist for different usages. For all the rest of the backend work Django doesn't help with, you just use regular Python. Business logic is a pretty broad term. You best bet is to install both version manually, by putting them in your Python path with a different name. I'd rather ditch one of the two libs and replace it with an equivalent, or patch it to accept the new version of the dependency and give the patch back to the community. These tools are great but there are still no best practices attached to their usage, so I don't know what is the most efficient way to use them. I also discover I didn't understand jack about it, nor did I know what I could do with it. This problem is getter more and more mitigated. With Numpy, Pypy and asyncio, most performance problems are not covered, and only very specific use cases are a bottleneck in Python anymore. By the way, I tested that in a shell, so some errors likely remain. Strange, because otherwise everything works. - Python is not hype. Unlike Ruby, there is no "cool wave" around Python, and it's still much harder to find a experienced Python coder, than, let's say, a Java or a PHP pro. The number of terms is high (about 100000), so the process is pretty slow, but this is Ok since it is performed as a cron job. However, it causes the script memory consumtion to skyrocket and I can't find why: