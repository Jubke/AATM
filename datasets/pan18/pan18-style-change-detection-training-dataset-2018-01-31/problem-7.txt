First up, velocity calculations. Velocity is not a part of Scrum. The Scrum Guide makes no mention of the word "velocity" at all. Velocity is a common measurement, but you can still compute it with hours. Velocity is simply the amount of work completed in a specific amount of time. Often, this is Story Points per Sprint, but it doesn't have to be. It could be "hours of value added effort per Sprint" just as easily. If you are estimating Backlog Items in hours and know how many hours are in a Sprint (number of people * number of working days * working hours per day), you can divide "task hours" by "total hours in a Sprint" to get your velocity. In a perfect world, every working hour will be spent on value-added work. But that's not always true, so your velocity can be a predictor of how much time your team spends working on Backlog Items. 

So, now, you have an unfinished story. That means you didn't get any points for it in the iteration that just finished. Assuming the priority of the story hasn't changed, it gets moved into the next iteration. Since your velocity for the previous iteration was lower, you now take fewer points into the next iteration. If your velocity for the previous iteration was X and the unfinished story was worth Y points, move the next (X-Y) points into the current iteration. 

The purpose of the Scrum Master is to enable the team to perform at its highest levels by managing the process. The common tasks associated with this role include working with the Product Owner to ensure that the backlog is properly filled with appropriately written user stories, to ensure that the team doesn't overload with too many story points or underload with too few story points for a sprint (balancing workload with projected value added), guiding the retrospective and planning meetings, and generally resolving any roadblocks that arise during the project to make sure that the team can move forward. 

Other tasks would vary, and depend on the team, the project, the schedule, and the workload of the individual. You need to make sure that he can actually accomplish his tasks in the course of a normal week, as working overtime is generally seen as an antipattern in the agile community. 

Finally, burn down. If you're measuring in estimated hours and are tracking hours left in the Sprint, you can still have a good idea of burn down and look at it every Daily Scrum or make it visible in your tooling. Regardless of what your estimation units are, you should be at 0 at the end of your Sprint. Burn down is just a graphical representation of how you are completing your work in your Timebox. 

According to the Scrum Guide, the Daily Scrum is a meeting for the Development Team. It also says that it is the duty of the Scrum Master to teach the team about effective ways to hold a Daily Scrum, including teaching (and enforcing) the idea that any attendees from outside the Development Team do not disrupt the meeting. 

What this is suggesting is that you look at all factors of the sprint to find things that are going well (so that you can continue to do them or do them on other projects) and to find things that aren't going well (so you can correct them), even if that means looking beyond a single unit. 

In my experiences, the quality assurance staff typically handles system and acceptance testing, so I think that this would be a good place to start. This includes both manual and automated tests of the system against the requirements (functional and non-functional). Given how you describe the background of the individual, it sounds like this is an appropriate set of responsibilities for him. Because of this, yes, he would be the person who decides if and when an implemented requirement is done. 

Find out if the Development Team considers this an impediment. Also make sure that the purpose of the Daily Scrum is being fulfilled. If the Daily Scrum is ineffective, find solutions to make it effective again. 

Second up, backlog grooming. In the Scrum Guide, this is now called "refinement" or "Product Backlog Refinement". It is simply the act of adding details, estimates, and order to the Product Backlog. The units that you use for estimation have no bearing on the act of Refinement. After Refinement, you should have Product Backlog Items that are sufficiently detailed for the Development Team to work on with an estimate attached to them and properly ordered based on the current understanding so they can be pulled into a Sprint.