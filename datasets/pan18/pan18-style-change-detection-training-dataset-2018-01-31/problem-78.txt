Another thing from Scrum that will probably help you is a product owner. The product owner has final say on what does and doesn't get worked. Your stakeholder might be the source of the ideas, but having the product owner control the backlog of work will put someone in the middle to ask questions like "what does this actually get us?", "why is it needed?", and "can this afford to wait?" One of the approaches I've used in the past that works pretty well, especially with multiple teams: And of course, this is a living artifact, so this is just to get you started. They are genuinely useful, but there are a few factors that can really skew them to be wary of. The bottom section is for items that they would like to do but can't commit to each sprint. I often see things like full regression test runs and deploy to production down there. This is important because it gets these limitations out in the open. It creates opportunities for the team and organization to improve in the future and calls out the technical debt and risk that is building with each backlog item that doesn't do those things. How do you measure value and learning? Scrum puts a lot of emphasis on driving out risk through learning and creating value. Even if you were to measure on the team level, how will you compare the amount one team learned against another? In short, what is performance? So, theoretically PBI can be any kind of requirement representation. We use Story Points during Product Backlog Refinement. Scrum has strict limitations of events in time. It is hard to stay in the events time-boxes that Scrum Guide prescribes. What Scrum Master should do to avoid situation when Scrum Team didn't reach a goal of event in time? For example: there are two stories with highest priority, A and B. Forecasted capacity for next sprint is enough only for one of them. Story A have 0.9 abstract business value point, Story B have 1.0 abstract business value point. But there is a dependency between A and B stories, and if Team will implement A first, time for B implementation will reduce twice. In that case Product Owner can make A more prior than B, to maximizing the value work of the Development Team. Points stories is not for exact measurement, story point is for relative measurement. While we using Story Points, we can talk that this Story is bigger or harder than another Story, but we can't be sure how much exact time we will implement it. For example: Waterfall model, Iterative model or Spiral model. Waterfall is non-iterative approach by it definition: But priority based not only by business value. In Scrum Guide is written follow: Ok, you said, that customer can change unfinished features, but can he change requirements to functionality, that you are already implemented?