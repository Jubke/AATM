Alternately, you could bake it into your Definition of Done (see this answer). Note that the DoD is not a user story, task, nor epic in and of itself - it is a part of the acceptance criteria for stories. If your DoD contains sufficient security as a requirement, and you have a story that doesn't yet have that security, then the story cannot be considered as 'Done' (and thus burned down) until it meets the DoD requirements. So, to summarize, make sure you're measuring and striving for the right things. Meeting all your user stories every Sprint is a nice metric, but it should not be your main goal. That should always be to bring value to your customers. Now, to answer your actual question, With HTTPS then being an implementation detail of that story. After all, if you found some other means of completing the requirement (such as not getting any personal information in the first place), then HTTPS would become irrelevant. Did you complete your Sprint's stories? Yes. Did you provide value to your customer? No. You could also append something like "even from a malicious attacker", which should make it more testable (see INVEST mnemonic) - make sure all common attacks (other than social engineering, which isn't really solvable...) fail. When a user attempts to contact a developer directly, simply instruct the developer to say "Thank you for bringing this to us. However, as per company procedure, I am not allowed to work on anything without it going through the Product Owner first. Please contact at [email/phone] with this issue if you wish it to be worked on." This, I think, is the crux of your problem. Look into (and have your Development Manager look into) the 100% Utilization Fallacy. One final thing, you might want to look into how you're defining User Stories. A commonly-used format is "As (identity), I would like to (action) in order to (reason)." See the INVEST mnemonic for more details. The answer depends on whether or not you are actually doing Scrum. If you are, then the answer is during the Sprint Planning Meeting (or, as some Teams do, during the Pre-Planning Meeting). Scrum works better as a pull-model, not as a push-model. No one assigns work to developers. In the Planning Meeting, the Scrum Team accepts work from the backlog (with the Product Owner prioritizing which work is most important, and the Development Team deciding how much they can get done that Sprint). During the Sprint, developers will, on their own initiative, pull down unassigned work and start working on it. Just keep in mind that the user shouldn't really care whether the web page is secure. They care that their data is no compromised. You could have a (potentially very large) user story for everything necessary to secure is secured. (depending on how large it is, it might invalidate INVEST, though.) The majority of the team rate themselve as doing poor in term of synergy and collaboration. They think it's their main weakness and think they should take actions on that. I've just finished running a retrospective of a team I doesn't manage usually (they don't have a dedicated ScrumMaster), and it appears that there is a conflict of opinions in the team (which is relativelly small in members). But from my experience business executives are often really tied to management executives. So it's a 2 versus 1 situation where Scrum teams often stay undercover as you described. You might want to look closely at your situation if you're not mistaking the business resistance with what's really behind: management resistance. Possibles suggestions includes: provide training, promotion, create dissatisfaction with the status quo, creating the sense of urgency, addressing individual fears, let time run its course, fire the saboteurs, praise the right behaviour, involve people, etc, etc... It's obvious to me that the synergy of this team is indeed bad, and this case is an obvious example. So I'd like to address that without hurting the feelings of anyone. But during the retro I couldn't come up with a quick and elegant solution.