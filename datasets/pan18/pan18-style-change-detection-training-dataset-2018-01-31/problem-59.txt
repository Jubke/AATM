Most trainers have never failed anyone on a CSM course, and not all CST (Certified Scrum Trainers) are good at getting useful learning across. For this reason, I don't put much faith myself in the certificates. The new school of thought treats software not as a Lean production line, but as Lean product development - in that it's more like designing new cars than building the same car over and over again. For actual Lean Software Development, I recommend David Anderson's Kanban and Jurgen Appelo's Management 3.0. I disagree with Kyle. It's sometimes about users, but often about stakeholders whose goals need to be met for the users to get anything. Internal projects are almost always about delivering benefit to other users and stakeholders. I've been calling them "Stakeholder Stories" for a while (even though they're not stories) and have found that this term helps teams recognize who the real stakeholders are. They usually end up just referring to them as "stories", which is fine by me. I therefore recommend that a story should be a slice of a feature created in order to either get feedback or gain trust, with the focus on the stakeholder who cares. I like the Feature Injection template: David Anderson's Kanban method, which @Pawel mentions, derives more from the new school of thought than the old. He gives the following guidelines: I don't have all the information, but I reckon there's your root cause, right there. A lot of the skills I've picked up as a Lean / Agile coach seem to be relevant to project management, and I've started getting offers of PM work from agencies. Since I coach PMs, I feel like I ought to have a go at actually managing a project at some point. In a company, they are transitioning from agile to scrum. They have hired a very skilled scrum master to facilitate change, they have an up to speed product owner, a development manager who is up to speed with scrum, and the business supports the change. Also in this company, there is a test manager who has his own test team of four testers. EDIT: So, as an amusing update to this, the CTO of the company has left... and the same amount of hands on people The scrum master disagrees with this tactic, saying that the testers are developers, and they are members of the scrum team, wanting to scrap the "test team". He believes that each member of the team should be able to test as well as develop, but the test manager disagrees, believing that his testers are specialized in what they do, and that testing before production is a vital job that he cannot leave it to chance, or to people who don't know the testing process. There is no silver bullet. Make sure you're solving for X, rather than Y! It should be clearly evident on a day-to-day basis whether user stories and tasks are progressing or blocked. If the volume of daily work-in-progress is such that detailed formal tracking becomes necessary, that is generally a "project smell" that indicates a process problem with the team's Scrum implementation. Coordination/Collaboration, Not Formal Task-Tracking While the Scrum Guide used to refer to the stand-up as a commitment meeting, it currently says: You Must Address Resource Constraints. In all cases, you can't really do what you seem to be trying to do, which is spread the peanut butter ever thinner without adjusting your resource constraints. Specifically: TL; DR Story points represent consensus within the team. The goal of estimating story points is not to provide the largest or smallest estimate, but to accurately reflect the effort required by the entire team to meet the "definition of done."