Concentrate on your accountability The core issue is to whom you are accountable and for what. Fortunately, that is relatively straightforward. You are accountable to the project stakeholders. The PM (should have) signed the project charter; in doing so, you committed yourself to deliver a specific scope at a specific time for a specific budget. You can't help doing the work because the rest of your team is not motivated to do the work. There are many things you can do from a leadership perspective, but from a project management perspective, you just adjust the schedule, cost and quality based on observed behavior. (This is a situation in which I find myself frequently). "You agreed to do X by date Y, but you're only 50% done, which means that X will not complete until Z; that will delay the completion date for entire project until date W." If everyone is comfortable with W, then fine. But if W creeps forward until W is long after graduation date, then that discussion may lead your team to either change behavior or close the project. Build a smaller group. My girlfriend had a similar problem in her grad courses; she went to the regular group and worked with them, but she then scheduled a smaller group meeting with the people who were willing to work. The core team knocked things out because they were working with one another. Harsh, but sometimes the only realistic solution. Make sure you include all elements of your Definition of Done in your definition of work. Assume a baseline of 4-6 hours of useful work per business day. Multiply by the number of team members. So, a five-person team has 60-90 ideal man-hours available in a three-week Sprint. You could just stop there, and let statistical variation iron itself out. 

Cutting scope within a Sprint is certainly possible, but: 

How to Change Scope and Sprint Goals in Scrum There is no such ceremony as "Sprint Replanning." It sounds like you've created a special ceremony for cutting scope from the current Sprint, but Scrum already supports this process within the standard framework. 

Ideal Hours Even if you choose to use ideal hours rather than story points, you would calculate a team capacity. For example: 

If the process is being bypassed because it's not working, then a retrospective or kaizen meeting may be in order. In all likelihood, though, it's simply a lack of rigor in following the system, rather than a failure of the system itself. Your mileage may vary. As an alternative, you can apply a fudge factor to adjust for known issues in a forthcoming Sprint. For example, you might: In Scrum, velocity or capacity for an individual is never calculated. Instead, you calculate the projected capacity of the entire team based on empirical measures of past performance, and expect minor variations in individual or iteration capacity to even out over time. The Product Owner must be involved. No changes in planned scope can be made without the involvement of the Product Owner. Changes to the Sprint Goal may only be made with the full agreement of the Product Owner. The Sprint Goal represents a planned increment of value, so the Development Team can't change the Sprint Goal unilaterally. A change in the Sprint Goal should trigger an Early Termination by the Product Owner and a return to Sprint Planning. If the central goal of a Sprint is invalidated for some reason, it needs to be scrapped and re-planned by the entire Scrum Team (including the Product Owner) after a brief Sprint Retrospective to identify what went wrong. In short, the Development Team may not cut scope or change goals without the active participation of the Product Owner. Doing so undermines the core responsibilities of the Product Owner role, and removes essential project controls from the framework. Solving Your X/Y Problem It seems likely that your real problem isn't a lack of precision estimation, but rather than you are treating team members as individual resources and striving to optimize for utilization rather than throughput. While you didn't explicitly say so, the way your question is phrased at least implies that tasks are being assigned to individuals, rather than collectively owned by the team, and therefore the absence or reduced capacity of any member of the team can create bottlenecks or expose dependencies within your delivery pipeline.