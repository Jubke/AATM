I'm trying to get a snapshot of another controller's view to use in an animation. I'm using the following code, but I see nothing but the background color of that view, and none of its subviews (two buttons, a text view, and a label): 

The short dashed constraint (orangeToRedCon is the outlet) has a priority of 999 (you can't change a required priority to a non-required, so that's why it's not 1000). The long dashed constraint (yellowToRedCon) has a priority of 500 and a constant of 20. In code, you can hide the orange view, and swap those priority levels, and that will cause the yellow view to move up to whatever value you've set for the constant value of yellowToRedCon. 

Here is the code, including the logs that show the size of one of the image views both before and after the constraints are applied, I've made a test app to familiarize myself with making a custom container view controller. If I rotate the device when the app first starts or after switching to a different view controller, the new view resizes to take up the whole screen, as I intended. However, if I rotate after the app starts, and then switch to a new view controller, the view keeps its portrait size instead of getting shorter and wider (actually it's slightly different -- it goes from 320,460 to 300,480). The master view controller is alloc init'd in the app delegate (no xib) and set as the window's root view controller. Here is the code I have in my MasterViewController (the custom container controller): Now I want to do this on my device. I can see my connected device listed in the Console app: [Actually, there's a second surprise here: applying a transform to a view triggers layout immediately. This seems to me be another bug. Or perhaps it's the heart of the first bug. What I would expect is to be able to get away with a transform at least until layout time, e.g. the device is rotated - just as I can get away with a frame animation until layout time. But in fact layout time is immediate, which seems just wrong.] I can't help regarding this as a bug. If I apply this transform to a view: For example, this simple "throb" view animation may well break under autolayout: 

I can skirt the issue by limiting the range of drawn glyphs to those that fit into the text container: And I can confirm this by looking at the build log: NOTE This bug is fixed in iOS 9, so the entire matter will be moot at that point. The discussion below applies only to the particular system and version of Swift to which it is explicitly geared. The white view is host view; you are supposed to pretend that it is transparent and hence invisible. The red view is its subview, positioned by pinning its center to the host view's center. Now we can scale and rotate the red view around its center without any problem, and indeed the illustration shows that we have done so: 

EDIT 2: In seed 4, we now have access controls! Plus, in one of my apps I have an embedded framework and sure enough, everything was hidden by default and I had to expose all the bits of the public API explicitly. This is a big improvement. 

Conclusion I'm looking for practical words of wisdom on this topic. I'm thinking someone may have devised some CGRect and CGPoint extension that will make life a lot easier. (Or possibly someone has written a boatload of additional arithmetic operator function overloads, such that combining CGFloat with Int or Double "just works" â€” if that's possible.) 

But it turns out I don't have to fix it! When I build, I can look into the package of the built app and I see that it has .nib files, not .xib files. The .xib files are not being copied into the resources folder, even though they are in the Copy Files build phase; they are being compiled, even though they are not in the Compile Sources build phase. But in renaming my .xib files and adding some new ones, I ended up in a situation where none of my .xib files are listed in the Compile Sources build phase. Instead, they are all listed in the Copy Files build phase. I was not able to fix this. (Don't get me started about that.) I'm trying to write a simple Quick Look Preview Extension for my UIDocument-based iOS app. 

The Ground of Being You are going to instantiate UITableViewController by hand (that is, by calling its initializer in code). And you want to subclass UITableViewController because you have instance properties you want to give it. Here's a simple implementation of how to use a picker as an input view: 

I'm trying to get a snapshot of another controller's view to use in an animation. I'm using the following code, but I see nothing but the background color of that view, and none of its subviews (two buttons, a text view, and a label): 

It works better if I add that line in updateViewConstraints, and relate the number to the view's bounds. This way it adjusts properly on rotation. The animator object is deallocated after each presentation and dismissal, so it's not at all clear why it should behave differently on subsequent runs. You can do this by adding an extra constraint between the yellow and red views of a lower priority, and adjusting the priorities in code. Specifically, the image views that hold the half images of the view don't respect the constraints they are given, and so are twice the size they should be (they're the size dictated by the retina image). This only happens on simulators with retina displays.