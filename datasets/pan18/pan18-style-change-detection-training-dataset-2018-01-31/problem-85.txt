Without getting into your specific processes, there are broadly two methods of modeling this on a Kanban board that teams use. It clearly highlights and visualizes the stories which are blocked due to defects being found in them. It specifically identifies and allows 'assignment' to 'failure-demand' - and enables analysis of this failure demand. It allows you to model a different workflow/ process for issues/ defect resolution if you wish, in a separate swim lane, which further helps the analysis of cycle time (resolution time), throughput and other metrics which might help you make SLA commitments to your customers. If your team is focused on implementing and following WIP limits, it puts pressure on developers to resolve and close open defects against their name since blocked items also occupy their WIP limit. You do have to make sure that developers follow the process of linking (associating) stories to their defects/ issues (which a Kanban software would usually enable fairly easily) and also to unblock the user story when the defect is closed, so that the developer's WIP limit opens up for doing additional work. As to how you might draw up your initial Kanban board, answers to my questions above would help - but you could easily start with either a simple Kanban board with a single swim lane for the entire company, with columns for each workflow step, between a common Backlog and Ready at the beginning (left of the board) and a Done/ Deployed/ Archive columns at the end on the right. You might use color coding of cards/ stickies to show work for different projects/ customers - and other stickers to be used on each card to show who is working on it, what type of work is it (user story or defect or change request or just a simple task) and other things such as a blocked status or other attributes of the card. Once you do that, you can define WIP limits for each lane separately. A common practice - depending on organization/ team size - is to limit WIP of the Expedite lane to just 1 - which communicates to your stakeholders and to the team itself, that you will not accept more than 1 urgent task at a time. Dennis Stevens has written a great blog post about it.