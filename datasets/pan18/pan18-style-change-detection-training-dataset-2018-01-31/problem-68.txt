Does anyone have any suggestions? 

Any ideas would be greatly appreciated. 

I have only been working with this team for 3 weeks Team member has said that I have a boring approach to coaching the team and that the previous coach was more fun Team member speaks up and criticizes every single initiative I present to the team Team member questions everything and flails between arguments. She doesn't fight one particular point or point of view, she fights for the sake of fighting. Team member is not a team player and is unwilling to work as a team, very arrogant and always tells the team that she is always right. Team member is not professional at all. Other team members from other team members are difficult, but they are at least professional. I would use an analogy for this team. Imagine a bunch of football players who were not interested in playing a game of football, they just wanted to kick the ball around. Now add me, their coach. I am at odds as I presume this is my job to sort this out. 

Some of the generating insight exercises require you too...gather data! Very confusing. Are people using both of these stages in retros? 

Gathering Data and Gathering insights, seem the same as I cannot imagine some of these exercises would work if you did both a gathering data and generating insight exercise. 

For example: I make the team brainstorm what went well, what did not go well in the data gathering stage, then do I simply set that aside and move onto a data insight exercise which also, in it self, requires the team to write a bunch of ideas down. 

A couple of weeks ago the stories seemed to be too big i.e. they were dragging along / staying on the board for weeks. 

I an an Agile Coach and Scrum Master for a development team. 

Can anyone recommend a format for facilitating a definition of done meeting ie, a meeting to define the teams definition of done. 

Does that make sense? Any thoughts? 

The PO has started to create more granular stories but now the opposite is occurring, there are too many code dependencies between different stories e.g. one dev pushes a story to done, another dev picks up the new story and its so tightly dependent that they both need to unpick the original code and or struggle to merge code. 

I am reading a book called Agile Retrospectives and the author suggests splitting retro's into 4 stages. Two of the stages seem so similar: 

I also wanted to add some thoughts on the actual Kanban board. A key concept of Kanban is visualizing your workflow. Your current board looks out of the box. Many Kanban teams will customize their Kanban flow to be more granular. For instance a team that has defined QA and Dev roles along with a UAT environment may have a flow that looks like Future>Defined>Developing>Testing>UAT>Production. Think and discuss with your team what their workflow looks like and make the board match it. In the long-run this will position you to focus on key Kanban concepts like cycle and or lead time as well as WIP limits. 

Your user stories should not be interdependent. As you describe above, you feel as if you would have to move all stories to in progress, if you started any specific one. This indicates that you have epics or stories that are not vertical slices of business value. I'd recommend looking at what you have and trying to re-write it in such a fashion that each story is independent, relatively small, and delivers a piece of value to your customers when completed. 

If you find yourself writing a story that starts with "As a developer..." stop and think about what value that provides to the customer. Try and write all your stories with a customer actor in mind. 

Creation of a backlog and user stories was definitely a good first step but... 

Kanban is a lot harder to follow than Scrum. Consider why you have chosen Kanban. Many teams use Kanban when they are unable to get a full iterations worth of backlogs defined because requirements change so rapidly.