I would focus on the need, rather than the implementation. The user story would then simply be: Not all teams will have all individuals able to perform all tasks. In general, once a column (or multiple related columns) have reached their WIP limit and someone wants to put more in, rather than just automatically shifting to something else, the person wanting to put more in should look at the board to identify the roadblock and attempt to help fix it. Just because there is 'room' somewhere on the board doesn't mean you can/should ignore that you have a roadblock. Just keep in mind that the user shouldn't really care whether the web page is secure. They care that their data is no compromised. You could have a (potentially very large) user story for everything necessary to secure is secured. (depending on how large it is, it might invalidate INVEST, though.) Kanban only works as a Pull system. Not as a Push system. You do NOT assign tasks to developers, nor unassign them from developers. Developers assign tasks to themselves. Removing Kanban's self-organizing team structure rips out a large part of the benefit of Kanban, and of Agile in general. Kanban Work In Progress (WIP) limits are for the Team. Likewise, teams should always try to work towards the right-most side of the board whenever possible. The idea is not to make sure everyone always has work to do (optimizing for utilization). The goal is to make sure issues reach 'Done' as soon as possible, or in other words, to reduce lead time (optimizing for flow). You could also append something like "even from a malicious attacker", which should make it more testable (see INVEST mnemonic) - make sure all common attacks (other than social engineering, which isn't really solvable...) fail. Alternately, you could bake it into your Definition of Done (see this answer). Note that the DoD is not a user story, task, nor epic in and of itself - it is a part of the acceptance criteria for stories. If your DoD contains sufficient security as a requirement, and you have a story that doesn't yet have that security, then the story cannot be considered as 'Done' (and thus burned down) until it meets the DoD requirements. That being said, to answer your question: what my team currently does is remove the assignee from issues that are 'done' (whether that's Dev Done or QA Done). This indicates that no one is currently working on that issue. If we, for whatever reason, need to find out who worked on an issue, then the system we use (JIRA) allows us to look at the issue's history and view who had previously been assigned to that issue. That being said, it doesn't really matter; as long as everyone understands what an assignee (or lack thereof) on a 'done' task means, and everyone consistently follows that, then there shouldn't be a problem. My suggestion: ask your Team, do what they prefer.