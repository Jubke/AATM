Scrum is about transparency and setting correct expectations. Stakeholders need to know when a particular piece of value will be delivered instead of how many hours of a developer were spent to complete a story. All the feedback items added to the backlog need to be estimated. Depending on the estimation, team may come to the conclusion that they may have to add one or more sprints to the project plan. If this is the case then it should be clearly communicated to the PO as early as possible because that will help the PO in properly prioritizing the backlog. For the issues you have encountered, new stories / technical debt tasks should be created and added to the sprint backlog (as per the team's velocity). These may cause some user stories (maybe feature requests) to be pushed into future sprints, which is fine as long as the stakeholders agree that paying off technical debt provides more value as opposed to feature requests. It is possible that a developer also acts as a product owner but I don't think that it is recommended. Here are my 2 main reasons: OK to have a 'less than ideal' DoD What to do if you find idle time I agree with the fact that sprint backlog should be completed some time before the sprint end date so that it can be tested and team can finalize a stable build after the required bugfixing etc. So developers may fix issues which were reported during testing within the current sprint. In case the team consistently performs well on the QA front and not many bugs come up then you may reduce this sprint end testing time and in future sprints the team may add more stories to the sprint backlog. In case of stories being carried over to future sprints, the Scrum team should not be held responsible for stories which were not part of the sprint backlog to begin with. Neither PO nor Scrum Master is responsible, but the team is supposed to conduct daily standups. As a Scrum Master its your job to facilitate the team and make sure that process is being followed. Coach them to make the standups effective as opposed to having just mechanical updates during the daily ritual. Make sure that a release sprint is not used to bucket all the remaining bugs and other stuff which should have been handled during regular sprints. In the words of Mike Cohn: Definition of Done (DoD) is for user stories Wont have items also need to be documented and assigned a status of closed, so that we dont loose sight of those and can be tracked. These items can be those feedback items which are not relevant to the product or are not cost effective to implement at this time.