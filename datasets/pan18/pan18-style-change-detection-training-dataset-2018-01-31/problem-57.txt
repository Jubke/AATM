We want all the team members to be in the Sprint review and retrospective meetings and want to plan them at the end of the sprint. (We record Sprint review sessions for part-timers already) 

Read more here: http://less.works/less/management/role_of_manager.html 

Then with a board you can do a daily scrum to understand what developers worked on yesterday and which iteration goals they are going to achieve today. Also read the 7 Mistakes during the daily scrum. Now it is possible that during the Sprint in such a design session the team notices that they under-estimated. Challenge the team to build only what is really necessary, apply the YAGNI principle and prevent over-engineering. If this happens often, inspect and adapt, maybe you need to take more time during the Sprint planning meeting. Discuss this in a retrospective and let the team decide how to experiment with improving this. 

Write and extend automated (unit) test-cases coverage Create spikes for upcoming features in the product backlog Improve API documentation Update 

Agile cycles do estimations for different reasons: 

Another possible solution for your problem is a branching strategy. Teams should be commited to delivering a highly valuable and high quality product, but not to estimations. If managers are too focused on commitments it shows they have no clue about sustainable software development. Slicing vertically should be an Agile teams main focus, delivering working software each iteration. The reason Scrum does not detail everything for you is that there is not a single truth for process in Software development. It is different per product, team, company or industry. What the Scrum framework does is to help you inspect and adapt to find your fit the quickest. Update 2 We have been running sprints from Wednesday till Wednesday now for a couple of iterations. I have the feeling everyone is pretty happy with it. The teams asked to plan all the meetings on Wednesday, our day looks like this: 

Now you can use the velocity metric for the whole team effort, including testing. An Agile team should have automation testing knowledge from the start, the team should be cross-functional. Personally I think a test in each layer of the test pyramid should be defined in the definition of done for each story (feature) that is done. In your-case you found improvements in the retrospective, but someone won't let you implement them. Sounds like a pure command-and-control situation. You should teach the organisation to embrance self-organising continuous improvement or maybe just stop trying to do Agile at all. Creating UI tests as an after thought will result in harder testable software. During development it is easy and cheap to change the UI a bit to make it testable from the start. Don't have testers struggle months after the development is done. 

TL;DR: Scrum doesn't provide for a lot of things, you need to figure out a way that works for your team and project. 

Make sure you write a couple of UI tests each iteration. This will make it easier to write end-2-end test for new functionality and defects in a later stage, certainly for defects that are hard to test in unit-tests. 

What I would propose it to signal a problem to the team, the situation you think could be solved with code-reviews. Now let the team find a solution to the problem. If they pick code-reviews great! If they don't, but they do another experiment, great! If they don't know and look at you for advice, give them some ideas they could try. Let them decide what to try. 9:15 Setup meeting room and screen-cast recorders, dial-in external stakeholders 9:30 Start review sessions per team Start evaluation meeting after a short break. Lunch Start planning sessions 17:00 Have a beer and snacks :) In the end it is just about getting the work done! :) 

From my perspective this should be management vision, they should communicate to these teams that this is what is expected from them. Keep in mind that automated testing adds extra effort in the short term, while being really agile and lean on the long run. Developers time will be spread around 33% requirements, 33% programming and 33% automated testing. This will slow the team down and this might be a issue if management is not in on this. I would use story points to estimate the relative size of the complexity of the task at hand. Read more about estimating with relative sizes in this blog. 

Some people are open to change, some would rather just see how it works out, but some just push back. My experience with the last group is that is just a waste of time to convince them. They will keep making stupid remarks about the process and Agile principles or ideas. Agile has proven itself over time now. I have no need for people pushing back in my teams. http://www.rhythmsystems.com/blog/bid/87071/fire-to-protect-your-core-values 

Make a physical board and visualize ALL the work, also extra work or private projects. Then if you want to know who is working on what attach an avatar to the card in progress. Now the team lead can walk to the board and check who is working on what. If you are distributed use something like Jira or Trello which also supports avatars.