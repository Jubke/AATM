Perspective First, and perhaps most important, is your perspective. From the tone of your Question, it appears to me as if you're not only unfamiliar with Scrum, but disparaging of it. If you come at a Scrum project with the mentality of "How can I work around this nasty Scrum thing?", then you will fail. Do not be overly concerned with what Scrum doesn't do, and instead focus on learning how Scrum is supposed to work. If a Development Team runs out of work during the sprint, then the Product Owner should be informed and either the sprint should be concluded early or more work should then be added to the sprint. This should, ideally, not be a very common occurrence. If a Development Team consistently under-estimates work for their sprints, then there are issues with their estimation process. A very vague question that I cannot answer, beyond what I have already provided above. You point out the lack of a Software Requirement Specification or Detailed Design. To me, this lack is a good thing. Expending too much effort into upfront design has two side-effects. Firstly, it puts more time and effort into design and documentation instead of writing code. Secondly, it locks the Team into a particular mindset, which in nearly all cases will either be wrong, will become wrong as requirements change, or both - thereby making the Team less able to respond to change and update their code. They will always, in the back of their minds, be trying to 'stick to the plan'. Both of these will harm the Team's ability to create working software - which, again, as per the Agile Manifesto, is more important than documentation. For actual Lean Software Development, I recommend David Anderson's Kanban and Jurgen Appelo's Management 3.0. A lot of the skills I've picked up as a Lean / Agile coach seem to be relevant to project management, and I've started getting offers of PM work from agencies. Since I coach PMs, I feel like I ought to have a go at actually managing a project at some point. I therefore recommend that a story should be a slice of a feature created in order to either get feedback or gain trust, with the focus on the stakeholder who cares. I like the Feature Injection template: David Anderson's Kanban method, which @Pawel mentions, derives more from the new school of thought than the old. He gives the following guidelines: Scrum generally works best with co-located teams. At the very least, make sure that your distributed people are actually behaving like a team, trying to achieve a goal, rather than just doing "their bit". What's the difference between a good coach and a good PM? What additional skills will I need to adopt in order to successfully manage a small project? Do you recommend any particular books or training courses? This seems like a pretty good approach, to me. Allowing the customer as much (non-secret/sensitive) information about your business with them is the best way to improve the feedback cycle. As such, this is a valid reasoning for splitting each project into its own JIRA project. Though you could also, in theory, keep a 'Requester' custom field and make new Projects/Boards based on the Requester field, that is more or less just a different approach to what I suggested above, just even more work. I would focus on the need, rather than the implementation. The user story would then simply be: A very vague question that I cannot answer, beyond what I have already provided above. The first step is to differentiate between Stories and Tasks. If it's a developer Task, then non-developers don't need to understand it. "Refactor FizzRepository to be compliant with Liskov substitution principle" is not going to be understood by a non-developer, and it doesn't have to be. If the above is not, for some reason, possible (ie. mandated by CEO), then I see two possible solutions for this. Either you can create only a single JIRA project (which is much simpler but harms customer visibility, see below), or you can keep the projects separate but create a new board which has a filter including all projects. In JIRA, a board is just an issue filter. As such, you could, for example, create a new, empty, 'All Projects' JIRA project. By default, its board filter would be "Project = 'AP'", but it would be simple enough to change that to "Project = 'ABC' OR Project = 'DCE' ..." Or even just all issues in your entire system. At that point, you just need to create issues on their own, separate projects, but work with them in the All Projects project. This is more work, but in my opinion the better solution, because: