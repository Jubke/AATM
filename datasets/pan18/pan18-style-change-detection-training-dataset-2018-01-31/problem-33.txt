Sometimes planning around demonstrations may change how you slice up stories, or how you plan or estimate the work. If so, great! That means you're leveraging the framework. 

However, the Product Owner (as the sole custodian of the Product Backlog) does get to determine if a story can be marked completed on the Product Backlog or if elements of it need to be done again in another Sprint. Simply throwing the original story back onto the top of the Product Backlog without addressing the underlying problems with the story, the Scrum process, or the Scrum Team's communication is probably a bad idea though, so the Scrum Master should definitely assist at that point. 

This is a common misunderstanding of what "iterative" or "incremental" mean in an agile context. It in no way means you must have a prior version of the software; it means that future versions can (and generally should) build upon the work that's gone before. Agile projects benefit greatly from emergent design, and agile frameworks optimize for that. 

Your style requirements are really just a means to an end: can my internal team, or someone other than the original developer, make sense of the code? The only way to be sure of that is to have another person or team look it over, run the unit tests, compile the code, or try to make some changes. I hereby dub this Development Team Acceptance Testing. 

Demonstrating Non-Graphical Whosiwhatsits Having said all that, what seems to flummox many people is the difficulty in demonstrating new functionality in a product that doesn't lend itself easily to visual presentations. Doing so often requires a bit more creativity and agile testing experience than many shops have when they start their agile journeys. Some common solutions include: 

APIs and middleware can grow and evolve in small, testable increments in the same way as any other software can, so there's nothing orthogonal to INVEST in such systems. APIs and middleware can be versioned, modified, and extended in much the same way as more traditional software, too. How to Fix Your Team's Processes Here are some suggestions for improving your processes. Feel free to adapt or refine the suggestions to fit your specific team and organization. 

However, simply expressing a desire to be "working toward to (sic) high quality standards and efficiency" is so generic and semantically null as to be irrelevant. It might help guide your group's development of process, or be good grist for the mill during a retrospective, but it isn't really a vision. The Sprint Demo is intended to show progress, and to solicit stakeholder feedback to feed into future Sprints. While all abstractions are leaky, if you genuinely can't envision any other way to demonstrate your increment of work you can always leverage secondary artifacts. Walk people through code, commit history, living API documentation like Swagger, or other things which provide a valid view of the product's current state. 

By all means, develop high standards (which you can then include in your "definition of done") and improve your efficiency in some measurable way. Those are certainly worthwhile goals for any project. These vague procedural objectives don't really amount to a vision statement, though; the tenets are myopic at best, and are not intrinsically inspiring or reflective of a strategic goal. Be as specific as you need to be, but leave enough wiggle room to ensure that the guidelines don't become a straitjacket. Remember, you get what you measure, and if you measure the wrong things, you'll have some great Gantt or pie charts and a thoroughly useless set of deliverables. While agreeing that a consistent coding style is important, define the risks you're trying to mitigate. Then consider focusing your attention on measurable quality metrics and acceptance testing as project controls, rather than style issues as a proxy for your actual risk model. 

Cucumber is a great example of this. Seeing well-written tests (and hence behavior-describing documentation) go green is a perfectly valid demonstration for many types of software. This story would be done when: The framework's goal is to avoid traditional status reporting, and to give stakeholders "more show, less tell." If the team can't find a way to demonstrate the work increment, I daresay they will have a very hard time testing it, too. 

Conclusion To sum up, the Product Owner doesn't get to single-handedly declare whether or not a story is done. After all, the "definition of done" is a collaboration between all the members of the Scrum Team. 

That's it. The story is now done. It may or may not be done right, but it's considered complete for the purposes of Scrum. The Product Owner should have been involved throughout the Sprint, so if the feature has completely slid off the rails, the PO's lack of involvement is likely the problem and should be addressed during the next Sprint Retrospective.