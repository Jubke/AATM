First thing you need to do is create the Work breakdown Structure (WBS) up till Workpackage level. The WBS describes the end-product you need to deliver as well as the processes needed to deliver it. This will need a number of iterations on discussions with your stakeholders to make sure that everything is included that is required. You need a pretty good idea of what done looks like. 

Don't use single point estimates, but a range (Most likely - Worst Case). Next make your network of all work packages (this is the plan you are going to follow) and schedule the tasks and assign people or profiles to each of them, so you also know the cost estimate and the delivery time. Perform risk identification (use the WBS!) and add specific risk mitigation tasks where required. 

The end-result should be broken down in sufficient detail into the functional components that will add to the capability the product needs to support. Each will be a workpackage. Estimating is best done with a group of people, instead of individually. 

Don't forget to add any material costs, licences, ... to complete your budget. Note that, if you're not sure yet which technology to use, you will either have to make assumptions or (better) make an estimate for each possibility. Second, if your company roadmap includes things like new technology development, technology acquisition, or any kind of transformation, you may want to plan spikes as appropriate to see how various projects can support this roadmap. You may also need to account for people supporting activities on the company roadmap, both technical and non-technical, which will take them away from projects and reduce project velocity. Of course, depending on your funding structure, you may need customer buy-in and support to add stories and tasks related to internal changes to project plans, which you may or may not get. 

You specifically mentioned two things, so I'm going to focus on those in this answer. However, you can probably generalize for a wide variety of work. 

If you're estimating in story points, estimating a spike should be fairly easy. It's typically easier to learn a new library than a new framework, a new framework than a new programming language, a new language than a new paradigm. If you have domain experience already, it is likely going to be easier than if you don't have domain experience. If you have to learn multiple new things, it's going to be harder. You should be able to scale up the points for a spike appropriately. It's easier if you're using a Fibonacci sequence or t-shirt sizing for estimation, as opposed to hours. 

For tasks such as researching or learning something, many people use a spike (see 1, 2, 3). It's not part of Scrum, but it's a good fit. You should be able to estimate this type of work somehow, although it may be hard without prior experiences. In the end, it's no different than any other story, except that the completion of a spike yields an increase in knowledge and maybe some kind of deliverable that isn't a shippable software product. You place it on the backlog appropriately and do it before you need to deliver the functionality using whatever information you learned during the spike. First thing you need to do is create the Work breakdown Structure (WBS) up till Workpackage level. The WBS describes the end-product you need to deliver as well as the processes needed to deliver it. This will need a number of iterations on discussions with your stakeholders to make sure that everything is included that is required. You need a pretty good idea of what done looks like. 

Perform risk identification (use the WBS!) and add specific risk mitigation tasks where required. 

The end-result should be broken down in sufficient detail into the functional components that will add to the capability the product needs to support. Each will be a workpackage. Make sure these cost items are identified so that you know your contingency budget and how it is applied. 

A final word: track time!! So that you can use it for the project after this one. Not only to be able to compare with previous realised work packages or tasks (if you track time on this detail), but also to track how well you're doing the estimations. If you notice that you under-estimate by a certain %, you can use that 'evidence' next time as a separate margin or even to adjust the most likely estimates. Note that, if you're not sure yet which technology to use, you will either have to make assumptions or (better) make an estimate for each possibility. 

Estimating is best done with a group of people, instead of individually. 

Next make your network of all work packages (this is the plan you are going to follow) and schedule the tasks and assign people or profiles to each of them, so you also know the cost estimate and the delivery time. Summing all these estimates up will give you the required budget in hours or days for each work package and ultimately for the whole project, and possible alternatives of execution. 

The final schedule is based upon the most likely estimates or any other way of calulating it (eg PERT), but make sure you also calculate some margin, in both time and money. As estimating seems to be a problem, you better argument to take the difference between the most likely (or average, or PERT or whatever ) and the worst case. Since you will manage against the former, that should be ok. 

Don't forget to add any material costs, licences, ... to complete your budget. 

How much effort or how long a task really takes is not deterministic (10 hours) but follows a probability distribution you have to account for. Think of your daily commute: does it take exactly the same amount of time each day? By taking into account the worst case, you can work out a margin, but you manage against the most likely (because Murphy does not always pays a visit and to prevent student's syndrome (take all the time allotted)). 

Next each work package needs to be estimated. Ashes has given some typical methods for getting a valid estimate. As estimating seems to be a problem, I would advise to develop each work package (or lowest level WBS element) into all the tasks required to complete the deliverable (= task definition). Each task is then separately estimated into ideal work hours or days. Meaning that if someone would work uninterrupted on this task it would take him x hours. Again, estimating is done by subject matter experts and/or the people who will perform them.