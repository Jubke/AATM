I wouldn't compare them in terms of pros/cons since they have different purposes and there's seldom a "choice" to make between the two. I suppose that a program like this... This post has been rewritten as an article here. Here is a good text on the subject. The integer passed to the constructor represents its initial capacity, i.e., the number of elements it can hold before it needs to resize its internal array (and has nothing to do with the initial number of elements in the list). Suppose we were to implement a blocking queue (I know, there is already one in the API :) This post has been rewritten as an article here. Such entry is produced even with empty try / catch / finally clauses such as (A reference to the language specification is obviously a plus.) This example should explain it: I do however see it here and there in the Java libraries so I suppose it has its place? Under what circumstances is it preferable? Is it ever unavoidable? When programming in Java (or any other procedural language for that matter), I often choose between solving something recursively vs solving it iteratively. The recursive option is often more elegant than an iterative solution so I usually go for the recursive solution. With one exception: This post has been rewritten as an article here. I have to deal with (a variation of) the following scenario. My model classes are: The shouldn't part: You shouldn't because using the pre-processor in that way is considered bad practice to start with, and there are better and more Java-idiomatic ways to solve this use case. In terms of performance, there may be a measurable difference, but I won't say anything about it because in the end it is JVM and/or compiler dependent. It seems like Eclipse favors interpreting an identifier as a package over a class name, while javac does the exact opposite. So, is it a bug in Eclipse or in javac?