There's not really anything outsiders can do to get around "I am not allowed to do that." There have been other questions about this topic, both on here and on Programmer's Stack Exchange. Suffice to say, quality is important for later maintenance of code but value cannot be sacrificed completely in order to achieve it. Here's an interesting viewpoint on this topic. However, it's looking like your company does not really do Scrum. The commonly accepted word for what you're doing is Scrumbut. So your two options are: Yes and no. Since the 'team leader' is a member of the Team, his opinion should be taken into account. If any team member's opinion is ignored during organization, then that's a strong smell that there's something wrong with the whole 'self-organizing' situation. One thing you and he need to take into consideration, however, is that Scrum recognizes no 'team lead' role. The only roles in the Scrum Team are Product Owner, Development Team Member, and Scrum Master. No member of the Development Team intrinsically has more decision-making authority than any other member. The 'team lead' does not own the issue. However, neither does the person working on it. The entire Team owns each issue (once they've entered into the Sprint), and as such any complications or concerns regarding implementation details of those issues are the purview of the entire Team. When something like this comes up, the details need to be discussed (note: not during the daily Scrum, that's not the purpose of that meeting) and a consensus needs to be reached. If the 'team lead' believes there is a problem with how someone else is approaching an issue, then what he should be doing is explaining the problem and convincing everyone that his approach will be better - not simply dictating how it should be done and assuming his orders will be followed. Likewise, this can and should be done when any Team member sees a problem with an issue being worked on by any other Team member. It's not just the 'team lead' who should do this. If, for whatever reason, you do need day-to-day updates of when initial, non-accepted development work on stories is done, then I would suggest using a separate chart. Don't throw away the burndown, though. Keep it for completed stories and velocity planning. Ask your company how they intend to implement their particular version of Pretends-To-Be-Scrum-But-Actually-Is-Not-Even-Agile. Because we, not being part of your company, cannot really answer that question for you. Keep in mind that it's possible there might not be anything actually wrong with what your company is doing, from a business-perspective... but calling it Scrum is blatantly false. As the Scrum Guide notes: Two things wrong here. First, estimates should be done in terms of relative effort (story points), not time. Second, instead of estimating in x-points-for-y-developers, just estimate for x-points. Otherwise, you are locking yourself into how many developers will work on the Epic, which is distinctly un-Agile. If you're just looking for a way to determine likelihood of reaching a Sprint's Goal, can't you just look at the sprint board? Assuming you have sufficient columns ('waiting for install/deploy' comes to mind, in your case), it should provide a decent overview of the sprint. If you're halfway through the sprint and 80% of your stories are still in 'TODO' or 'In Progress', then you've got a problem, etc. While it's not a precision metric, it should suffice in most cases. Try to convince your company to switch to actual Scrum. If the reasoning behind this particular version of Scrumbut was something along the lines of: "This Scrum thing looks nice, but we probably don't need this, and this, and this..." then take a look at We Tried Baseball and It Didn't Work. The main (not necessarily sole, depending on who you ask) goal of the Team is to provide value to the customer. What would solve your problem is integrating slack time into your estimates. You under-commit, with the now-extra time being made into slack time. Whenever things go smoothly, the slack time is used for non-scheduled, side-tasks. Researching. Spikes. Cleaning Technical Debt. Writing that documentation everyone keeps forgetting about. Any number of things. Eventually, your users will simply stop attempting to bring requests directly to the developers, and will bring them through the Product Owner instead. This isn't to say that developers should never be contacted by users. Face-to-face is among the best ways to gather feedback. However, nothing should ever be worked on until the work has been made visible and prioritized (the latter of which only the Product Owner is authorized to do). And when things don't go smoothly and you have these "environments instability" problems crop up, you spend your slack time fixing them. No slack (or less slack) that sprint, but you still get done what you actually committed to. What is the reason for this? Are the projects highly related? Are they just so small that doing only a single project per sprint is infeasible? If the Development Team is working on a multitude of unrelated tasks during a sprint, you may want to consider an approach other than Scrum, such as Kanban.