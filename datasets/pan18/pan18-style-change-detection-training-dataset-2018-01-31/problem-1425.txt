I think these are enough examples for one answer. You can find the full source-code as well as an example to display nice-looking ascii-trees in this gist: https://gist.github.com/3599532 I might run into a bug here when I see the output across multiple PHP versions, looks like that HHVM does not have this issue by transposing it: It extends from the PHPUnit_TestCase. As we now have specified the type of iteration, let's consider to change it to another type of iteration. So how would that work? The plugin needs to be created somewhere, so this needs a factory. The factory build method knows what your plugin needs: Where in the PHP manual is it stated that static function variables are initialized to NULL and considered empty? Split it apart and get the last element: List of iconv encoding and aliases (Feb 2013; gist): While a iterator with linear order just traverse over the toplevel folder and files (a single directory listing), the recursive iterator traverses through subfolders as well and list all folders and files (a directory listing with listings of its subdirectories): We always hear about why we should be using a framework. There are reasons galore: Considering that you're already considering storing a secret key (the "pepper"), why not use it in a way that's well studied and understood? Why not encrypt the hash prior to storing it? So I'm curious. Does anyone have any solid arguments as to why applications should not be built on top of a RAD framework? And I'm not necessarily talking about generic applications (frameworks by definition try to solve a generic problem. The quesiton is does that translate well to specific problems). And we can reproduce the other behavior (your bug) by introducing a function to maintain the reference: So the problem comes in the architecture. I want to do a formal high level architecture first. Before anything else. After that, we would then either pick a suitable framework (one that fits the architecture) or pick one close and use it as a library set. I feel this methodology will guarantee a workable system in the long run (since at least the full architecture is considered) Conclusion You're not really going to help people much who use long passwords by hashing first. Some groups you can definitely help. Some you can definitely hurt. Low entropy non-random passwords While there's little research that's gone into guessing entropy, there are some points that I'd like to point out. This group is using passwords containing common symbols, but no high bytes or control characters. These are your typable passwords. For this group, you can significantly unlock more entropy (not create it, but allow more to fit into the bcrypt password input) by hashing. The breakeven is around 223 characters before you run out of entropy. What is the xpath expression to select all nodes of a document? I wonder if and how it is possible to register a PHP userspace function with the XSLT processor that is able not only to take an array of nodes but also to return it? So how would that work? The plugin needs to be created somewhere, so this needs a factory. The factory build method knows what your plugin needs: Update: I've added more examples to show some of the edge cases. It extends from the PHPUnit_TestCase. While a iterator with linear order just traverse over the toplevel folder and files (a single directory listing), the recursive iterator traverses through subfolders as well and list all folders and files (a directory listing with listings of its subdirectories): I might run into a bug here when I see the output across multiple PHP versions, looks like that HHVM does not have this issue by transposing it: Where in the PHP manual is it stated that static function variables are initialized to NULL and considered empty? Does not apply but might be of interest: List of iconv encoding and aliases (Feb 2013; gist): I think these are enough examples for one answer. You can find the full source-code as well as an example to display nice-looking ascii-trees in this gist: https://gist.github.com/3599532 I don't understand why if the function gets an array as input is not able to return an array as well? Lets see a first code example before writing any other sentence with the I-word: For this group, you can significantly unlock more entropy (not create it, but allow more to fit into the bcrypt password input) by hashing. The breakeven is around 223 characters before you run out of entropy. So the problem comes in the architecture. I want to do a formal high level architecture first. Before anything else. After that, we would then either pick a suitable framework (one that fits the architecture) or pick one close and use it as a library set. I feel this methodology will guarantee a workable system in the long run (since at least the full architecture is considered) In general, I don't see the problem with constants and class constants as being a global problem. I see it as a dependency problem. It's a narrow distinction, but a definite one. I see global problems as in global variables which are not enforced, and as such create a soft global dependency. But a hard-coded class creates an enforced dependency, and as such create a hard global dependency. So both are dependencies. But I consider the global to be far worse since it's not enforced... Which is why I don't like to lump class dependencies with global dependencies under the same banner...