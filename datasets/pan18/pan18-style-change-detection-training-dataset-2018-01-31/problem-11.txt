Prioritization: Let's say something is lower on the backlog and I don't need it done right now, but I need it done before New Years. I can use these lines to know how far up the backlog it needs to be in order to be certain it's done in time without having to throw it to the front. 

Yes/No/Maybe Scope questions: It's easy to plat a particular amount of work or particular feature on this chart and say that it will, will not, or might be done by a certain time. Some Things That Throw Them Off Obviously being able to give the PO and stakeholders some idea of how the overall project is awesome, but there are some other things it's great for too. It's also important to remember how much Agile stresses sustainable pace. People working nights and weekends has a massive cost to it that is often hidden. You don't want to accidentally encourage cowboy heroics for a monthly reward by sacrificing the long-term health of your teams. There isn't anything inherently wrong with the idea, but there are some places that you may find problematic. This isn't really a scrum problem, but Scrum can exacerbate the problems. 

I know teams which has their sprint length floating so that's not an issue to change sprint length over time. Anyway, for me this niche looks pretty crowded already and unless you have a good idea for differentiator - something which would make distinguishable from others and would the best of breed at least for some specific group of end-users (teams) - it doesn't sound like the best app you can build. You can also check Mike Cohn's book dedicated completely to this subject (thanks Jesse for the comment). 

I would also point that as long as you're going to choose your own way understanding how the work is done and how a team works is crucial. Otherwise you will be throwing out parts of this or that method without understanding why they were implemented in the first place, i.e. what the team was supposed to get thanks to them, thus what you should address with different bits and pieces. PS. I would rethink whether everything you do is actually needed. I don't say it is not, although managing Kanban board for the team or measuring individual velocity sound like overkill. Maybe the team needs it - you definitely know better than me - but don't try to be control freak. Also, when we're discussing Kanban many teams tend to work with physical board and not software as long as that's possible. But of course there are also those which can't and have to fall back to some kind of application. Scrum doesn't really cover the strategic part of planning. In terms of building a vision and a general roadmap Scrum itself won't help you much. However, at this level planning doesn't really differ from what you know, or should know, from other methods. I believe your development team is grossly exceeding their bounds on the pretext of "Self-organizing". To cite a small example, the stakeholders now have to wait for, say, nine months to see the first demo of the project, instead of every two weeks. Good luck with your transition! Feel free to come back and ask additional questions here on PMSE. 

Write Scrum style user stories: 

Whoever is testing it, should do it within the iteration: From the original 1986 article by Takeuchi and Nonaka that introduced the term "Scrum": 

Here are a few quotes from Mike Cohn's presentation on Leading a Self-Organizing Team: As pointed out by CodeGnome, velocity is always going to be a range. However, if you find that your velocity fluctuates a lot, here are some things to check and suggestions for improvement: The purpose of the Daily Scrum meeting is for the team to share with their team mates progress of work and planning for that day. And it is tightly time boxed. So, the entire focus should be on the Sprint backlog and on the people who are doing the work. In Agile/Scrum teams, the concept of a self-organizing team and the notion that "the team owns all the stories, individuals donâ€™t" is turning out to be difficult to communicate. I have seen lots of articles and many pages of text explaining this.