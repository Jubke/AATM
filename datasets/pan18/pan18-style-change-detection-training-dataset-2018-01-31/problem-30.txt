BTW: a mixture of top-performers doesn't necessarily make a top-performing team. There are many people who don't treat agile in general and Scrum specifically as sacred cows. For them, well, me included, it's just one of tools I may use - either as a whole or only partially. So it's not processes and tools over people. When it comes to Scrum implementation it pretty much depends who you listen to. If you go with Ken Schwaber's, rather conservative, approach you'd hear that Scrum is actually the solution and you shouldn't change it much. The main value you get from keeping the sprints equally-sized is you can measure how much work the team can do over the next chunk of time. If you change sprint length during the project it will be more difficult to estimate velocity. Another obvious idea is to pull some work items for yourself as long as you're competent enough to deal with development/testing/whatever. I'd strongly advice to think it through. There are many Kanban/Scrum tools already - here you can find pretty comprehensive list: http://www.limitedwipsociety.org/resources/tools/ Actually filling your schedule to the point where you are short of time should help you to decide which activities are really needed or add value and which may be skipped with no difference whatsoever. Besides in Scrum sprint length determines frequency of planning meetings, demos and retrospectives. If the team is new to Scrum I'd probably go for shorter iterations from the beginning - you don't have to treat as the rule that you have to deliver presentable demo after each sprint, but the more frequently you meet to improve your process (retrospective!) the faster you'll be adjusting your method to the optimal one. In short: if you have rather experienced team and measuring velocity isn't crucial I wouldn't object changing sprint during the project. However if the team isn't that experienced (so you prepare for frequent process adjustments) or learning how fast you can run is important I'd prefer to start with 2-week-long sprints on the beginning. You don't share your background, but basing on a fact you don't do any project work I consider you're more of a "specialized" Scrum Master. In this case I'd advise to start working with a second team and then possibly with another if you still have empty gaps in your schedule. In short: if you spend more time with a team you just make them more efficient with their new tools. However, if you spend more time building the widespread understanding of agile concepts among the whole organization you teach them that their new tools enable new methods of building things as well. They don't need to bring it all down to individual performance. Basically Scrum set focus on team performance and team accountability instead. Estimation is a whole different thing. Once you you have a vision and a general plan you definitely want to be able to say what you're going to build in what time. Here is an excellent two-part video of Mike Cohn talking about agile estimation: Actually in vast majority of teams I know Scrum Master is either as additional role for one of team members, which means that SM does regular project work and on the top of that does what you do, or a single SM works with a few teams. The latter kind of answers your question - it's not about applying specific method blindly. Do what works for you and if it doesn't just stop. That's not what you're going to hear from everyone but, well, if you look for kind of common sense answer you won't need to look for it very long either. However you may also find opinions that Scrumbuts (we do Scrum, but...) are the best flavors of Scrum. Pretty often lack of understanding the work is a reason why selective approach to any method fails. UPDATE (basing on comment): If your main goal is to mentor the organization, do that. Look for opportunities to teach. Maybe there are other development teams. Even if there aren't you have much work to do not only in marketing and customer services but also among senior managers. As long as they insist on measuring individual velocity my guess is they don't really get what agile is. So unless you know, in general, what you want to build don't bother with going deep into any method.