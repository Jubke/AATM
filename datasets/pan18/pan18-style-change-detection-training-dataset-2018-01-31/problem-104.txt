I believe that the only way you could achieve this would be to develop the specifications first then allow the company to estimate against the specifications. The only sensible arrangement for this is Fixed Price because otherwise you are agreeing to continue spending until the job is complete. However if you force them into Fixed Price they will assess the risk to their fee based on the clarity of the specification and you will likely face a heavily inflated cost to cover their uncertainty. ... then they may agree to it. But I would never ever agree to this clause and I doubt they will! Penalty clauses are fairly common, but you will find that your success with introducing this one comes down to risk. In effect, what you are asking the company to do is accept all the risk of failing to deliver to requirements. The company will, rightly, want to protect themselves from this risk and will probably push back hard on inclusion of this clause. To answer your original question, if you absolutely want to proceed then you will need to find yourself a contracts lawyer to put the contract together using the right words. If you try to do it yourself you run the risk of not protecting your interests properly and in any case the company will probably insist on a formal contract and their lawyers will pick it apart to ensure they are adequately protected from risk. You will also get into a protracted discussion on definitions of Scope and Acceptance Criteria. For example as we all know, it is not possible to guarantee defect-free software, therefore it is possible and quite likely, that you will be expected to accept a level of defect in the system. This is quite normal. You will need to define exactly how much deviation from "perfect" you are willing to accept so that the company knows where they stand. I would vote for option 3: try to split your people into several teams and minimize the number of projects per team (context switching takes lots of brainpower). Ideal SCRUM team has 5-8 people (afaik). if you can put some of your projects on hold - do it. perhaps you could change the way you run meetings? I've seen too many project managers who just loved all kinds of meetings and couldn't understand why developers would find these wonderful long meeting "boring" or "exhausting" option 1: it might work if you make these standups extremely quick and efficient (15 min is the maximum, standup could be much shorter) Imho, project is dead when it has been aborted (or abandoned), if it has been successfully deployed then the project is very much alive (the code is there and it works!). imho, it's quite common for creative people to get bored during all those endless meetings in this case you can ask one of the teams to take care of the problem (or just assign one of the teams to be a "product support" team - for one sprint or forever). This means there is nobody to "listen to," you can simply refer to the idea unit, and talk directly about it without having to get side-tracked from your "How do I get A into B" discussion. Bureaucratic systems are helpful, only if you use a light touch. If you start requiring pages and pages of data for a single concept, it won't work and you'll be stuck in your own mess of red tape. Keep it very simple, an "idea unit" shouldn't require more than one or two sentences for each of the three requirements I mentioned above. Who can we learn from that is great at this? What draws people in? Am I going to answer your question? Practice telling stories to children. If you can train yourself to speak with interesting facts and the right words, tone, and phrasing (like successful children's shows do) you will have hit the right way to keep interest. If you need to learn how to be heard. You need to identify how to communicate in context. Once you master being a good story teller, that really only gets you up to people wanting to hear the next thing you say. Effective communication is another ball of wax that you could write a number of PhD-level papers on, but we don't need to get that complicated.