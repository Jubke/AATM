What tips or suggestions are out there for gaining support from other managers without necessarily having them take over the project with their influence? I feel like the complexity of the current sprints could very well dictate their length. If you're at the phase of the project where you're just resolving minor bugs, then maybe smaller sprints are easier. However, if you're making major changes to the system that require a lot of focus by the development team, then longer sprints may be more appropriate. What you want is similar to what marketing and operations wants, but since they don't understand software engineering, they may not understand what the developers are working on. They then use their influence to convince others in the organization to skip the architecture development. 

As more managers of these areas get involved, many of them will have their own views regarding how things should function. For instance, you, as a technical person, may picture the development team implementing a new architecture that uses web services to bring custom API's to your clients and internal developers, which will help the other developers extend your product by using the services it provides. However, the marketing and operations personnel may view the architecture change as unimportant as they don't have the technical knowledge to understand how the new architecture could power other products built using that technology. 

Finally, as Geo pointed out, having a vision and a goal is important as well. Good luck! 

I've heard once that you shouldn't mix business with pleasure. In other words, if you want a solid team, you need to select the best people for the job. If you're limiting your search space to only your friends, then you're limiting yourself to local optima instead of global optima. This means that, unless your friends are the best of the best, then you're not going to necessarily have a solid team. While it may be beneficial to include department managers in meetings -- instead of just the resources they've allocated to your team -- sometimes it's more difficult to control the direction of your product in these cases. UPDATE: Here are some helpful articles on starting a business with friends that emphasize some of the points I was making as well as adding a few others: 

The smaller the sprints, the more agile you become; however, it may be more difficult for the development team to get more work done since the product must be in a working version at the end of each sprint. 

According to ScrumMethodology.com, a sprint is 30 days long. However, I can see advantages and disadvantages in having both longer or shorter sprints. In fact, the Scrum.org website's Scrum Guide describes a sprint as being no more than 30 days for the following reasons: However, it's absolutely imperative that you have a contract. A contract is a beautiful way to resolve disputes. Contracts can instantly sooth the flames of a fire that could otherwise get immediately out of control and cause not only your team to dissolve but your friendship as well. 

You're a product manager in charge of developing a new product, and you've done months of research to determine a direction and a vision for the product. The product development is going well, and now you've involved other departments, like marketing, graphics design, sales, and operations in order to create a support chain for the product. 

Finally, consider that if the sprints need to be longer than 30 days, you may need to check with the development team and ask them if they're designing the system with agile best practices in mind. Many techniques that are popular today, such as using a RESTful architecture, allow for independent deployments of modular components, which helps prevent bugs in other systems and create an environment where deployments can in fact be made more frequently.