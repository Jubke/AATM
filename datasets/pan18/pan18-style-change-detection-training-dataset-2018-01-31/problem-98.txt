4) Evaluating: Constant feedback to evaluate if the goals set in step one are being reached. I prefer a lighter, self desinged model, that anyone could agree on after a meeting. 

Emails or planification sofwares should be used to do regular repetitive tasks to help the project manager do something else instead: manage his team and building a team spirit. It is a very personal view based on my own experience. The problem in any project is to communicate effectively. I prefer direct human relations to emails but not all the time. I am convinced that talking directly to your team members, to solve problems and to innovate, builts a better team spirit than anything else. 1) Planning: What are you going to do and with what kind of ressources. 

I have learned to trust my own abilities, as all of us, and those of my team members, especially on innovating and getting the job done in time but mostly on agreeing together on how to do it. I have so much fun working that way. 

3) Directing: Leading the team trough the process from the beginning till the end. I witnessed often people spending most or their time trying to implement a model that, in fact, was not that useful. I find models to be sometimes very complex to do simple management tasks. My point of view is that any kind of project should have only a project manager, no other manager like a scrum master for example. In the Scrum model, I feel they divided in 2 or more the tasks of the project manager unnecessarily. It is a receipy for autority conflicts to my point of view based on my experience. 

project manager : the person in charge to make all management decisons. team: those who who deliver the job. client: the ones who pay the money to get a project done. That is the traditionnal way to manage a project, but I think it is still the best. 

All this centers around organizing yourself around OUTCOME vs. OUTPUT. How do you deliver high value, high quality products, not just get a lot done and increase lines of code? No person can be 100% utilized either. The question is how could they be helping their team instead, even if it is a task that they might be a little slower on. People may have to change the way they work or how they do they work in order to scale well. 

Be iterative with your change too. You are right that grouping by areas of expertise is considered a bad idea as now no one group of people actually has what they need to be responsible and deliver a full feature. It can create siloing and a lot of throwing over the wall or even overwhelming situations for again groups that end up being the dependencies for every other team. I would agree that in general most software companies scale by creating groups of people that can be responsible for full value delivery or they have everyone and everything they need to be responsible end to end as much as possible. I suspect any other "agile" person will answer much the same way. I've never seen a growing company not have to challenge some set culture and ways that they work in order to create good growth. You can't take what you have and mush it into a new mold. It may challenge some people for awhile and even create some pain, but with your eye on the ball and goals of what challenges you hope to fix, check in and see if it happens. 

There is a similar format for issues, along the lines of "There is an issue which is (whatever has gone wrong) as a result of (whatever has caused it) which has resulted in (an impact on the project)". So back to David's example, if the patient has actually suffered a heart attack:, "There is an issue which is that the patient has suffered a heart attack as a result of high blood pressure and cholesterol which has resulted in the need for open heart surgery and long term medication". I would also suggest that the frequency of contact should perhaps be different depending on the levels of trust and the nature of what each person does. If a task will take a week, a mid-week checkpoint may be appropriate, but a daily check may be too frequent. On the other hand, for tasks that are only a few hours in duration, a daily check may be just fine. Horses for courses! 

One means of dealing with this might be to suggest that an interim release could be made - perhaps using an "agile" approach in principle. This would give you something that could be delivered in less than the permitted time, at a lower than budgeted cost, and with substantially reduced scope. You work it out to be realistic. Then when you deliver, it will be clear that the extra scope cannot be delivered in the remaining time and or cost, so the project has to be renegotiated - but not by you. I find it helps to try to express risks in the form: "There is a risk that (something might happen) because (something might go wrong), which may result in (a described impact on the project)". So, referring again to David Espina's answer, as long as the patient has not suffered a heart attack, I might say "There is a risk that the patient might suffer a heart attack because he has raised blood pressure and high cholesterol which might result in serious long term health problems or even death". To mitigate that risk, take whatever steps are necessary to lower blood pressure/ reduce cholesterol, and document these.