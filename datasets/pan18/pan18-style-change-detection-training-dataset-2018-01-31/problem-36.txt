If you take nothing else from this answer take this article by the legendary Joel Spolsky on rewriting products. 

1. The Project/Accounts Manager isn't a developer 

So for example, work with members of the Security team to look at the areas of the software requirements that overlap on the areas of responsibility of the Security team. This could be done by a meeting, a workshop, a teleconference or even by passing the software specifications to them remotely and asking them to review and sign off on the specification from a Security point of view. 

Disclaimer: I have never worked in a digital agency and I am aware that the role of Project Manager in Digital Agencies can be somewhat different to that commonly accepted in other I.T. operations whether in-house or software development suppliers. Furthermore I am not clear on the exact differences. 

Do they though? Or do they become what developers think are project managers? Do the developers start actively managing the employers' and the clients' risks? Do they begin negotiating resource levels, contracts and expectations? Do they rearrange the project plan to take into account new dependencies and ensure regular clear communications goes out against the communications plan? etc. etc. etc. If they really do start being project managers then clearly you have an ineffective project manager. Or perhaps you have a PM that is inexperienced and doesn't communicate properly, or doesn't work with the development team to understand what is happening to the project? 

In all cases ensure you have documented any changes required to the software specifications, once you have reached agreement with each party on their approved form, and ensure you have a paper trail containing an agreement from each party that you have accurately represented their needs in the requirement and their approval of the specification (this is the 'rigour' mentioned in your brief). 

3. The client wants to speak directly with the developers. 

So what? These are very different roles with very different responsibilities. In my experience developers often think that the role of Project Manager is akin in some way to Team Lead, or Development Lead. Undoubtedly in some organisations that is the case in practise, but I assume it isn't here as you have already stated you have Dev Leads. So this is a statement of fact rather than an actual problem. It can lead to significant project problems if the PM needs a technical appreciation in order to complete their PM work or if the development team use the PM's lack of technical experience against them by, say, over or under-estimating workload when the PM doesn't have the necessary skills to review and challenge estimates. But it is not, in itself, a problem. It would be worth thinking about why this is a problem to you or to the project as that will uncover issues that can be addressed. 

The objections all of the contributors are on target and these are true with all KPIs. You establish a metric to increased desired behavior, that desired behavior is "paid for" by the removal of other behaviors, some of which are also desired. This is why establishing your KPIs is very challenging and you need to do so with care. 

It's interesting that you called this a CR *rejection/*approval process and then asked if it was appropriate for it to be rejected, which is part of the process's name. So I sense there is another, more accurate question to your concern. I am wondering if it has to do with the costs incurred during the technical feasibility analysis, i.e., if rejected so too are all costs associated with it. 

It might be that scoring defects is not the solution to increasing quality but rather scoring those behaviors that lead to quality, i.e., leading indicators. We know increased skill should mean higher performance, so perhaps there is a KPI or two that will motivate skill acquisition and mastery. 

Another aspect to look at is the natural evolution of team roles that develop. Throw five or six people at a task and you will see, over time as the team matures, the individuals gravitating to various team roles, including a lead role. I'd be surprised if this is not happening on your team, though it may not be if your team is imploding. If it is happening, exploit and enhance it. The one who is sort of taking ownership as the lead needs to continue in that evolution, which means (s)he needs to begin overseeing not only the task but also the management and control of it, including costs, schedule, risks, and other leadership things. If this happens to be you, run with it. 

The demo (review) is not to show what you have until now, but to deliver a working piece of product! In my book it's not a product if it doesn't contain the final UI with styling, works end-2-end and is deployed on a product server. If enough value has been delivered. The users should start using it as soon as possible to gather even more feedback. Products evolve best by using them, not by designing them upfront. 65% of the build features are never used by users, why build them? 

From my perspective this should be management vision, they should communicate to these teams that this is what is expected from them. 

I love vertical software development for a couple of reasons. Creating software end-2-end gives much better insights in uncertainties (e.g. what works and what doesn't on your scale). Don't postpone integration until the end, this always leads to missed deadlines. I am always amazed how users do not really need features when you continuously estimate and compare effort versus value. If you keep delivering a usable product the users will really know what the next most important feature should be.