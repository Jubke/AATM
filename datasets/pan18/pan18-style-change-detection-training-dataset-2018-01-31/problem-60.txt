In Scrum (an agile framework), story points are used as an estimate of the total effort involved in completing a user story. A story involving a small change by dev but needing a lot of testing might get given 13 points whereas another needing more dev but is easy to test might only be 5 points. Complexity and uncertainty can also influence estimation. Some great books that look at these concepts more: Try to find out how often people wait for inputs and/or how big their queue of inputs is. If they already measure this, get the data, if not, see if they'd be prepared to start measuring queues. An initiative we've started recently is a fortnightly award called 'Achievements in Agile' where teams can win a prize (usually a night out or toys like Nerf guns) for stuff like trying innovative process improvements. This is peer nominated which means teams need to actively promote what they are doing. For example, a team might only allow 3 items to be in progress at once (to ensure they don't overload the teams capacity with unfinished work) and measures the average time it takes something to go from the product owner introducing the story to the team to the story getting released into live. This way, when they get asked "how long will it take for this to get done" they can say 10 days (plus or minus two) with 90% confidence. 3) Define the interface upfront. If, for example, part of Project I is to create a service that A and B will consume, define what that service needs upfront and ensure that any changes to the interface are communicated between teams so they can adjust as they go. Regardless of methodology, it sounds like the principle of limiting work in progress would help you a lot. Want to add a code review step? Just add a column. That's easy in some virtual products but a pain in some. As an employee user, I want my final bill to account for my staff discount. The finance team agree that infrastructure will give them a pipe delimited flat file each night, delivered to a certain location via SFTP with a list of all account numbers and their associated balance. You could then play a story to do the front end for displaying widgets. I've tackled this previously by using a session similar to your early requirements workshop to break the work up into reasonably large epics (usually workflow steps from a customer perspective). Finally, we're a pretty social bunch so there is usually a decent amount of discussion in the pub about what is great (or not) about what we're working on at the moment! This used to be OK when we were doing long sprints (4 weeks) and there was time for some back and forth, between the designer, UX and Marketing about what the final design should be. Even in long sprints though, if we were doing very different design to what currently existed (i.e. brand redesign), stakeholders would want more time to think than there was in the sprint. I think this approach can work if your sprint length is reasonably long, you're working to strict brand guidelines and your PO can sign off designs themselves without having to go to other stakeholders You don't need to be a registered education provider to offer training (in the UK at least). There are a few ways I might write these stories. I'd probably still include some sort of front end with this story. Perhaps just spit out the specs for a widget unstyled on the page so a non-technical product owner can still sign off without resorting to showing the the database! Rather than implementing all of the front end in one story and all of the back end in another, you could try having multiple stories that do a bit of both. For example, the first you play might be: Customer service team agrees that the infrastructure team will provide an API that allows them to pass a customers email address in and will return some data about the customer account, conforming to an agreed schema that contains information about the customer account allowing them to route the ticket to the right internal team.