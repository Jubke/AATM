EDIT to follow additional information: After reading your additional comments, it appears the issue is not a lack of SW PM, it is a lack of PM controls and methods. It is typical to throw a person at a problem the same way we blame a person when things go south. A more sophisticated analysis will likely show other capability enabling issues, such as weak and out-of-control processes, weak tools that lack integration, weak organization intellectual capital...and certainly it can also be due to weak people performance. 

Yes. That's the idea of a CR. It can be accepted, rejected, deferred, delayed, etc. In fact, a change denial before it begins the process is damaging to the overall project, though it likely happens a lot on many projects and maybe even more so in certain industries. Similarly, a change accepted before it starts the process is scope creep by definition. 

The piece of work farmed out needed to have other deliverables as part of that contract, things like a schedule, reports on a set frequency, intermediate verification and validation of scope and milestones, things like this. Flying blind to the end date is using hope for strategy. 

Do they though? Or do they become what developers think are project managers? Do the developers start actively managing the employers' and the clients' risks? Do they begin negotiating resource levels, contracts and expectations? Do they rearrange the project plan to take into account new dependencies and ensure regular clear communications goes out against the communications plan? etc. etc. etc. If they really do start being project managers then clearly you have an ineffective project manager. Or perhaps you have a PM that is inexperienced and doesn't communicate properly, or doesn't work with the development team to understand what is happening to the project? 

1. The Project/Accounts Manager isn't a developer 

Disclaimer: I have never worked in a digital agency and I am aware that the role of Project Manager in Digital Agencies can be somewhat different to that commonly accepted in other I.T. operations whether in-house or software development suppliers. Furthermore I am not clear on the exact differences. 

3. The client wants to speak directly with the developers. 

So for example, work with members of the Security team to look at the areas of the software requirements that overlap on the areas of responsibility of the Security team. This could be done by a meeting, a workshop, a teleconference or even by passing the software specifications to them remotely and asking them to review and sign off on the specification from a Security point of view. 

This is a process problem. You don't have robust enough change management, requirements gathering and logging processes in place to ensure that requirements don't "get lost". The PM should recognise that, even if the organisation doesn't, and deploy something locally to the project. However the fact that you (and presumably by extension) the rest of the dev team knows this is a problem and you haven't deployed a solution speaks of other unwritten issues here. It is everyone's responsibility to ensure the requirements are managed properly. 

The objections all of the contributors are on target and these are true with all KPIs. You establish a metric to increased desired behavior, that desired behavior is "paid for" by the removal of other behaviors, some of which are also desired. This is why establishing your KPIs is very challenging and you need to do so with care. 

It might be that scoring defects is not the solution to increasing quality but rather scoring those behaviors that lead to quality, i.e., leading indicators. We know increased skill should mean higher performance, so perhaps there is a KPI or two that will motivate skill acquisition and mastery. 

Another aspect to look at is the natural evolution of team roles that develop. Throw five or six people at a task and you will see, over time as the team matures, the individuals gravitating to various team roles, including a lead role. I'd be surprised if this is not happening on your team, though it may not be if your team is imploding. If it is happening, exploit and enhance it. The one who is sort of taking ownership as the lead needs to continue in that evolution, which means (s)he needs to begin overseeing not only the task but also the management and control of it, including costs, schedule, risks, and other leadership things. If this happens to be you, run with it. 

Yes. That's the idea of a CR. It can be accepted, rejected, deferred, delayed, etc. In fact, a change denial before it begins the process is damaging to the overall project, though it likely happens a lot on many projects and maybe even more so in certain industries. Similarly, a change accepted before it starts the process is scope creep by definition. 

The piece of work farmed out needed to have other deliverables as part of that contract, things like a schedule, reports on a set frequency, intermediate verification and validation of scope and milestones, things like this. Flying blind to the end date is using hope for strategy. 

So what? These are very different roles with very different responsibilities. In my experience developers often think that the role of Project Manager is akin in some way to Team Lead, or Development Lead. Undoubtedly in some organisations that is the case in practise, but I assume it isn't here as you have already stated you have Dev Leads. So this is a statement of fact rather than an actual problem. It can lead to significant project problems if the PM needs a technical appreciation in order to complete their PM work or if the development team use the PM's lack of technical experience against them by, say, over or under-estimating workload when the PM doesn't have the necessary skills to review and challenge estimates. But it is not, in itself, a problem. It would be worth thinking about why this is a problem to you or to the project as that will uncover issues that can be addressed.