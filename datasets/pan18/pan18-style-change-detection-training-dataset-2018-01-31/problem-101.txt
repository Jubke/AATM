Lets give two examples of idea units: 

If you need to organize/gather ideas You need a system to manage this. This means there is nobody to "listen to," you can simply refer to the idea unit, and talk directly about it without having to get side-tracked from your "How do I get A into B" discussion. 

Once you master being a good story teller, that really only gets you up to people wanting to hear the next thing you say. Effective communication is another ball of wax that you could write a number of PhD-level papers on, but we don't need to get that complicated. 

Bureaucratic systems are helpful, only if you use a light touch. If you start requiring pages and pages of data for a single concept, it won't work and you'll be stuck in your own mess of red tape. Keep it very simple, an "idea unit" shouldn't require more than one or two sentences for each of the three requirements I mentioned above. 

First, every appraisal, no matter who does it, is arbitrary to some point. If someone isn't fine with that they should find a place where there's no appraisals at all. 

Depending on your organization's standards it may be a standard way that people are rated on a scale and if it is so I don't say you should avoid that at all cost. Do remember that PM's feedback is just a part of the whole judgment on one's work. Talking about that, PM has a pretty different perspective of a project, thus their feedback will be even more valuable. If we keep feedback just within a functional group, here: developers, and developers' functional manager we get pretty homogeneous view of a project. Bringing other point of view, especially from someone working closer with a client, would definitely help to make it better. 

From these perspectives finding a way of incorporating feedback from pretty much anyone somehow connected with developers' work to their appraisal is good. And PM is definitely a person whose work is "somehow connected" with development. If people (here: PMs) never delivered feedback to other team members, rating system may be a good way to standardize the way they construct their feedback. On the other hand please avoid any automatic measures, like a number of bugs, lines of code etc. It has nothing to do with feedback and it will only drive measured numbers down or up (depending on a goal) with no direct influence on quality, e.g. if you measure a number of submitted bugs, you may be pretty sure that people will stop submitting bugs; it doesn't say much about a project quality and even fogs your visibility more. 

What did they do? Why did people listen to JFK? Why did they listen to the Nazi and Soviet propaganda? Why did they listen to Obama? Why aren't people listening to the most logical, profitable, and obvious ideas? How do these unsuccessful people tell stories? How do you tell stories? 

This is, of course, only the surface of this. You have a lot to do, and even I am not an expert. Check out your local Toastmasters club, try to find ways to talk about boring mundane things as if they're interesting. It can be a complicated computer system, or just a few scraps of paper. What you need to do is have each "idea unit" contain what the idea is, what it's going to change, what the change will result in, and how we get to the change. After this, we can evaluate if the resultant change is valuable, and explore methods to get there. 

Bureaucratic systems are helpful, only if you use a light touch. If you start requiring pages and pages of data for a single concept, it won't work and you'll be stuck in your own mess of red tape. Keep it very simple, an "idea unit" shouldn't require more than one or two sentences for each of the three requirements I mentioned above.