If you find yourself writing a story that starts with "As a developer..." stop and think about what value that provides to the customer. Try and write all your stories with a customer actor in mind. 

Kanban is a lot harder to follow than Scrum. Consider why you have chosen Kanban. Many teams use Kanban when they are unable to get a full iterations worth of backlogs defined because requirements change so rapidly. I also wanted to add some thoughts on the actual Kanban board. A key concept of Kanban is visualizing your workflow. Your current board looks out of the box. Many Kanban teams will customize their Kanban flow to be more granular. For instance a team that has defined QA and Dev roles along with a UAT environment may have a flow that looks like Future>Defined>Developing>Testing>UAT>Production. Think and discuss with your team what their workflow looks like and make the board match it. In the long-run this will position you to focus on key Kanban concepts like cycle and or lead time as well as WIP limits. To answer your questions in specificity: Edit Knowing that the community would be vehemently against me here, I short-circuited the length of my answer as I didn't really relish the idea of yet another argument with a Scrum zealot. To them I will say this: the Scrum guide is very explicit in saying that it is very explicit (see the quotes in Josh Bruce's answer for evidence). The Scrum Guide very specifically does not ever say the PO cannot be a member of the Development Team. Since no one has given much advice in terms of software products, I would just like to put forward that Team Foundation Server 2012 Preview is free for less than 5 users, and is a great resource for managing distributed teams and facilitating communication. 

That being said, if you're PO is only occupied 20% of the time and is a fully qualified developer do I really care if your going to make me stop saying I'm doing "Scrum" while I continue to deliver value to my customers? Nope, not in the least. 

If you find yourself writing a story that starts with "As a developer..." stop and think about what value that provides to the customer. Try and write all your stories with a customer actor in mind. Creation of a backlog and user stories was definitely a good first step but... Your user stories should not be interdependent. As you describe above, you feel as if you would have to move all stories to in progress, if you started any specific one. This indicates that you have epics or stories that are not vertical slices of business value. I'd recommend looking at what you have and trying to re-write it in such a fashion that each story is independent, relatively small, and delivers a piece of value to your customers when completed. 

Kanban is a lot harder to follow than Scrum. Consider why you have chosen Kanban. Many teams use Kanban when they are unable to get a full iterations worth of backlogs defined because requirements change so rapidly. I also wanted to add some thoughts on the actual Kanban board. A key concept of Kanban is visualizing your workflow. Your current board looks out of the box. Many Kanban teams will customize their Kanban flow to be more granular. For instance a team that has defined QA and Dev roles along with a UAT environment may have a flow that looks like Future>Defined>Developing>Testing>UAT>Production. Think and discuss with your team what their workflow looks like and make the board match it. In the long-run this will position you to focus on key Kanban concepts like cycle and or lead time as well as WIP limits.