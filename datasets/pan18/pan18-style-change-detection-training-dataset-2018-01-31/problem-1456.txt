Here is my code for creating a simple header view using a UILabel. My real app won't be using a label but a custom view. To use the iOS 10.1 beta you need to use the Xcode 8.1 beta. Xcode 8 doesn't support the iOS 10.1 beta. My issue is figuring out how to inset the left and right edge of the header view to take into account safe area insets if run on an iPhone X (in landscape) and the table view's section index (if there is one). Option 2 does work in iOS with the proper parameters. I had a bunch of code kind of like this: The app must build properly with a Base SDK of iOS 8 when using Xcode 6 and it must build properly with a Base SDK of iOS 7 when using Xcode 5. The app must support a Deployment Target of iOS 7 (or earlier) regardless of the Base SDK and Xcode version. Code: Of course if you wish your updated app to work under iOS 6, this is not an option. I created a simple test app that adds a few dummy rows, a section header, and the section index. Nope. You would call just one method that delegates to all the things you want. It copies the pointer to the instance. I just tested this in a playground. A full proper example might look like this: And I've yet to replicate this with the debugger attached, which is frustrating, but the crash logs are clearly coming in. Is there some quirk in MobileSafari that prevents this from working like desktop browsers? Why does it not work in the same way? However, when I login via Mobile Safari, the cookie does not get sent back on subsequent requests. I have a page loading up in MobileSafari which communicated with another server via CORS. So don't be afraid to go play. Is there a way to do this much faster? Simply assign the output of the substring method to a variable, and let it be autoreleased for you. No alloc, no release. I'm using Charles Proxy to spy on what's going on, and it tells me: In desktop browsers (tested Chrome and Safari), I am able to log in, get a session cookie, and have that session cookie be sent back for subsequent requests so that I may be authenticated with all API calls. That method never alters the string you call it on. It returns a new string in both cases. So assign it to a new string variable and your good.