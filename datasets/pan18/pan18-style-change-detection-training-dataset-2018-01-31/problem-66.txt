Save all User Stories, each with a unique key for easy future lookup. Include that unique key on the commit message of any code relating to that User Story. How to maintain the code later? The best way to be able to maintain code in the future is to write maintainable code. That seems like a tautology, but there are other approaches (such as comprehensive documentation) that some (in my opinion, erroneously) consider to be most important. There are two main ways I know of that work. Consider the situation where there are 6000 must-haves, 2000 should-haves, 1500 could-haves, and 500 won't-haves in your project backlog. You then start a sprint, with an actual velocity of being able to take on 20 stories (in this hypothetical scenario, all the stories have identical story-point costs). If you were to use the MoSCoW method for the sprint backlog, then during that sprint you would end up accomplishing 12 must-haves, 4 should-haves, 3 could-haves, and 1 won't-have. This, I think, is the crux of your problem. Look into (and have your Development Manager look into) the 100% Utilization Fallacy. If the Sprint Goal becomes untenable, then yes, you should abort the current Sprint and plan a new one (note that it should be the Product Owner to make this call). If it's still possible to achieve the Sprint Goal, then it doesn't really matter that Stories 2 and 6 aren't going to be done. Just re-estimate them next Sprint (possibly choosing to defer to a later Sprint or remove them outright). First, unless these are absolutely critical, stuff is on fire maintenance tasks, they should be vetted and prioritized by the Product Owner, rather than just stuffing them immediately into the Sprint. Second, if they do need to go into the Sprint immediately, then something else needs to be taken out. If you can take something out for the same customer, that's ideal. If you cannot and thus a different customer's work needs to be sacrificed, there is already an existing question on PMSE that deals with this issue. (Which I cannot find at the moment, so if someone could find it and add a link in a comment, that would be great)