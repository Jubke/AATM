A key principle of the Scrum framework is that of self-organizing team which has autonomy into it's own working structure. It depends upon your organisation and the kind of development you are working in. For this example we will use 3 x Full Time Resources coding for 7 hours per day for 8 days per sprint. A full day is devoted to planning and a full day to reviews and retrospectives. The default response of the Scrum Community will be that cross-functional people are king but that is not always viable in practice, especially in Enterprise organisations or those with strict regulatory frameworks that need sign off. It could be that the developer has en employment contract which states his/her specific role and skillset. Preparation Divide your sprint into two separate components. The hard truth is, I would never allow an employee to forego tracking his/her hours if he cannot even manage to track his hours. Does that make sense? Having capacity in a Sprint is an excellent chance to let the Development Team focus on those engineering tasks without disrupting the Sprint Goal. Scrum Masters can become blinded to the fact that Scrum is only one framework of many and Scrum has several drawbacks that do not make it suitable for every project. The reason for this is two-fold In the military we used to have a saying - Don't approach Agility with a sense of right and wrong, it will just divide your stakeholders/customers/co-workers. Ultimately, if we allow Scrum Teams to mark their own homework and push products to a business without Product Owner due diligence the results could be terrible. Your challenge as an Agile Coach, Scrum Master or insert term here is to manage the relationship pipeline with those managers and let your development team manage the code pipeline. Getting stories done now in mini silos does not mean the team are building resilience to get stories done in the future if one of the development team leaves / goes sick etc. Reinforce this. Like a relay team, the clock stops when the last man crosses the line not the first; they are not behind; they are simply demonstrating to the business more realistic expectations of what can be achieved. Timelines move, developers don't work longer hours. That's the sustainable part of Scrum. Why are management more interested in logging hours? This could be a number of things but management absolutely must track hours of work accomplished. It could one or a combination of the following reasons. If it was me, I would let the team deliver 0 stories or simply prioritise all of the engineering tasks they wish to do and include 0 feature stories. Typically you will find a healthy tension between engineering stories (best practice, refactoring etc) that the Development Team wish to implement and Feature stories which the PO pushes to have done. Not always, but it's common. Normally it finishes around 12.15 at which point we break for lunch. In that break I place each of the committed cards back on the Board and the team return from lunch ready to start work by picking up their first cards around 1pm. If your approach is helping to deliver working software then it is not wrong, it could just be improved slightly. The next escalation is to articulate your concerns regarding the Scrum implementation to the Product Owner in written format and also cc in the Programme Manager in charge of the department or delivery. If no Programme Manager then simply escalate to the next highest authority.