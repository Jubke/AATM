The reason is not that technical subjects aren't funny or that technical people don't have a sense of humor, it is that audience selection is different for technical books than for other kinds of writing. 

The number one thing that you have to realize about technical writing is that people do not read it for its own sake. They read it because they are trying to do something and they need more information. The writing does not need to engage or entertain because the reader is already engaged with the task. It is their engagement with the task and their need for information that drives them to read on, not their engagement with the text. The use of analogies to explain concepts is great for comprehension. Their use is not a "trick". It is standard practice for effective exposition. All good popular science that I have seen uses analogies for effective exposition. There are two aspects to writing style: there is what does the best job of explaining a concept, and there are the shibboleths that determine if a certain group is going to accept the document. Unfortunately, when submitting a document for publication, you have to consider both how stylistic decisions affect comprehension and what shibboleths affect publishing decisions. 

Assume you will have to go back to the original translators for these pieces, and that they will take you a long time. In the meantime, you will be able to get on with the rest. So you total time is liable to be defined by these difficult pieces - as per software development. I would say that the sentences need to be the appropriate length to what you are saying, which is liable to be, on average, shorter than novel writing. One of the reasons for using long sentences is to convey a mood, to put a lot of ideas together in one, to build and build the picture you are drawing. In scientific writing there is no need for this, so this sort of long-winded sentence should be avoided. Your computing experience is probably the best guide you have. You know from this that a) some part of the translation will be easier than expected; b) some parts will be very tricky. So, ignore the easier parts, estimate how many will be tricky. This you should be able to ascertain from the length and complexity of the material - if you can gauge this. Or can you make a reasonable estimate as to how much is liable to be complex. 

So I would say, treat it as a software task, like translating user requirements into code applications, and you should get yourself a reasonable idea of whether the estimate is close or not. BTW, you might point out to your developers that since the parameter values are quoted, the comma is syntactically redundant. Removing it would simplify your diagram and even let you continue to conflate parameter syntax with the list of parameters if you really wanted to. 

For a novel or an essay or even a history, the reader selects the book in large part based on the writing, whether they like the way the author writes or not. In other words, they primarily select the writer. If you decide to tell jokes or show emotions, you will attract readers who like those things. If you are serious, you will attract readers who like serious, and all that is perfectly fine. You definitely need to join the first two parts of this, and the appropriate conjunction seems to be "until". You might also join the third with "then": The problem here is that you are conflating two separate things: the syntax for parameters in a function expression and the list of available parameters. The syntax itself is straightforward enough: However, it is also important to make your sentences make sense. If you need to put a lot of information together. Then put it in one sentence. Don't chop them just for style. 

Assume you will have to go back to the original translators for these pieces, and that they will take you a long time. In the meantime, you will be able to get on with the rest. So you total time is liable to be defined by these difficult pieces - as per software development. So I would say, treat it as a software task, like translating user requirements into code applications, and you should get yourself a reasonable idea of whether the estimate is close or not. 

I would say that the sentences need to be the appropriate length to what you are saying, which is liable to be, on average, shorter than novel writing. One of the reasons for using long sentences is to convey a mood, to put a lot of ideas together in one, to build and build the picture you are drawing. In scientific writing there is no need for this, so this sort of long-winded sentence should be avoided. Your computing experience is probably the best guide you have. You know from this that a) some part of the translation will be easier than expected; b) some parts will be very tricky. So, ignore the easier parts, estimate how many will be tricky. This you should be able to ascertain from the length and complexity of the material - if you can gauge this. Or can you make a reasonable estimate as to how much is liable to be complex.