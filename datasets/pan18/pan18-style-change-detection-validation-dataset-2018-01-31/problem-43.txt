If you're looking for a set of principles for implementing the Kanban method as formulated by David J. Anderson, then that's a key resource. Books on the topic generally have implementation examples, but because the framework is even less prescriptive than Scrum (in terms of ceremonies and artifacts) and less structured (by design), you're going to be hard-pressed to find a Kanban guide that's uncoupled from its implementation details, or that provides a comprehensive implementation guide. See Also General Resources Additional Bibliography If you want additional sources, look to the bibliographies and citations of other books in the field. The following is taken from the bibliography of Real-World Kanban by Mattias Skarin: TL;DR Disruptive requests are "waste" that can be accepted, managed, or removed. While the needs of the business must be served, every such request is an opportunity for kaizen and a chance to make sure that a recurrence is less likely in the future. Optimizing WIP Limits How one optimizes WIP limits will vary a lot based on a number of factors and a lot of in situ process analysis. However, a good rule of thumb is to limit WIP to the team's mono-tasking capacity. In other words, your baseline WIP limit should be the number of tasks that can be in progress simultaneously without idling. While it may not be feasible to have 10 developers acting as business analysts simultaneously, there is no reason that developers can't be involved in the story-writing process, in backlog refinement discussions, or in collaborating directly with customers. In fact, the Agile Manifesto explicitly declares customer collaboration to be a core value, but leaves it up to the framework and the team to identify the best ways to implement such collaboration. Your General Options In an agile practice, you can generally choose between: Below are three simple rules for managing the client/vendor process, and ensuring that you aren't left holding the bag for pervasive process issues that are clearly owned jointly by the client and by your senior management. Per-Column WIP Limits Kanban is a pull-queue system. Each column is essentially a separate queue into which work is pulled from the previous column when the WIP limit allows. You don't. Doing so is inherently non-agile. Review organizational agreements about WIP limits and classes of service. Just because something is urgent doesn't mean there's actual capacity to deliver it. You have to extract the capacity from elsewhere in your system. If the need truly is business-critical, and the business is therefore willing to absorb the costs of disrupting the process to ram something through, then ask which active WIP items should be suspended to make room for the urgent item. Even within Scrum, which has a fairly rigid definition of roles within the Scrum Team, there is nothing in the description of the Product Owner role which prevents the Development Team from clarifying the intent of a user story or collaborating with the customer directly. The Product Owner should be involved in gathering requirements and developing user stories so that he can prioritize the Product Backlog properly, but this is supposed to be a way of structuring project priorities rather than a communications barrier. The technical aspects of most books on Lean and Kanban focus on how to visualize the workflow, and on various calculations for queues, cycles, graphs, diagrams, and WIP limits. In other words, you get a lot of "how we implemented the principles for Project X" rather than a generic blueprint. This makes Kanban more flexible in some regards, but also less rigorous in other aspects. If the process is being bypassed because it's not working, then a retrospective or kaizen meeting may be in order. In all likelihood, though, it's simply a lack of rigor in following the system, rather than a failure of the system itself. Your mileage may vary. There is no silver bullet. Make sure you're solving for X, rather than Y! Stories as Conversation Placeholders A user story is not a specification or a set of requirements (see "Advantages of User Stories for Requirements" ยง User Stories Aren't Requirements Statements). Rather, a user story is a structured placeholder for a conversation about how to best implement a given feature. No. In Kanban, WIP limits and classes of service should be agreements made in partnership with the business, rather than something fixed by the framework. That means that when "urgent" work comes in, you should: The focus here is on prioritization of stories and, by extension, allocation of project resources for each iteration. The common use of the Product Owner as a communications proxy for an absent customer is certainly not mandated by the framework. If there is no Expedite class of service, or it is already in use, you should generally remind the business of the agreements about WIP limits and classes of service. You should also review the costs to the business of disrupting flow and cadence, and extending lead times, that are the natural consequences of out-of-band work. Sometimes it turns out that the "urgent" work item isn't really that urgent when carefully re-evaluated, and the business will accept the lead time of a standard class of service rather than disrupt the entire process.