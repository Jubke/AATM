You don't. Doing so is inherently non-agile. You Must Address Resource Constraints. In all cases, you can't really do what you seem to be trying to do, which is spread the peanut butter ever thinner without adjusting your resource constraints. Specifically: When done properly, the stand-up helps the team to collaborate effectively. The information shared during the daily scrum informs one's teammates about: Formal Task-Level Tracking is a Project Smell Because the goals for the stand-up are coordination and collaboration, it is expected that the team members will informally track the pieces of the day's increment that impact them. Turning daily task-tracking into a formal ceremony serves no purpose other than micromanagement. There is no silver bullet. Make sure you're solving for X, rather than Y! This smacks of an X/Y problem, where X (the real problem) is likely to be an executive mandate to "do more with less" without prioritizing projects based on both business value and resource constraints. However, you or your organization may have decided to solve for Y by looking for a silver bullet that will make the impossible possible. TL; DR Story points represent consensus within the team. The goal of estimating story points is not to provide the largest or smallest estimate, but to accurately reflect the effort required by the entire team to meet the "definition of done." If you're not doing software, the concept remains the same but the types of tests (and who needs to be involved in developing each type of test) will certainly vary. What should not vary, though, is the participation of the entire team in continuously testing the team's product and its fitness for purpose. I suggest keeping a change log to track all change requests, and try and ensure that the requirement gathering is done thoroughly before work has begun. Many clients do not care about this, and it only works extremely well when you're working in an environment or project that adopts this approach. 2) Use Kanban, not Scrum for external clients. How can I convey this to my boss without getting to confrontational? Is he correct, and is the level of support that I am supposed to provide? I feel that since I am not hands on coding, the support that I can provide is limited, given that I cannot try different things out with the code. If I am required to start developing, than that is going beyond my job description. I have made it clear to my boss that I have no interest at all writing code again. I am much more interested in project management activities, requirement gathering, optimising my sprints, organising my backlog, reading burn down charts, making sure scrum is followed properly and so on. 1) How to handle change requests I feel that at best I can point him in the right direction and give suggestions on how to solve the problem, but in the end, he has to find the solution. My boss doesn't seem to get that and expects me to hand hold him. As an agile project manager, I am currently working with one sub contractor, the problem that I am currently facing is that he is just not pulling his weight with not only doing the work but also answering technical queries, and my boss is expecting me to investigate and on a theoretical level solve the problem for him. Scrum is value and velocity based. The idea behind Scrum is where you only deliver x amount of work based on y velocity. So you prioritise the backlog according to what gives the most value and then omit the rest when you have run out of time. I do not mind at all doing this, but I have expressed the following concerns: If your team is doing well at planning and executing their Sprints while estimating the items in the backlog in hours or days, why do you feel the need to change that? As a member of the Development Team and a Scrum Master, I: The specific responsibilities of a Scrum Master are to ensure that all stakeholders understand and enact the principles of Scrum, help the Scrum Team to understand which internal interactions are beneficial, help stakeholders outside the Scrum Team understand which interactions are beneficial, and change interactions within the Scrum Team and between the Scrum Team and external stakeholders. You state that this will "mess up their velocity calculations, backlog grooming, release planning" as well as giving an incorrect picture to the Product Owner and leads regarding current status. Let's look at this one at a time. So, now, you have an unfinished story. That means you didn't get any points for it in the iteration that just finished. Assuming the priority of the story hasn't changed, it gets moved into the next iteration. Since your velocity for the previous iteration was lower, you now take fewer points into the next iteration. If your velocity for the previous iteration was X and the unfinished story was worth Y points, move the next (X-Y) points into the current iteration. Participate in every event and ceremony. I am witness to most interactions between members of the Scrum Team among themselves and with external stakeholders (outside of one-on-ones with their manager or deeply technical discussions on work that I am not personally involved in) I can put on my Scrum Master hat at any time to make sure that everyone else on the Scrum Team is adhering to the practices and rules of the Agile Manifesto and the Scrum Guide.