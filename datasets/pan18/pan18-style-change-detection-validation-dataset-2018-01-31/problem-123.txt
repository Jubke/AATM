You can clearly see that 30 level enchanting gives the maximum chance of getting Respiration or Aqua Affinity. 

This is why it is possible to build this simple non-resettable BUD: You can summon wither skeletons with the following command: Block updates theory and examples The Minecraft world changes constantly and the game needs to constantly calculate the new state of the world. This happens 20 times per second and is called a tick. In most game ticks there are quite a few entity changes - mobs movement and behavior, projectiles and dropped items movement, etc. 

Running the same test for a golden helmet (which has better enchantability) gives almost the same picture - Aqua affinity actually peaks on level 28, but Respiration III is rising significantly on levels 29 and 30, so still a better strategy is to enchant on level 30: The falling sand breaks when the sand entity reaches a block that stops it. Then it tries to convert into a sand block. This may not be possible if there is already another block at that place - in that case the sand is dropped as item. This means the sand block breaks when it is partially inside another block when it stops falling. So all non-full height blocks will break sand e.g. torches, slabs, pressure plates, enchanting table etc. 

Here is an exhaustive list of blocks that fit both criteria: The light conditions for mob spawning do not depend on the depth you are at. This is a common misconception that comes from a Notch's tweet a long time ago. However, this behavior is currently not implemented in the game (source: The Source for 1.4.5). Droppers and dispensers have the same weird pattern of checking if they are powered, so they can be used as BUDs as well. In the game code, each block has certain behavior associated with it - doors open or close, pistons move, water flows, etc. The game needs to execute this behavior to calculate the new state of blocks. In typical settings there are tens of millions of blocks around the player, but block changes are relatively rare. In a single tick there are hardly any block changes. That is why it doesn't make sense to execute (calculate) the behavior for all the blocks all the time, but instead it is much more reasonable to do it only for changed blocks. This means that the game needs to track which blocks are changing. 

Once all players are outside a 320x320 square centered on the dragon, the server will stop updating the dragon entity (time stops for the dragon). Otherwise, the dragon can go practically anywhere in The End. 

If you saw that in an Etho's Lab video, he built an Endermen farm in the sky. The Endermen fall 42 or 43 blocks and that brings their health down to half a heart, so they can be one-hit killed. LP Episode 151 shows the process of building it and LP Episode 152 shows how it is working. {Variant:515,Health:28,Attributes:[{Name:generic.maxHealth,Base:28}],Tame:1,Saddle:true}
 Health is current number of half-hearts. The maxHealth attribute is the max number of half-hearts. When you place the redstone block, it notifies the grass below and the air around it to update, and they do nothing. The redstone block does not notify the piston to update, because it is not adjacent to the redstone block, so the piston stays retracted. If after that the piston receives any notification for update in some other way (for example placed block next to piston or crop growing next to piston), the piston will 'realize' it is powered (because it will check the place diagonally above where the redstone block is) and it will extend. This is how it works: Every time you enter a portal, the game looks for an exit portal inside +/-128 blocks square (y is irrelevant). If you enter a portal at x=100, y=60, z=200 in the overworld, this corresponds to x=12, y=60, z=25 in the Nether. The game scans a square from (x=-116, z=103) to (x=140, z=153), for all y values from 0 to 128. The closest portal in that space is where you appear. If there is no portal in that area, one will be created in a suitable place. Since there is a chance the x=12, y=60, z=25 will be obstructed, the game will search for an open space in that +/-128 blocks square. If such space is found nearby, all will be good, the new portal will lead back to the same one in the overworld. In conclusion, this will never burn: 

Here is a more detailed explanation (it is still a bit simplified though): Here are some options and some considerations: 

Here is an idea how to do that: 

In described situation, there is no way to make the two portals lead to each other without moving either of them. I'd move the nether portal and if the new position is outside of the fortress, I'd build a short safe walkway to the fortress. Variant is calculated as base-color-id + markings-id * 256, that is, 515 = 2 * 256 + 3 means base-color-id = 3 and markings-id = 2 

When you deal with fire mechanics there are three basic things that can help you understand it: 

This is also how redstone signal 'travels' - each redstone dust piece notifies adjacent blocks and adjacent dust pieces update their power level and notify the adjacent blocks etc. The spawnable area is +/- 8 chunks from each chunk where there is a player (minus the chunks on the edges of that area). If a single player is online, mobs spawn in 240x240 blocks area centered on the player chunk, that is roughly +/- 120 blocks from the player.