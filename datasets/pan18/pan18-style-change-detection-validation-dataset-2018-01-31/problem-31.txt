The bottom section is for items that they would like to do but can't commit to each sprint. I often see things like full regression test runs and deploy to production down there. This is important because it gets these limitations out in the open. It creates opportunities for the team and organization to improve in the future and calls out the technical debt and risk that is building with each backlog item that doesn't do those things. You can do the same thing for Definition of Ready if you're using one. (In my experience, you don't need to make two sections for the definition of ready chart) One of the approaches I've used in the past that works pretty well, especially with multiple teams: Predictability: If your team's velocity isn't fairly consistent, your window will be so wide that it'll be useless. Two things to help with this are to use the last few sprints and to throw out understood outliers (like sprints with a week out for Christmas). They are genuinely useful, but there are a few factors that can really skew them to be wary of. And of course, this is a living artifact, so this is just to get you started. How do you measure value and learning? Scrum puts a lot of emphasis on driving out risk through learning and creating value. Even if you were to measure on the team level, how will you compare the amount one team learned against another? In short, what is performance? Another thing from Scrum that will probably help you is a product owner. The product owner has final say on what does and doesn't get worked. Your stakeholder might be the source of the ideas, but having the product owner control the backlog of work will put someone in the middle to ask questions like "what does this actually get us?", "why is it needed?", and "can this afford to wait?" Formal Task-Level Tracking is a Project Smell Because the goals for the stand-up are coordination and collaboration, it is expected that the team members will informally track the pieces of the day's increment that impact them. Turning daily task-tracking into a formal ceremony serves no purpose other than micromanagement. You don't. Doing so is inherently non-agile. If you're not doing software, the concept remains the same but the types of tests (and who needs to be involved in developing each type of test) will certainly vary. What should not vary, though, is the participation of the entire team in continuously testing the team's product and its fitness for purpose. It should be clearly evident on a day-to-day basis whether user stories and tasks are progressing or blocked. If the volume of daily work-in-progress is such that detailed formal tracking becomes necessary, that is generally a "project smell" that indicates a process problem with the team's Scrum implementation. When done properly, the stand-up helps the team to collaborate effectively. The information shared during the daily scrum informs one's teammates about: Coordination/Collaboration, Not Formal Task-Tracking While the Scrum Guide used to refer to the stand-up as a commitment meeting, it currently says: Another approach is to write your stories on cards and sort them in to size order. So that the biggest story is at the top and the smallest story is at the bottom. Then you decide where the boundary points are in the list between the various story point sizes. For example, say you had 20 cards sorted in order and you decide the bottom three cards are 1 point, the two cards above that are 2 points and so on. The team takes the first story and breaks it down in to tasks: I would immediately see this as potentially two smaller stories: Just the fact that you have clear standards will help reduce the time spent on code reviews. This won't replace code reviews, but it will hopefully reduce discussions at code reviews relating to coding style, formatting, etc. Code Review Tools There are some good code review tools around. Using a Behaviour Driven Development (BDD) or Acceptance Test Driven Development (ATDD) approach means that the code is self documenting. So introducing functionality beyond the original requirements would be obvious to anyone who paid attention to the code base. When done properly, the stand-up helps the team to collaborate effectively. The information shared during the daily scrum informs one's teammates about: TL; DR Story points represent consensus within the team. The goal of estimating story points is not to provide the largest or smallest estimate, but to accurately reflect the effort required by the entire team to meet the "definition of done." Should the story be two points, or thirteen? That's up to the team. Maybe the whole story is really 13 points overall, or the team discusses it and realizes that the story really ought to be 21 points once they factor in the need for an emergency medical team to be kept on standby. Then again, perhaps the team decides to reduce uncertainty by switching in a five-point Vorpal Sword story as a prerequisite, which reduces the Jabberwock story to only eight points in the next sprint. Testing is Everyone's Job Agile teams should strive to be cross-functional. Even when some members of the team specialize, everyone should be involved in some aspect of test execution or test development. For example, on a software project limited to the roles you've defined: