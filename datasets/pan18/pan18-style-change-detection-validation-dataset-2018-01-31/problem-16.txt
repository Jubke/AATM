These are grown-ups we are talking about? Maybe you should ask them directly what the issue with estimations are. I think maybe they don't want to be accountable for when they do not meet expectation, is this true? People cannot work harder then they can. This is also a good reason to use relative sizes. The Agile mindset is that clients, stakeholders and users do not really know what they want until they actually see and use it. It is all about the value the product delivers, how can they measure this value if they cannot use it? Slicing vertically should be an Agile teams main focus, delivering working software each iteration. Also checkout the Agile Scaling Knowledge Matrix, which also contains other frameworks for scaling software development: http://www.agilescaling.org/ask-matrix.html If for some reason you want to be anti-Agile and want to control everything, this is of course also possible. Combine something like Jira, let developers log their work in the system. Monitor with plugins like Tempo. I can tell you this is counter productive though, since Absence of Trust is the major dysfunction for teams. Then with a board you can do a daily scrum to understand what developers worked on yesterday and which iteration goals they are going to achieve today. Also read the 7 Mistakes during the daily scrum. Question yourself why and how you are going to use the estimations and communicate this honestly with the developers. I think the goal should be to get a forecast, but more important to get the discussion going to make tasks smaller, simpler and to create a common ground on what the tasks consists of. To make estimations easier, maybe use a fixed relative scale that everyone can relate to. I have come across "The abstract weight of smart use cases" as used by Smart (described in the book This is Agile) and used in this slide-share. Keep in mind that automated testing adds extra effort in the short term, while being really agile and lean on the long run. Developers time will be spread around 33% requirements, 33% programming and 33% automated testing. This will slow the team down and this might be a issue if management is not in on this. To minimize waste your product needs to be maintainable, extendable and understandable for developers. I advocate Clean Code and any developer and project manager should watch the first episode. Technical excellence is often skipped in projects, because the developers, the managers, the project managers and Scrum Masters actually have no clue how to make software professionally, unless you're lucky. :) Make a physical board and visualize ALL the work, also extra work or private projects. Then if you want to know who is working on what attach an avatar to the card in progress. Now the team lead can walk to the board and check who is working on what. If you are distributed use something like Jira or Trello which also supports avatars. I think estimations on a scale like this is easier to grasp then relative story points. Still let everyone vote blinded and let them turn up the complexity at the same time, this to prevent them influencing each other. Then discuss if the estimates are not close together, else just average. In my experience this is a process of years. Developers who do not practice "Quality Build In" in their daily process will see it as extra work. They rather be programming... A front-end without a back-end is not working software in my book, ofcourse you need a single team that creates a fully working piece of functionality. To be able to deliver working features end-2-end you need a cross-functional team. Meaning the team should be able to execute all neccacary disciplines to make a full working product.