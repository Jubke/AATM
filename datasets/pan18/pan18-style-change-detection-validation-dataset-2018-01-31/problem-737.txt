For now I'd prefer not to try to compute explicitly the union of my shapes because of their complexity (arcs involved...). That's the reason why I didn't try with getImageData(). When you wheel towards the top, the panel behind scrolls too, and I don't want that. I want the same lines being visible in the panel behind while the front panel is visible. What's the solution ? You should fix it at the source but if you can't, assuming your JSON is always similar to this one (no numbers in strings), then you might probably fix it with a regex : What I'm looking for is a way to detect the browser's timezone ID (as defined in the Olson tables) but I don't care for the exact ID, I just need the ID of a timezone that works the same as the user's one (for example "Europe/Rome" is fine if the user is in Paris). Not only is it faster but the ECMAScript specification ensures that all functions have a type of "function" and that only functions can have a type of "function" : The query engine is limited, which isn't very surprising for a so concise language and id validity rules so lax. it can't handle any valid id. Another way to write this would have been For people interested in performances, I made a jsperf. For random numbers using the log as I do is by far the fastest solution. Solutions which don't work in Windows and Linux, or which don't work at least in Chrome and Firefox are without interest to me. In a desktop browser, I detect the mouse wheel use with the standard mousewheel or DOMMouseScroll events. I can thus change a canvas (zooming in a kind of map). So here's the problem : How can I fill a shape with holes intersecting ? I could probably hack Promise.prototype.all or define a new function to avoid increasing the polymorphism but I'm only interested in solutions not involving the modification of objects I don't own. Here's how is defined the "computer" for my test : Use the comma to separate ids : The very curious thing is that if you hit the button while the console is closed you get this (you see it after having reopened the console, of course) : If you want to do it "in chunks", the best is to extract the keys in an array. As the order isn't guaranteed, this is the proper way. In modern browsers, you can use With a few holes, it works too as long as my holes don't intersect : in case of intersection this method fills the intersecting parts of my holes, which is not the desired result. In Java, you have 64 bits integers, and that's what you're using. As this is a question about standard, a reference is needed. This operator was specifically designed to get the type of a value, so why not use it ? This ensures the context, in the called function, is the global one. This might be useful in an internal scope. A function in javascript forms a closure by keeping a (hidden) link to its enclosing scope. I want to sequentially execute some asynchronous functions based on an array. This should be very fast as both the source canvas and the holes are animated but there is almost never more than 3 holes on screen. You don't need any library, everything is available in vanilla javascript to fetch a json file and parse it : Use localStorage for that. It's persistent over sessions. http://jsfiddle.net/dystroy/kgdBQ/1/ I did what I initially feared I'll have to do : I took Crockford's code and modified it for my needs. Now it builds JSON but handles A more detailed explanation based on jQuery source code : So, what's the most recent version of IE that didn't provide the event as argument ? Sometimes, when you type enter after a correct finished statement, the REPL waits for more : It's clear and pretty, I like it. Note that I know how to do that without promises, I'm only interested in full promises solutions. With only one hole, it's simple : I make a path by making first a subpath with the whole canvas rect and then making a second subpath with opposite winding. So when I fill the resulting path I effectively fill my canvas except for the hole. Is that a known bug ? A feature ? A grey zone ? Is there a workaround ? To deal with the different browser-specific syntaxes, I made this small code : See this jsbin where, to answer another question, I build an array-like object : The real goal is theoretical but a demonstration could be to list the properties of the closure. If you really need to be able to handle any kind of valid id, use I'm not interested in the current offset, I really need the timezone so that I can send it to the server to do computations for other dates (the server has the Olson tables too). Writing operations are one-shot, so I guess what I want (for linux and more importantly for windows) is to be notified when there are new files not being write-locked. Because of automatic semicolon insertion. The first code is the same as The simplest and most logical solution is to convert it to a string : To make my question clearer, I made a fiddle :