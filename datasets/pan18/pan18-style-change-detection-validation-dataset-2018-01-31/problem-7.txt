It's easy to see, that if we will take all three tasks (21 SP), most likely we will not finish task C. But if we take only A and B (17 SP) we will finish sprint early. For example: You have 2 User Stories. Them Scopes are approximately equal to each other. But one of them should be implemented on C# and another on C++. Your team have two C++ developers and only one C# developer. So, of course User Story with C# implementation will be more harder for your team and, obviously, it should be estimated with more Story Points. 11) When the topic runs out of gas, move its card to the right (“Done”) column. Bring the next highest card over from “To Do” into “Doing” and repeat the process. So, if it is okay for your stakeholders, there is no problem even if you will operate "SRS style" requirements (like "system shall..." phrases). Also, you said about "shortages in time and budget". I don't think, that Agile is good for fixed-price contracts. But in case you have budget/time limitation, you should avoid any changes in project. These are three questions as Scrum Guide described them: So, theoretically PBI can be any kind of requirement representation. What does Architectural Spike mean? Finally, quote from Scrum Primer: You didn't describe this aspect at all. So, that's why we estimate the Product Backlog Items in Story Points and Tasks (on which we decompose BPIs) in hours. Despite the fact that this was the first (and only) way I figured to improve the accuracy of a release plan, I don’t really like it because (in my opinion) this kind of planning does not conform to the ideology of Agile. I had an interview with one company. They use Scrum, but don’t like rough estimates during Release Planning. So, they asked me, how to make Release Planning more accurate (they don’t want more than 30 percent of deviations from the plan). We use Hours during Sprint Planning. I know, we need to separate this task to several subtasks. But what we should do, if further division of this task have no sense? What if all of resulting subtasks will have no business value until all of them will be done and integrated together? It cannot be software development department in all cases. In organizations, main business of which is not related with software (banks, for example), software development department cannot be driver of changes and cannot provide ideal position for Scrum Master. HR? I don't know, I've never seen HR with enough power to change organization for Scrum. Do you have early and continuous delivery? Yes, you have iterations in your development process, but do you have realisable product after each one? And now answer to your question: Make all sprints bigger. Maybe our sprints too short and it will be better make it bigger. In this case we will reduce feedback speed, but situation like I described below can never happen again. Agile postulates two main values: Hours Estimation is absolute measurement. It's very convenient for low level planning. You always have 160 working hours in a month, and the productivity of the team cannot greatly increase or decrease during this short period. First off all, first two questions provides team's transparency. Everybody know, what do all other team members. Delegate authority of Coach is harder. Should it be Scrum Master, because he controls compliance the methodology. Or Scrum Master responsible only for Scrum, and XP Coach should be another person. Scrum Guide imposes three constraints to well defined (or "refined" in Scrum terminology) PBI: 10) When the time limit is reached, hold a simple roman vote (thumbs up, sideways or thumbs down) to see if there’s interest in continuing the discussion. If so, set the timer for a shorter duration (eg. three minutes) and continue discussing. You can repeat this step as many times as necessary until the group loses interest in the topic. Some methodology may or may not describe how to do some of these phases. For example: Scrum doesn't describe how to do the initial phase, and says little about integration and testing. Almost nothing is prescribed in Kandan. But it doesn't mean, that there are not any of these phases in the concrete implementation of Scrum or Kanban. It means that in concrete processes these phases may be implemented in any way you wish. If "yes", whether he should attend on all Scrum events of both teams? What if his services are needed only for part of time of second project? In case of the Development Team it's easy. All teams already have Programmers and Testers.