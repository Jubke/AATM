As far as combining the Scrum Master and a manager role, I think that can be done by the same person. In fact, if you look at Disciplined Agile Delivery, the role of Team Lead encompasses the things normally done by a Scrum Master. This is a case where Scrum doesn't necessarily address organizational needs. Organizations often need managers and leads to do things like growing a team (by being involved in recruiting and hiring efforts), longer term strategic planning and roadmapping, cross-team facilitation and planning, career development of team members, and so on. None of this is addressed in Scrum. As long as the team lead or team manager is supporting a self-organized team and facilitates these things rather than taking on all of these themselves (with the exception of maybe career development and 1:1s), I don't see this as a contradiction of the Scrum principles. However, if the team lead tries to direct the way the team works and doesn't facilitate learning and self-organization, that would go against the Scrum principles. You state that this will "mess up their velocity calculations, backlog grooming, release planning" as well as giving an incorrect picture to the Product Owner and leads regarding current status. Let's look at this one at a time. If you're estimating in story points, estimating a spike should be fairly easy. It's typically easier to learn a new library than a new framework, a new framework than a new programming language, a new language than a new paradigm. If you have domain experience already, it is likely going to be easier than if you don't have domain experience. If you have to learn multiple new things, it's going to be harder. You should be able to scale up the points for a spike appropriately. It's easier if you're using a Fibonacci sequence or t-shirt sizing for estimation, as opposed to hours. There are also some other tasks that you mention, like discussing roadmaps and other meetings. These items should live outside of Scrum. They will influence your project planning and development activities, though, and do need to be considered. The other three are pretty self explanatory: people are the individuals involved in the project and how they conducted the work, processes are how the work was done, and tools are the things necessary to achieve the work. Relationships refers to the connections between these things. If the information needs extended discussion, the best thing to do is to have those discussions immediately following the standup, between the people who are needed to be in the discussion. Everyone is there and in one place, so unless someone has an engagement immediately following the standup, it should generally work. There's nothing in the Scrum Guide that says that estimation needs to be done in points. There's also nothing that says that items in the Product Backlog or Sprint Backlog must be user stories. As far as managing QA on your project tracking system, it depends on what your team is comfortable with doing. In something like Kanban, when a developer feels that the feature is implemented and developer tested, it would get moved to QA. However, you might choose to only maintain a product backlog, a sprint backlog, and a set of completed items. In that case, it would remain in the sprint backlog until QA calls it "done", at which point it's moved to completed and you get your points. There might be some other system that your team develops that works better, as long as it makes sense for how you work and doesn't get in the way of everyone doing their job. I'd never heard of this specific term, but after reading a few sites (1, 2) and an excerpt from Development of the enterprisesâ€™ competitiveness in the context of demographic challenges provided by Google Books and using past experiences, it appears that a Product Backlog Delta Report simply shows the changes to the Product Backlog between sprints. Each story can be in different states (not done, in progress, done). The Product Owner can also reorder stories, remove stories, and add new stories, so it will show the number of stories that have changed. If you are using tools, you could even identify what stories were added, removed, deleted, or changed. If your team is doing well at planning and executing their Sprints while estimating the items in the backlog in hours or days, why do you feel the need to change that? The optimal solution would be to integrate the system administrators and IT staff into the Scrum process as part of the cross-functional team, with associated stories and tasks in stories. Another solution might be to treat the administration team as a black box that must complete assigned tasks, and the Scrum Master would just ensure that the team has what is needed to complete each story within the sprint. Now, just because you can use something other than points doesn't mean that it's necessarily a good idea. There are plenty of posts about the advantages to using points - see this question on Software Engineering Stack Exchange, this question on Project Management Stack Exchange, this post by Scrum, Inc., this post by Mountain Goat Software, and this post on Agile Buddha. However, estimating in hours is not a problem to doing Scrum, especially if it is working for your team. As Scrum Master, your first job should be to make sure that stories get added and tracked by the person or people who are best capable of writing them. That could be the Scrum Master, that could be a developer. Then, the Scrum Master needs to follow up with the administration team to make sure the tasks are getting done on schedule. All of these would fall under "helping the Development Team to create high-value products" and "removing impediments to the Development Team's progress", both of which are services that the Scrum Master provides to the Development Team.