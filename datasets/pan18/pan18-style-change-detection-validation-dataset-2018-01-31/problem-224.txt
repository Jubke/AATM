For our SDK, we generate individual documents (PDFs) and one big HTML doc set (CHM file) from the same Docbook source. Each book has an index, and the HTML version has an integrated index that is the union of all the individual entries. What are better ways to manage inter-connected work with co-authors? 

Longer explanations of terms that are specific to, or different in, our product. The same information is also presented in the "natural" places in the doc set -- wherever you'd need to talk about that concept anyway, we talk about it in context. I see no point in making people interrupt their flow of reading to go visit a glossary entry, even if it's an in-page pop-up. Our existing relevant tools are: Perforce for source control, DocBook XML for the doc source, Ant for build targets. On the graphics side, we use PaintShop Pro and/or SnagIt for taking/editing screen shots, and mostly Visual Thought for line-art (though we have access to InkScape and can learn it if that would help). Our desktops are Windows (XP now, 7 later this year). 

Clarification: I'm talking about cases where I make a change and others will then have to make updates to their work, not about cases wher I make all the relevant changes myself. 

Addressing feedback from what you wrote in the last sprint (you should be getting feedback from developers, testers, and user representatives as you go) What are some strategies for either (a) crafting index terms that work in both contexts or (b) varying how the local and global indexes are produced from a single source? For an example of the latter, is there some way that Docbook could support adding a word (context) to only the global version of an index entry? 

Note: I'm using Java idioms because those are the ones I'm familiar with. I'm assuming that "takes (a parameter)" and "returns" are meaningful for your audience too; you should verify that by reading other API documentation for this language. I am also assuming that the values you originally used, e.g. NUT_ID, are meaningful even though they don't appear in the signature; if that's not the case then I would omit them in the description. I added the information about invalid IDs and null values to the documentation for the return value. You could instead add it to the description of what the method does; there are reasonable arguments to be made for both ways. But explain it somewhere. 

The doc set has a glossary, which predates most team members and has accumulated a lot of entries over time. It currently contains the following kinds of entries: Ah, the "you can write in one context, so you must be an expert in writing in another context" fallacy. I've been on the receiving end of that too. Being a good academic writer, or engineering writer, or anything else doesn't mean you can automatically write good user-oriented material (or vice-versa). The person asking you to do this is making an unwarranted leap.