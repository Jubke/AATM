It's (usually) easier to change your process. You could then introduce separate stories for the other media that do both the back end and front end together. We've struggled with this too. This kinda summarises our journey, that's not to say the same things will apply to you! Smaller stories are generally easier to get a feel for and less likely to involve multiple systems etc. It's important to actually visit and sit with people. It builds trust so if you later have suggestions that affect an area they're less likely to resist. Most critically, it lets to see how the work actually flows rather than relying on people telling you how the work should happen if processes are all followed (which is what you tend to get if you just email/speak to people in a meeting). Perhaps you've not worked on this code before. Maybe you're building something that's dissimilar to anything you've got experience of. Could be that you're using a new 3rd party tool and you have no idea how it works. This kind of stuff makes estimation pretty much impossible as you have very little to base an number on. I'd start by working out what the flow of work looks like from initial idea through to a fully released and supported product. Spend some time meeting and sitting with each of the teams along that pipeline and identify what their inputs are (what material/information they need from upstream teams) and what their outputs are (what they hand off to downstream areas). I would avoid at all costs mapping points to hours. Try breaking the story up into smaller chunks. Perhaps: That said, we do still have some stories that come through where we end up doing dev to wireframes to get stuff in the right place and end up doing the CSS a week or two later when we've got the actual designs. You're trying to be too precise If you're interested in how we measure some of these things: The tech team can then look at the work and decide whether we'd be able to meet the core requirements with that investment. This type of benefits led sign off feels more healthy to me as it avoids fixing the scope up front, and helps focus everyone on the final objective rather than the detail. You didn't specify what kind of projects you plan to manage. There are plenty of IT people around here (including myself) so I assume you mean IT project management. Be a manager when you supposed to. Manager is an observer on a daily stand-up meeting and on a retrospective. Scrum Master is supposed to talk, let the other hat be silent. But then, management is supposed to remove the obstacles, give someone a feedback, shield the teams from the outside (and do many many more). You can not end your work where SM would. I am not making it up. It was common mindset among the customers. It took years to change it but don't ask me who did it. In order to have a valuable research one usually needs to define it's purpose and goal. So, in other words, developer knows what he wants to do, what is his progress and what are the problems he is facing currently. The question is, how to share such knowledge in a meaningful way. Unlike colleagues, I would not be so pessimistic in assessing the situation. Yes, this is not a simple case. It's even slippery. I can imagine multiple scenarios depending on your company's culture of work. Scrum has strict limitations of events in time. It is hard to stay in the events time-boxes that Scrum Guide prescribes. Points stories is not for exact measurement, story point is for relative measurement. While we using Story Points, we can talk that this Story is bigger or harder than another Story, but we can't be sure how much exact time we will implement it. Decompose scope to "nouns" (deliverable items). - i.e. WBS structure Scrum Guide imposes three constraints to well defined (or "refined" in Scrum terminology) PBI: What Scrum Master should do to avoid situation when Scrum Team didn't reach a goal of event in time? I had an interview with one company. They use Scrum, but don’t like rough estimates during Release Planning. So, they asked me, how to make Release Planning more accurate (they don’t want more than 30 percent of deviations from the plan). You didn't describe this aspect at all. For example: Waterfall model, Iterative model or Spiral model. We use Story Points during Product Backlog Refinement. Then he improved this approach and facilitated it (for making self-designed teams more balanced and cross-functional). For example: You have 2 User Stories. Them Scopes are approximately equal to each other. But one of them should be implemented on C# and another on C++. Your team have two C++ developers and only one C# developer. So, of course User Story with C# implementation will be more harder for your team and, obviously, it should be estimated with more Story Points.