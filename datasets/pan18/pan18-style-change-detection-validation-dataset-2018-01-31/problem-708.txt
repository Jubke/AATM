This should work in all versions of Java 

I have a Freemarker template which contains a bunch of placeholders for which values are supplied when the template is processed. I want to conditionally include part of the template if the userName variable is supplied, something like: An enum cannot extend a class Elements of an enum (SKYPE, GOOGLE_TALK, etc.) cannot extend a class I cannot provide a default implementation of getByCode(), because DefaultCodableEnum is not itself an Enum. I tried changing DefaultCodableEnum to extend java.lang.Enum, but this doesn't appear to be allowed. Any suggestions that do not rely on reflection? Thanks, Don 

I think Maven could be worth the pain if you're building a large number of projects that all depend on each other, and development is widely distributed. But if you're building a single application, and just want to do something simple like "build a WAR from the stuff in these directories", then I would run a mile from Maven. 

Personally, I prefer this solution (to the other I proposed), as you can limit exactly which properties are exposed by appProperties, and don't need to read app.properties twice. 

You can enforce your chosen convention with an automatic source code formatter such as Jalopy, or that which comes with Eclipse. 

In November 2009 there was a surprising u-turn on this issue, and closures will now be added to Java 7. 

To answer the second part of your question about alternatives: I haven't used it personally, but have heard very good things about Gradle. A number of high-profile JVM projects such as Spring and Hibernate which were previously built with Maven have recently switched to Gradle. 

In my experience, there is no norm. Some use types a lot, some never use them. Personally, I always try to use types in my method signatures (for params and return values). For example I always write a method like this There may also be socio-political reasons to use Java, e.g. some code needs to be maintained by many people some of which don't know Groovy and don't want to learn it. 

My Java web application submits an AJAX request that returns JSON such: However, placing them at the top is far more common in my experience, and is the practice recommended by the Java style guidelines, so that's what I'd go with. 

I write everything in Groovy, because I'm much more productive with Groovy than Java, and I enjoy Groovy programming a lot more. I would only use Java if there was a performance problem with some code AND I could demonstrate that writing it in Java resolved the problem. In practice, this has never actually happened to me. I'm trying to figure out how to round a monetary amount upwards to the nearest 5 cents. The following shows my expected results I really want to support a wide range of types. For example, a method that converts a string to a number could also covert a collection or array of strings to numbers Laziness! If the scope of a variable is very short, I already know which methods I want to call, and I don't already have the class imported, then declaring the type seems like more trouble than it's worth. BTW, I wouldn't put too much faith in that blog post you've linked to claiming that typed Groovy is much faster than untyped Groovy. I've never heard that before, and I didn't find the evidence very convincing. However, the FreeMarker API seems to assume that each template name corresponds to a file of the same name within a particular directory of the filesystem. Is there any way I can easily have my templates loaded from the DB instead of the filesystem? Eclipse 3.5.2 (and possibly earlier versions) already provides this feature. If you right-click within the editor, you'll find it under Source -> Generate toString()... IntelliJ 14.X Onwards From version 14.0 onwards, the path to the setting dialog is slightly different, a General submenu has been added between Editor and Appearance as shown below On a Mac, these are named IntelliJ IDEA | Preferences... Also, do I need to add some extra configuration to the FreeMarkerConfigurationFactoryBean to ensure that the templates are cached? I think the goals of the Maven project are very worthy. Convention over configuration? Great! Automatic dependency resolution? Super! But unfortunately the practice is very different from the theory. In my experience, the introduction of Maven to projects that were previously built with Ant has invariably created more problems than it solved. In one case Maven started to take up so much of our time that we eventually migrated back to Ant again. I would like to store my FreeMarker templates in a database table that looks something like: EDIT: I should have mentioned that I would like to be able to add templates to the database while the application is running, so I can't simply load all templates at startup into a new StringTemplateLoader (as suggested below). Groovy assert is always executed in production code, and I recommended to use in production. I see the following as being roughly equivalent, but the Groovy version is more compact I have a large number of Enums that implement this interface: 

There is no particularly "good" reason for doing it one way or another. The only thing that really matters is that everyone on the same project does it the same way. 

I'll be the first to admit Java can be very verbose, but I don't think this is unreasonable: IntelliJ 8.1.2 - 13.X From IntelliJ 8.1.2 onwards, this option is in File | Settings1. Within the IDE Settings section of that dialog, you'll find it under Editor | Appearance. 

Update Following the advice below, the best I could do is this 

Does anyone know of a good tool for debugging JSPs from within Eclipse? I'd like to be able to set and watch breakpoints, step through the Java code/tags, etc within Eclipse while the app is running (under JBoss in my case).