It's important to actually visit and sit with people. It builds trust so if you later have suggestions that affect an area they're less likely to resist. Most critically, it lets to see how the work actually flows rather than relying on people telling you how the work should happen if processes are all followed (which is what you tend to get if you just email/speak to people in a meeting). Anyone can call themselves an agile coach. No idea how the courses out there compare, which is best probably depends on your objectives. I've never seen a company require (or even list as a nice to have) any agile (rather than scrum specific) qualification. They might be worth doing to learn but I doubt they'd have much impact on your resume. The most common reasons people struggle to estimate that I've seen are: Another approach used frequently by agile teams is to limit work in progress and measure cycle time (time from work to get from one part of their process to another). Does anyone have any suggestions? I have only been working with this team for 3 weeks Team member has said that I have a boring approach to coaching the team and that the previous coach was more fun Team member speaks up and criticizes every single initiative I present to the team Team member questions everything and flails between arguments. She doesn't fight one particular point or point of view, she fights for the sake of fighting. Team member is not a team player and is unwilling to work as a team, very arrogant and always tells the team that she is always right. Team member is not professional at all. Other team members from other team members are difficult, but they are at least professional. I would use an analogy for this team. Imagine a bunch of football players who were not interested in playing a game of football, they just wanted to kick the ball around. Now add me, their coach. I am at odds as I presume this is my job to sort this out. One of my teams is struggling with user story sizing. I am reading a book called Agile Retrospectives and the author suggests splitting retro's into 4 stages. Two of the stages seem so similar: The PO has started to create more granular stories but now the opposite is occurring, there are too many code dependencies between different stories e.g. one dev pushes a story to done, another dev picks up the new story and its so tightly dependent that they both need to unpick the original code and or struggle to merge code. Some of the generating insight exercises require you too...gather data! Very confusing. Are people using both of these stages in retros? I an an Agile Coach and Scrum Master for a development team. Any advice would be most welcomed! Update: My confusion stems from my inability to link to a gathering data exercise with a gathering insight phase. That is my problem. Gathering Data and Gathering insights, seem the same as I cannot imagine some of these exercises would work if you did both a gathering data and generating insight exercise. I was thinking of first looking at artefacts and then associated a checklist with each eg epic, story, release and then definition of done for each of those. A couple of weeks ago the stories seemed to be too big i.e. they were dragging along / staying on the board for weeks. Any ideas would be greatly appreciated. Can anyone recommend a format for facilitating a definition of done meeting ie, a meeting to define the teams definition of done. One of developers has become impossible to work with because of her attitude towards in particular me and I am not sure how to handle it. Does that make sense? Any thoughts? For example: I make the team brainstorm what went well, what did not go well in the data gathering stage, then do I simply set that aside and move onto a data insight exercise which also, in it self, requires the team to write a bunch of ideas down. This allows you to still play a story that covers both DB and front end while not requiring you to automate the import process. As with the manual option above, you can then choose whether automating or adding additional media is more important to do first. It's (usually) easier to change your process. Another approach used frequently by agile teams is to limit work in progress and measure cycle time (time from work to get from one part of their process to another). These help share new engineering practices and ideas across the teams and the free lunch usually guarantees a good attendance. It's a reasonable balance between push and pull - people aren't forced to attend but it provides a structured way for people to find out more about what their colleagues are working on. If the acceptance criteria don't contain vital information, estimation is tough. Things to watch out for are phrases like "replicate current behaviour". If you don't know what the current behaviour is, it's going to be really tricky to get an idea what the size of the story will be!