100% user story completion vs 100% productivity Think in terms of value delivered vs utilization. Goal of Scrum team should be to maximize output and not maximize utilization. Anything (whether a machine or person) working on 100% capacity for longer duration will eventually break. 

Wont have items also need to be documented and assigned a status of closed, so that we dont loose sight of those and can be tracked. These items can be those feedback items which are not relevant to the product or are not cost effective to implement at this time. becomes one of the acceptance test of the first story: In case of stories being carried over to future sprints, the Scrum team should not be held responsible for stories which were not part of the sprint backlog to begin with. 

Here is what Roman Pichler has to say on Scrum Alliance, The product owner is required to: Being a PO needs frequent engagement with both the client and the team so that everyone has aligned vision of what needs to be delivered when. PO has to be available to answer questions coming from the team. If your time is divided between engagement and development it is bound to have a negative effect on efficiency for both dev and PO roles. 

PO has to prioritize the backlog (the what part) where as the team decides amount of work that can be delivered in each sprint (the how-much part). Similarly PO provides feedback on the sprint during sprint review meetings and decides to approve or reject the sprint which has been delivered by the team thus causing conflict of interest. 

Feedback items eventually become part of the product backlog by either revising or adding new items in the backlog. These have to be prioritized by the Product Owner before the team pulls them into a Sprint/Iteration Backlog. So to answer your question: 

This is a lot of work for a PO which would require undivided attention. For highly aligned and high performance teams, Scrum Master role may need less amount of time but a PO will still have to spend similar amount of time regardless. As a member of the Development Team and a Scrum Master, I: 

Next, release planning. If you have a properly ordered Product Backlog with estimates attached to each item and you know your velocity, release planning should be easy. You should be able to pull off the top n items until the total estimate equals your velocity that deliver that in the next Sprint, accounting for any variances (people taking vacations or sick time, holidays, any kind of work events not tied to the items in the Sprint, etc.). Any completed Spikes are useful in the Sprint Review, however. Part of the purpose of the Sprint Review is to revise the Product Backlog. Based on the Spike, you have learned information about one or more other stories which may have led to additional detail being added, stories being decomposed. So, now, you have an unfinished story. That means you didn't get any points for it in the iteration that just finished. Assuming the priority of the story hasn't changed, it gets moved into the next iteration. Since your velocity for the previous iteration was lower, you now take fewer points into the next iteration. If your velocity for the previous iteration was X and the unfinished story was worth Y points, move the next (X-Y) points into the current iteration. 

To the Product Owner, the Scrum Master helps to find out techniques to manage the Product Backlog (including organization, writing good backlog items, arranging by value), gives an understanding of empirical project planning and how previous Sprints can be used to predict future Sprints work, and help in facilitating events (in my experiences, the Product Owner tends to drive the Sprint Planning, any backlog refinement or grooming activities, and the Sprint Review). Feedback items eventually become part of the product backlog by either revising or adding new items in the backlog. These have to be prioritized by the Product Owner before the team pulls them into a Sprint/Iteration Backlog. So to answer your question: 

Wont have items also need to be documented and assigned a status of closed, so that we dont loose sight of those and can be tracked. These items can be those feedback items which are not relevant to the product or are not cost effective to implement at this time. 

Being a PO needs frequent engagement with both the client and the team so that everyone has aligned vision of what needs to be delivered when. PO has to be available to answer questions coming from the team. If your time is divided between engagement and development it is bound to have a negative effect on efficiency for both dev and PO roles. Feedback gets implemented based on the priority set by the PO. If PO wants a feature/story to be completed before the feedback items then the team will implement the feedback in a future sprint.