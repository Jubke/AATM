The latter kind of answers your question - it's not about applying specific method blindly. Do what works for you and if it doesn't just stop. That's not what you're going to hear from everyone but, well, if you look for kind of common sense answer you won't need to look for it very long either. In short: if you have rather experienced team and measuring velocity isn't crucial I wouldn't object changing sprint during the project. However if the team isn't that experienced (so you prepare for frequent process adjustments) or learning how fast you can run is important I'd prefer to start with 2-week-long sprints on the beginning. I wouldn't say that required knowledge is changing. Actually PM was always expected to know the method used in their projects. Yes, we have more and more agile projects so knowledge how to run such projects is commonly expected. I'd strongly advice to think it through. There are many Kanban/Scrum tools already - here you can find pretty comprehensive list: http://www.limitedwipsociety.org/resources/tools/ Breaking the work down, prioritizing or analyzing critical tasks are basic project management concepts. They should be know by pretty much any PM out there, no matter what kind of work environment they work in. However specific approach to these concepts will differ - they will be tackled differently in formalized, fixed-scope project than in iterative, agile one. Either way, they will be done. However you may also find opinions that Scrumbuts (we do Scrum, but...) are the best flavors of Scrum. Besides in Scrum sprint length determines frequency of planning meetings, demos and retrospectives. If the team is new to Scrum I'd probably go for shorter iterations from the beginning - you don't have to treat as the rule that you have to deliver presentable demo after each sprint, but the more frequently you meet to improve your process (retrospective!) the faster you'll be adjusting your method to the optimal one. I would also point that as long as you're going to choose your own way understanding how the work is done and how a team works is crucial. Otherwise you will be throwing out parts of this or that method without understanding why they were implemented in the first place, i.e. what the team was supposed to get thanks to them, thus what you should address with different bits and pieces. When it comes to Scrum implementation it pretty much depends who you listen to. If you go with Ken Schwaber's, rather conservative, approach you'd hear that Scrum is actually the solution and you shouldn't change it much. The main value you get from keeping the sprints equally-sized is you can measure how much work the team can do over the next chunk of time. If you change sprint length during the project it will be more difficult to estimate velocity. PMBOK or Scrum are methods. Again, you need to know them if you use them. Also PM should know other approaches at least on a general level. Since methods aren't changing in such a rapid manner as tools are I'd expect PM would know very well at least the method of their choice. One of good answers is "you just don't." For some time I thought it is very, very hard to build some kind of agile contract which is win-win and limits risks on both sides: client's and vendor's. This presentation form Paul Klipp (slides are here) is the best approach to the subject I've seen so far. It gives incentives to both sides to finish faster and shares the pain of dealing with the slip inflicted by scope changes. There are many people who don't treat agile in general and Scrum specifically as sacred cows. For them, well, me included, it's just one of tools I may use - either as a whole or only partially. So it's not processes and tools over people. Pretty often lack of understanding the work is a reason why selective approach to any method fails. If you ask about PMBOK I wouldn't say that knowing it is a universal requirement even in non-agile projects. Anyway, I'd answer the question on a few different levels: I know teams which has their sprint length floating so that's not an issue to change sprint length over time. This one is tricky as it assumes you can convince the client to give it a try. However one, pretty good, argument I heard which can change client's mind here is letting the client abandon the project after first two or three iterations at no cost. Then you have some time to show the value of your approach, possibly presenting how client's engagement helped to make the result of these first few iterations better. It is perfectly possible to run agile project without showing client exact way the team works. What more, very often client won't be interested in that. The trick is they won't be interested in being the part of the team as well. They won't be actively participating in prioritization or product demo at the end of the iteration. Usually the best method here is to emulate the client within a project team. Very often the best person to do this is project manager who knows the client and the merits of the project well. Another answer is: make it win-win Depending on a perspective you may say that PM needs to know exactly the same what they used to know 10 years ago as the concepts are the same or that the required knowledge is completely different as tools have evolved rapidly. Anyway, for me this niche looks pretty crowded already and unless you have a good idea for differentiator - something which would make distinguishable from others and would the best of breed at least for some specific group of end-users (teams) - it doesn't sound like the best app you can build.