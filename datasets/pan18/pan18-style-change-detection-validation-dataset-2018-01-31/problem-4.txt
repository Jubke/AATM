How the stories get added to the backlog doesn't matter that much. Those that are known at the beginning can be added to the sprint backlog immediately during the planning meeting. Like you mentioned, some tasks might not be known at the start. The person who needs the task can ensure that it gets added, and could probably do a better job of describing what needs to be done to properly meet the requirement and deliver the feature. For tasks such as researching or learning something, many people use a spike (see 1, 2, 3). It's not part of Scrum, but it's a good fit. You should be able to estimate this type of work somehow, although it may be hard without prior experiences. In the end, it's no different than any other story, except that the completion of a spike yields an increase in knowledge and maybe some kind of deliverable that isn't a shippable software product. You place it on the backlog appropriately and do it before you need to deliver the functionality using whatever information you learned during the spike. Obviously being able to give the PO and stakeholders some idea of how the overall project is awesome, but there are some other things it's great for too. Prioritization: Let's say something is lower on the backlog and I don't need it done right now, but I need it done before New Years. I can use these lines to know how far up the backlog it needs to be in order to be certain it's done in time without having to throw it to the front. We can also plot lines assuming every future sprint is as good as our best sprint and one assuming every future sprint is as bad as our worst sprint. This gives us a window of when I'll reach an expected scope. I am very unlikely to be done by my optimistic date and very unlikely not to be done by my pessimistic date. Yes/No/Maybe Scope questions: It's easy to plat a particular amount of work or particular feature on this chart and say that it will, will not, or might be done by a certain time. Multiple Projects: I've seen teams add stories done for work outside of the project into their burnup, but leave the scope line the same. For obvious reasons, it messes up your chart. Either increase your scope line when you add extra stuff in or don't include it in your burn-up line. Some Things That Throw Them Off There isn't anything inherently wrong with the idea, but there are some places that you may find problematic. This isn't really a scrum problem, but Scrum can exacerbate the problems. For those not familiar, when we use a burn-up chart to track work toward some scope marker, like a release, on a project, we can take the average velocity and plot a line forecasting when the total amount of work complete will meet expected scope (when it'll be done). It's also important to remember how much Agile stresses sustainable pace. People working nights and weekends has a massive cost to it that is often hidden. You don't want to accidentally encourage cowboy heroics for a monthly reward by sacrificing the long-term health of your teams. Personally, until your organization and team understands the underpinnings of the agile methods and Scrum (the Manifesto for Agile Software Development, the 12 Principles of Agile Software), I would want to stick as close as possible to a framework (such as Scrum) and then explore the things that are and aren't working. I would want the Product Owner to be someone focused on the product, the Scrum Master to focus on the process, and the Team Lead to focus on the people (and, to be truer to Scrum, a member of the Development Team). The people in these roles should work together to maximize the effectiveness of the team, especially over time as the team and product change. You now have a full backlog that you will be working on for your iteration. However, one of the stories is actually partially completed. One of two things could happen. You might finish all of the points early, before the iteration ends. Or, depending on how much work had to be done to complete the story, you might finish on time. If you finish all points at the end, you're good - just calculate your velocity and plan the next iteration. However, if you finish early, you have a few options. You could move another story into the iteration, beginning design and implementation of it, with the understanding that it might not be finished. Or perhaps you'll give your team some time to do corporate-mandated training. Or maybe just do some refactoring or write a few extra test cases that you've been meaning to get to, but weren't a high enough priority to do. Personally, I would involve a quality assurance specialist at every phase of the lifecycle, from requirements through release. This would mean reviewing your requirements to ensure that they are good requirements and to provide early exposure to build test cases from, designs (with an emphasis on the testability and correlating design decisions with requirements), documentation (especially that which is shipped to the customer), code and tests, and released packages of material.