Adding a Gesture in the Interface Builder Drag a gesture recognizer from the object library onto your view. In Interface Builder In the Interface Builder all you need to do is drag the view you want showing on the top to the bottom of the list in the Documents Outline. Gesture Recognizers There are a number of commonly used touch events (or gestures) that you can be notified of when you add a Gesture Recognizer to your view. They following gesture types are supported by default: Add a .xib file to your project (File > New > File... > User Interface > View). I am calling mine ReusableCustomView.xib. Connect to Tab View Controller Click and Control-Drag from the Tab View Controller to your new View Controller. A menu will pop up. Choose the view controllers option under the Relationship Segue group. Add new View Controller Drag another view controller onto the storyboard. It helps me to learn visually, so this is a supplemental answer. Here is a basic walk through. I learned a lot of this from watching this Youtube video series. As an example, here is the entire contents of libsqlite3.tbd. It is just a text file. Note that the install-name is libsqlite3.dylib. Here is the code for that project: Add Tab Bar Item Drag a Tab Bar Item onto the new View Controller that you just added. I was working through the Using Text Kit to Manage Text in Your iOS Apps tutorial. It was written for Objective C but I thought I would try to do it anyway using Swift. the goal is to move a subview (let's say green) to the top. Here is what our example design would look like: I will summarize the process below. Build the path programmatically We'll arbitrarily start in the bottom left corner and work clockwise. I'll use the grid in the image to get the x and y values for the points. I'll hardcode everything here, but of course you wouldn't do that in a real project. Update I would like to do something like this: I've scoured Google but the only thing I can find so far is the following quote from the Apple developer forums: This will automatically provide two tabs that already "just work". So it appears that the .dylib file is the actual library of binary code that your project is using and is located in the /usr/lib/ directory on the user's device. The .tbd file, on the other hand, is just a text file that is included in your project and serves as a link to the required .dylib binary. Since this text file is much smaller than the binary library, it makes the SDK's download size smaller. Divide the path into segments Look back at your shape design and break it down into simpler elements of lines (for straight lines), arcs (for circles and round corners), and curves (for anything else).