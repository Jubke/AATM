Agile frameworks like Scrum provide customers and stakeholders regular inspect-and-adapt inflection points such as Sprint Planning and the Sprint Review. This allows contracts to be based on time and materials, but remain flexible on scope throughout the lifetime of the project. The client can then declare victory whenever the project has delivered sufficient value, or cancel the project whenever the costs exceed the expected return. Yet another option is fixed time and flexible scope. For example, a client may present a backlog that the team estimates at 26 sprints. The contract can specify a fixed number of sprints, and then the client and team work together to maximize the value delivered within the agreed-upon number of iterations. 

TL;DR Story estimates are estimates, not guarantees. They contribute to an overall average velocity range that is useful for capacity planning. They are not management targets, and changing story points within a Sprint tends to sweep process problems under the rug and artificially inflate/deflate a team's velocity. During a round of planning poker, the programmers on the team might estimate this story at only two points, since adding a tooth-count column to a database table is a minor change for them. However, the testers might estimate this story at 13 points, since getting close enough to count a Jabberwock's teeth to gather accurate fixture data is a dangerous (and potentially fatal) task. 

Velocity Measures/Forecasts Capacity Velocity is a measure of a team's historical capacity, rather than a directly-correlated measure of the team's speed or productivity. It should be used primarily during Sprint Planning to forecast Sprint Backlog capacity for the upcoming Sprint. However, it's a fallacy to assume that capacity can or should have an upward trend. Even though the cone of uncertainty narrows later in a project, the cost of technical debt and refactorings generally increase, and these factors consume team capacity as well. In addition, it is not uncommon for the complexity of user stories to increase over time as the low-hanging fruit is picked from the Product Backlog. Again, this added complexity will consume a commensurate amount of capacity from the team. TL;DR Much of Scrum's value to an organization is in creating transparency. 100% agreement isn't the real point of planning poker; the goal is actually to narrow the cone of uncertainty around feature estimates as much as possible, and to make the level of effort and potential project risks of each story visible to stakeholders through their chosen proxy, the Product Owner. TL;DR The subject of how to price an agile contract is both too opinion-based and too broad for a single generic answer. However, a number of books touch on the topic, and there are certainly plenty of starting points to form your own process. I list some external references below, and include some of my own experiences and recommendations as well. Are there different methods available to you for the work? For example, if your method is to move five tons of dirt with five laborers, five shovels, and some wheel barrels, several backhoes and dump trucks may speed things up. (You'll have to translate this to the type of work you're doing, of course.) 

If you don't have the capability resident, you need to buy it. Then do the estimating as you would normally do. If that is not possible, then the answer is, the project is not viable. Keep your client in the long term and let them hire a more capable firm for this gig. 

In order to do the estimate, and the work, you need the capability to do so. You need the right materials and people--those with the requisite knowledge, skills, and experience--in order to have an acceptable amount of risk and to do right by the client. No customer deserves to spend its dollars for a product it wants to a seller of services who are experimenting and learning, unless that customer is pursuing cutting or bleeding edge stuff and everyone is experimenting and learning. This is very controversial, but can you degrade the quality and call things finished before you may otherwise have? Many would have an issue with this suggestion but I think it is done all the time. 

Get them to the table, tell them your troubles framed that you are protecting their interests, and see where it goes. There's a solution to everything...just have to find it. 

In this example, you can see Macro Area D beat G and F despite a lower user score because of the lower work estimate. H beat C because of a very low work estimate and C had a very high work estimate. Works pretty good. 

Actually any method which involves discussion between three estimators should do well. A few ideas you might find useful: Basing on this you may come of with a list of features that are going to be, likely to be, not likely to be and definitely not going to be in the next release. (3) 

In this situation you have only two choices: 

While the method produced pretty good results, whenever I actually used it, it wasn't applicable too often. As we used agile approach to development we didn't want to design in much details up-front, especially that we worked in environment where priorities were changing pretty rapidly. I had two problems with such approach. One, to get reasonable results you should keep the same granularity of tasks both when you collect data and when you make estimations. While the former is easy as we did it anyway, splitting few-month-long, multiple-people project into tasks which take 8 hours on average is huge effort. Besides it requires quite an effort to design the whole thing up front. Note: it may be difficult to kick off without having historical data at hand so you may want to use the current method for some time while you're gathering data and then eventually switch to a new approach. By the way, it would allow to compare results from both methods too. From what you write you estimate features because you need predictability, namely you want to know how many and which features you can pack into the next release. At the same time you understand that requirements are changing over time which means that your estimates are going to change as well. You try to cope with it estimating and re-estimating in details as you learn more about features or changes in them.