A personal example. I tried to motivate people to be more agile using the Agile Trophy in 2010. I was given it to the colleague who made the more valuable contribution to our agile way of working during the week. The ceremony was fun - we did it during the weekly all staff meeting - the person who got the trophy was proud of it, but not everybody played. Partly because did not care about my stupid trophy, or they did not like the rules, or they found it hard to get (I didn't gave the trophy out for a good comment during a daily standup meeting). The idea dead quite fast, it didn't bring the projects forwards, and hardly anybody remembers is, but it was fun :-) 

If there is a situation when the responsibilities aren't 100% clear, then the lead developer, team lead and project manager shall have a conversation and make a decision together. Team workload is a good example: there is a demand from project management, and the lead developer and team lead should response to this demand and tell project management if the team can take more under the current circumstances without risking overburdening or product quality. The only solution I've found so far is that you have find a manager who has a good press inside the organisation, but likes to try out new approaches. You don't need the most open minded one, because she may not be that well connected, which is wrong for the purpose. Team lead is responsible for the team cohesion, team improvements and the well being of the developers The funny thing is that developers talk to each other and will learn that there are projects where they can make a difference, be better at what they are doing etc so they'll ask for a transfer and the managers who still want to use control as a management tool they'll have less manpower in quantity and quality. David was right on the spot when me wrote that the output matters (delivered values), so I have nothing else to share than a story. 

Let's take Diablo 3 for example. Getting badges won't get you closer to the final goal, and in order to get some of them, the players may do a lot of unnecessary activities, and it is still a solo task. Back to software development: what will prevent the appearance of the unnecessary comments, commits, refactoring and features? 

Most of the managers I had the pleasure to work with never believed in organisational changes which came from their developers. They only considered ideas from top or from a trusted member of their network. So the first step is to find the right person with a middle sized network inside the organisation. After you find her, do a small Agile experiment and when it is successful make it visible to others and to the executives and keep going. 

I'm not in favour to use such things in order to get people motivated and bring the projects forward. However, gamification can improve certain parts like knowledge sharing (e.g. FedEx example) and education (e.g. codeschool). 

You can have rewards for common activities in order to solve the solo achievement issue, but those where really hard to track, and you'll need a gamekeeper for sure. Or two. My tip: learn when to finish the discussion. 

I still feel that any gaming system moves the focus from the development and introduces a strong individualism inside the organization. Gamification was introduced in applications in order to use the game to keep the customers. They return to your service partly because of the gaming experience.