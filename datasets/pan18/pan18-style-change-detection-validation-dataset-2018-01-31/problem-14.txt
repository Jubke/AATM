Stories are written in a language that is easily understood by the Product Owner and business users. That way they can understand the progress that has been achieved by completing the story. Sometimes it is necessary to introduce an intermediate stage like this to help break a story down. As long as each stage delivers value that is usually OK. Epic An epic is like a super-story. When a story is too big to fit comfortably in a sprint and/or contains a lot of unknowns then it is usually better suited to be an epic. Epics are fine on the product backlog, but as they approach the top of the backlog they are typically decomposed down in to several stories. We don't bring epics in to sprints. Story A story is a functional requirement that provides some business value. It also has to be small enough to comfortably fit within a sprint. Task When a development team works on a story they often find it easier to break it down in to tasks. The tasks no longer need to be understandable by business users and so can be highly technical. The process of breaking a story down in to tasks also helps the development team better understand what needs to be done. Just the fact that you have clear standards will help reduce the time spent on code reviews. As a [role] I want [something] so that [value] As it approaches the top of the backlog they break it down in to stories that include: These kinds of tools are great for helping with the facilitation of code reviews and they also help a lot with code reviews run remotely (say when a team member is working from home). The value from the first stage in the example would be that a list of top paying clients is now available to marketing. But it would only be once the second stage is completed that they would be able to send out gifts to them. Make the news story list update from a file that can be edited by the HR team