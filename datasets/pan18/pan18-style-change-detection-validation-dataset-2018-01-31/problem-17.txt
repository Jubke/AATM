If people (here: PMs) never delivered feedback to other team members, rating system may be a good way to standardize the way they construct their feedback. From these perspectives finding a way of incorporating feedback from pretty much anyone somehow connected with developers' work to their appraisal is good. And PM is definitely a person whose work is "somehow connected" with development. Second, for someone who is looking for feedback, more feedback should be always better than less feedback. I mean, even when I don't fully agree with someone's opinion it can still be very valuable because it shows how others see my work and, arguably, what I can do to change their views. This is because in terms of appraising people any rating system is tricky by default. On the other hand please avoid any automatic measures, like a number of bugs, lines of code etc. It has nothing to do with feedback and it will only drive measured numbers down or up (depending on a goal) with no direct influence on quality, e.g. if you measure a number of submitted bugs, you may be pretty sure that people will stop submitting bugs; it doesn't say much about a project quality and even fogs your visibility more. My advice would be to incorporate feedback delivered by PMs but avoid any direct rating of developers. If functional manager isn't all defensive when it comes to their people they should be able to deliver such feedback to people in a valuable way. Such approach however requires trust between pretty much everyone around: PM, a manager and a team member. PM trusts that their feedback will reach a developer. A manager trusts they get honest, straightforward, possibly fact-based, feedback. A developer trusts no one tries to run them down, etc. Disclaimer: I have never worked in a digital agency and I am aware that the role of Project Manager in Digital Agencies can be somewhat different to that commonly accepted in other I.T. operations whether in-house or software development suppliers. Furthermore I am not clear on the exact differences. So for example, work with members of the Security team to look at the areas of the software requirements that overlap on the areas of responsibility of the Security team. This could be done by a meeting, a workshop, a teleconference or even by passing the software specifications to them remotely and asking them to review and sign off on the specification from a Security point of view. In all cases ensure you have documented any changes required to the software specifications, once you have reached agreement with each party on their approved form, and ensure you have a paper trail containing an agreement from each party that you have accurately represented their needs in the requirement and their approval of the specification (this is the 'rigour' mentioned in your brief). If you take nothing else from this answer take this article by the legendary Joel Spolsky on rewriting products. 1. The Project/Accounts Manager isn't a developer So what? These are very different roles with very different responsibilities. In my experience developers often think that the role of Project Manager is akin in some way to Team Lead, or Development Lead. Undoubtedly in some organisations that is the case in practise, but I assume it isn't here as you have already stated you have Dev Leads. So this is a statement of fact rather than an actual problem. It can lead to significant project problems if the PM needs a technical appreciation in order to complete their PM work or if the development team use the PM's lack of technical experience against them by, say, over or under-estimating workload when the PM doesn't have the necessary skills to review and challenge estimates. But it is not, in itself, a problem. It would be worth thinking about why this is a problem to you or to the project as that will uncover issues that can be addressed. It's interesting that you called this a CR *rejection/*approval process and then asked if it was appropriate for it to be rejected, which is part of the process's name. So I sense there is another, more accurate question to your concern. I am wondering if it has to do with the costs incurred during the technical feasibility analysis, i.e., if rejected so too are all costs associated with it. The objections all of the contributors are on target and these are true with all KPIs. You establish a metric to increased desired behavior, that desired behavior is "paid for" by the removal of other behaviors, some of which are also desired. This is why establishing your KPIs is very challenging and you need to do so with care. It might be that scoring defects is not the solution to increasing quality but rather scoring those behaviors that lead to quality, i.e., leading indicators. We know increased skill should mean higher performance, so perhaps there is a KPI or two that will motivate skill acquisition and mastery. So certainly your current PM has some blame for not enforcing or causing these controls to oversee your farmed out work; however, you may have bigger issues with your organization and its current maturation level around project management methods. This is about span of control. And there are rules of thumb to help an organization decide when it is time to put in a layer of control. Of course, there are competing and contradicting schools of thought on this. You need to research the benefits, costs, and risks of different approaches to see what fits best in your organization for this project at this time.