Even on a project where the requirements have been analyzed to death, the chances are that learning and discovery will be taking place. Agile practices which allow that learning to be shared can then be useful, even if the analysis practices are discarded. Most focus for Lean Software Development has historically been on the production principles. However, there's now a new school of thought which suggests that those principles are somewhat limited where it comes to software development. Edit: Since answering this question, the Scrum Alliance has adopted an exam to go with the course, so it's actually possible to fail. My people-related skills are pretty good and I have a thorough grounding in both Lean and Agile (including the many places they fail). I've seen projects through from creation to iterative release, coached different roles within projects, and have a good understanding of risk with tools and courage enough to identify and manage it. I'm also into Systems Thinking. Because of this, you can only do projects which are very low risk, ie: ones where the vast majority of it has been done before. See "Waltzing with Bears", Tom de Marco and Timothy Lister, for why these projects may not be particularly useful, especially in software development. Once you've got your CSM, be careful that you don't end up on a project where you're solely responsible for the Agile process with no support. A CSM is not enough. You'll need either some experienced Agilists or a coach around to help you. Declaration of interest: I'm an Agile coach and make pretty good money sorting out the mess for people who've relied on CSMs. The meeting you're describing (well, the meeting you should be having, see below) is a Scrum, sometimes called a stand-up. 

Thinking about the business impact and the real stakeholders who need to give feedback can really help to address project risk. 

It's not done for the benefit of the user. There's a moderator of the site somewhere who needs this so that he doesn't have to manually wade through a ton of spam. Similarly, some requirements are there for security, or for legal reasons, or auditors, or advertisers, or for performance, or for another 3rd party system, or because the legacy system we're talking to is a pain. 

If you don't have trust of the stakeholders, deliver something to them to show that you can make progress, and gain their trust. If you have their trust, show them something that's likely to need their feedback. It will probably be something new that's not been tried before (or not been tried by very many people). Consider CAPTCHA boxes as an example. I should also address your other question: no, what you're doing is not the practice commonly called a Scrum. It's the practice commonly called micro-management. 

Cancelling a project may actually be the best decision. 

Increase the ability of the team to communicate. Make sure everyone knows who everyone else is and what they look like. Give them a forum or channel to hang out on together so that they can talk through any problems they encounter. Get webcams. 

To do Waterfall, you have to have a reasonable certainty of getting things right up front. 

*This is actually a good one to start Kanban with, which is related to Lean rather than Agile. Most stuff is suitable for Kanban if it's suitable for Agile methodologies anyway; they have more in common than different. 

Rethink what the minimum product might be. If you can imagine shipping just one tiny thing, focus on that, and add more later if you have time. 

The only danger of this is the transparency which it introduces, which often causes the people who asked for the requirements to ask for changes, in which case you should probably have gone with something a bit more Agile... In my experience, the pretence that stories should be focused on users tends to result in other stakeholders' needs being pushed back, or treated only as "Technical Stories" which then have to be delivered alongside others as 2nd class citizens. 

Scrum - the methodology - is a set of practices, of which the Scrum meeting is core. You can think of Agile methodologies as different toolboxes, where the tools can be used together very effectively. 

Most of software development is about producing something new; something which has never been produced before. Because of this, most software projects have natural variance and variability. Trying to apply the principles of Lean Production to create predictable, reliable delivery can actually stifle that variance and variability, reducing innovation. Dan North's also spent some time looking at how to apply Theory of Constraints to this kind of variability, and has come up with the idea that ignorance is the constraint - that is, the speed at which you can learn relevant information represents the constrained machine in your pipeline. He calls the act of targeting that ignorance Deliberate Discovery, and in my experience it's a very effective philosophy. It's also the backbone of BDD and Feature Injection. If you do that, it doesn't matter what you call them. But I'd prefer it not to involve the term "user" unless it really means it.