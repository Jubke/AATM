Technical differences in short: I don't understand why if the function gets an array as input is not able to return an array as well? Given the following XML chunk: Update: I've added more examples to show some of the edge cases. List of iconv encoding and aliases (Feb 2013; gist): Let's review with some real-life examples that are not that abstract. Between interfaces, concrete iterators, container objects and iteration semantics this maybe is not a that bad idea. You can also connect to your server via SSH and execute the following command: It extends from the PHPUnit_TestCase. While a iterator with linear order just traverse over the toplevel folder and files (a single directory listing), the recursive iterator traverses through subfolders as well and list all folders and files (a directory listing with listings of its subdirectories): I'd like to merge two arrays with each other: And that is what you want. You want to compare arraysDocs here and do not change their type to string (which would have been the default if the parameter is not set). Is there a method or annotation that signals Phpunit to not execute this abstract test (but does not mark it as skipped or incomplete)? If your plugin needs the dictionary object, it has to ask for it: Whatever I try, I have problems to describe the overruling nature of an ancestor with the matching predicate over an ancestor with a non-matching predicate. Then you could just add a .htaccess file that looks like this: The first string contains a Unicode character for the apostrophe while the second string just has a regular ASCII ' character. I have a regex that is going to end up being a bit long and it'd make it much easier to read to have it across multiple lines. Here's a simple example which uses curl and the GET interface. You have to explicitly call parent::__destruct() from the subclass __destruct() method if the parent class does any required cleanup. I'm pretty sure that you can use wildcards when specifying A records which would let you do something like this: Unfortunately, I always this /tmp/xdebug.log Something like this would throw an error: You're looking to create a custom A record. Adding tests after the fact has been somewhat useful but my favorite things to do is use write SimpleTest tests that test for specific bugs that I have to fix. That makes it very easy to verify that things are actually fixed and stay fixed. I've used both PHPUnit & SimpleTest and I found SimpleTest to be easier to use. An Exception object (in this case, $e) thrown from inside a catch{} block will be caught by the next highest try{} catch{} block. As far as TDD goes, I haven't had much luck with it in the purest sense. I think that's mainly a time/discipline issue on my part though. Here are the headers I'm sending: I tried this but it just barfs. I want to debug a PHP script locally using the XDebug debugclient. I don't care about using a remote IDE or anything like that. So if I have something like this: And why am I allowed to instantiate SillyDB from inside itself at all? Doing it like http://mywebsite.com/user would be a lot easier to set up if it's an option. Let's say I'm writing a PHP (>= 5.0) class that's meant to be a singleton. All of the docs I've read say to make the class constructor private so the class can't be directly instantiated. While a iterator with linear order just traverse over the toplevel folder and files (a single directory listing), the recursive iterator traverses through subfolders as well and list all folders and files (a directory listing with listings of its subdirectories): Take a directory listing as an example. Consider you have got the following file and directory tree on disk: Is that version number/string unambiguous for now and in the future? Where in the PHP manual is it stated that static function variables are initialized to NULL and considered empty? Split it apart and get the last element: List of iconv encoding and aliases (Feb 2013; gist): Eastern Daylight Time (EDT), when observing daylight saving time (spring/summer) is 4 hours behind Coordinated Universal Time (UTCâˆ’04:00). As we now have specified the type of iteration, let's consider to change it to another type of iteration. I have got a large file in PHP of which I would like to replace the first 512 bytes with some other 512 bytes. Is there any PHP function that helps me with that? I'm looking for a simple way to obtain the next numerical index of an array for a new element that would have been chosen by PHP as well.