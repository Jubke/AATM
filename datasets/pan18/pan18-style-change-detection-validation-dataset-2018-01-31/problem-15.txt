In all cases ensure you have documented any changes required to the software specifications, once you have reached agreement with each party on their approved form, and ensure you have a paper trail containing an agreement from each party that you have accurately represented their needs in the requirement and their approval of the specification (this is the 'rigour' mentioned in your brief). This is a process problem. You don't have robust enough change management, requirements gathering and logging processes in place to ensure that requirements don't "get lost". The PM should recognise that, even if the organisation doesn't, and deploy something locally to the project. However the fact that you (and presumably by extension) the rest of the dev team knows this is a problem and you haven't deployed a solution speaks of other unwritten issues here. It is everyone's responsibility to ensure the requirements are managed properly. Disclaimer: I have never worked in a digital agency and I am aware that the role of Project Manager in Digital Agencies can be somewhat different to that commonly accepted in other I.T. operations whether in-house or software development suppliers. Furthermore I am not clear on the exact differences. 1. The Project/Accounts Manager isn't a developer If you take nothing else from this answer take this article by the legendary Joel Spolsky on rewriting products. So for example, work with members of the Security team to look at the areas of the software requirements that overlap on the areas of responsibility of the Security team. This could be done by a meeting, a workshop, a teleconference or even by passing the software specifications to them remotely and asking them to review and sign off on the specification from a Security point of view. So what? These are very different roles with very different responsibilities. In my experience developers often think that the role of Project Manager is akin in some way to Team Lead, or Development Lead. Undoubtedly in some organisations that is the case in practise, but I assume it isn't here as you have already stated you have Dev Leads. So this is a statement of fact rather than an actual problem. It can lead to significant project problems if the PM needs a technical appreciation in order to complete their PM work or if the development team use the PM's lack of technical experience against them by, say, over or under-estimating workload when the PM doesn't have the necessary skills to review and challenge estimates. But it is not, in itself, a problem. It would be worth thinking about why this is a problem to you or to the project as that will uncover issues that can be addressed. Please be careful when using these kind of measurements as KPIs. For instance, if you can get something that's extremely valuable to the business into production, do it before anything else, even if it means other pieces of work hang around for longer. After that, do what's needed to keep work flowing through the system. This may mean having queues or buffers like "ready for development" or "ready for test", even though those would be considered inventory, and therefore waste. After that, eliminate waste. If you're looking for work in the Lean Product Development space whose principles can be carried across to Lean Software Development, I recommend Don Reinertsen's Managing the Design Factory and John Seddon's Freedom from Command and Control. Other works related to Lean thinking, like Peter Senge's Fifth Discipline, may also be useful. This article by Esther Derby suggests alternatives to using KPIs in pay reviews. There's a growing body of evidence that suggests that using performance as a way of measuring pay is destructive. My experience is certainly that it encourages heroism and a blame culture rather than team work, particularly when the KPIs are measuring unwanted items. There's only one place where we can truly achieve Lean Software Production in the same way as a production line, and that's in continuous integration and deployment, where we really are building the same thing over and over again. Software development generally doesn't work that way. I don't want to discourage you too much. These types of partnerships can work. But I also think many people jump into these types of partnerships without a full grasp of all of the challenges and pitfalls that can easily be avoided by making sure there is a plan in place and an avenue for resolving disputes. The longer the sprints become, the less agile you really are, especially if you follow the scrum methodology rules that don't let you interrupt or change the sprint in the middle. If these things are taken care of, the business can be profitable and extensible. But without a plan, the chances of success aren't good. I worked with some contractors where 4 of them were friends. Halfway through, my client said she could only get in touch with one of them and work slowed to a crawl. Apparently, the 4 of them all got into a big fight and refused to work together anymore. The one guy remaining only knew a little PHP, so my client went through other avenues and dropped those guys.