2) Specialized teams are bad for team members. The more you pigeon hole your team members into specific, specialized roles, the more likely they are to never be able to leave that role. Low levels of specialization within a diverse team is different, as they are constantly exposed to areas outside of their specialization. But when they are locked into a team that only does one thing, they only see one thing. Personally, I don't care in the least how much babble and BS goes on (as long as its civil and generally workplace appropriate), as long as we're meeting our deadlines and producing a quality product. Watch your metrics, enable your employees and manage your project. Split your teams into cross-functional non-specialized units. In a good Scrum implementation, a PM should be able to handle 4-5 projects (given that your projects are relatively short in length) at a time. Just make sure your PM is staying out of the day to day workings of your teams. 4) Specialized teams have to hand work off before the software is working. If you have a backend team, a UI team, and a QA team each team needs to hand off the work to another team, before the software is actually fully functional. Bugs found by the QA team need to be handed back to a different team, which then goes to another team, which then goes.... etc. This breaks the idea of delivering working software at the end of each sprint, and greatly increases project time with all the context switching required. Does anyone see any course of action here? Thanks in advance. I feel that what they're really saying is: 1. There's nothing left in this sprint that I WANT to do. 2. I really want to get a head start on that so I have less work to do next sprint. As a project manager, none of the team members directly report to me. I have discussed this with their managers individually and while they agree this is a problem, they feel that they can't force this. I am the project manager for a team composed of employees who were hired specifically as QA or development prior to agile/scrum being adopted by the organization. Just for background, I came into the organization after the implementation of scrum. The most direct result of this is that QA is constantly behind. When we start a sprint there are already several items ready for QA. While they work on these items, things keep piling up and at the end of the sprint we've got a giant set of items in QA and developers saying they have nothing to do. Of course with items not getting finished in a sprint, the next sprint comes and the problem keeps getting slightly worse and worse as QA can't keep up. The idea of a single team working together to get everything to "done" has been explained to them, but developers say they weren't hired to do QA and QA says the developers just get in their way when they try to help on QA tasks and they don't understand how to properly test from a QA perspective. I've also explained that developers don't necessarily have to test and testers don't necessarily have to develop, but that the entire team should be working (through self-management) to either get committed items to "done" or doing something to benefit the team in the future (updating docs, maintaining the build/CI systems, improving automated testing, etc.) Regardless, we still get team members saying they don't have anything to do and want to pull new items in from the product backlog. First, bring the discussion down to facts. It's not that you don't want to deal with another task or you feel you won't handle it but you know it and you can support it with hard data. It seems like work-life balance type of issue. In short most of us can work for pretty long time at over 100% rate. The problem is at the end of the process we're burned out. Now the manager either doesn't know that or acknowledges the fact, but doesn't care and expects to exchange those who are burned out with freshmen. From these perspectives finding a way of incorporating feedback from pretty much anyone somehow connected with developers' work to their appraisal is good. And PM is definitely a person whose work is "somehow connected" with development. If people (here: PMs) never delivered feedback to other team members, rating system may be a good way to standardize the way they construct their feedback. In this situation you have only two choices: UPDATE: It looks like most of that one is responsibility of other people in your organization. However you haven't clarified whether they're actively working with end-users to get feedback. If they do then fine. However experience you can get talking directly with end users (in some, I don't say you should publish you mobile number) is invaluable. So even if product management is covered I wouldn't isolate myself from communication with users. The flip side to that is I generally also don't consider giving warnings. If we drop the ball on a project because the team didn't put the effort in, we'll talk about it in our retrospective. If one of my team members isn't adult enough to recognize what needs to be done going forward, they won't remain on my team. Edit: Why specialized teams are a bad idea I really dislike all three of your solutions. Each of them fails to treat your team members as adults. Treat your team members with respect, and expect them to perform. A PM isn't a baby sitter and your team members aren't children (well, hopefully not at least). 2) Specialized teams are bad for team members. The more you pigeon hole your team members into specific, specialized roles, the more likely they are to never be able to leave that role. Low levels of specialization within a diverse team is different, as they are constantly exposed to areas outside of their specialization. But when they are locked into a team that only does one thing, they only see one thing. Split your teams into cross-functional non-specialized units. In a good Scrum implementation, a PM should be able to handle 4-5 projects (given that your projects are relatively short in length) at a time. Just make sure your PM is staying out of the day to day workings of your teams.