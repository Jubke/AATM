So my question is, is there a way to position 2 divs which won't affect the browser's interpretation of the width of the page (i.e. as you resize narrower, or smaller resolution, the divs are just hidden out of the viewport?) In my email views, I usually just do something like... You can also try floating the parent container, but depending on your design, this may be impossible/difficult. I am looking at minimizing any interference from malicious users. Should I just make my logout link a form action with a POST key/value pair to stop this from happening? This isn't an issue, until I got it up and running on an iPad, which is where the majority of this web app will be used. The problem with the iPad is, after then selecting an option, the select refuses to display the option selected. It still displays as blank. I have never seen lists with different little icons to the left of them (within the same ul), but I have seen the property used on both elements before in my travels. In Firefox, it doesn't seem to make the vertical scroll bar exist until the content in the textarea reaches a height that deems them necessary. The problem is that containers won't naturally expand to include floated children. Be warned with using the first example, if you have any children elements outside the parent element, they will be hidden. You can also use 'auto' as the property value, but this will invoke scrollbars if any element appears outside. Put the code so it executes after the elements are defined, either with a DOM ready callback or place the source under the elements in the HTML. It also looks like IE baulks at this. You may have to trade semantic-ness for cross browser compatibility. I've found the outlined versions, but I want the solid ones. What is the best way to get around this? It is now working with this CSS I want to have the content flow in 3 columns. I know there is something coming in CSS3, but what options do I have to get this content to flow nicely into the 3 columns at the time being? I'm not that concerned about IE6 (as long as it degrades gracefully). Am I stuck using jQuery to parse the markup and chop it up into 3 divs which float?