Theoretically, as I already use Moment.js timezone library and have included the Olson tables, I don't need anything else, but I don't find any API to do the detection. I don't know if it's hidden somewhere or if somebody has it already written. One of the problems is that the current timezone plugin seems to keep its data private. Here's a graphical explanation : I'd prefer to avoid painfully reproducing it by combining chalk, gutil and reading the errorring file but to use the same function somehow. As it's mostly sugar, you'd better wait before using it. You're confusing js files and css files. My question is: what should browsers and Javascript engines do? Is Chrome buggy here? Is there a document defining what should happen? It's a module pattern. You'll see many variants of that pattern, so it's essential to understand what really happens, you can't just imitate one. The fat arrow is a feature of ES6 (now officially called ECMAScript 2015). It's been introduced in Firefox but not yet in other browsers (and especially not completely in V8 which would be interesting for nodejs/iojs development). In this case, the following code is executed : My question is about the elegant parallelization of promises in BlueBird when you need to pass both the context and argument to the functions building the promises. I have a canvas yet drawn with a lot of things and now I want to fill a region defined as the whole canvas except for a few holes (my holes are complex shapes with arcs). Let's suppose I do computation ( 1/(xxx) + 1/(x*x) ) involving an asynchronous "computer" (whose resources must be released). The square and the cube are computed asynchronously and independently. How can I ensure I handle the files when they're completely written in an efficient, reliable, cross-browser (windows & linux) and not timeout-based (i.e. not testing a rename every 10 ms until it works) way ? Now we can use the visibility API. Generally it should be able to process big objects, at the cost of truncating them. In order to decide whether it can still make some sense to have this in a modern library, I tried to look at what versions were concerned but I couldn't find this information. Note that it needs to work on the standard browser of Android 4.2. Other browsers/devices aren't in the scope of this question, which may make it easier. So you want to get the second digit from the decimal writing of a number. In case anybody needs it, I made a GitHub repository : JSON.prune on GitHub You're using a script element to import a css file, hence the error. JQuery UI needs both a CSS file and a JS file, and they must be imported in separate elements. It should look like this : Is it possible to access it programmatically when we have the function (as a variable value) ? jQuery's uses this code to detect an id based selector : As reference, this code fails : Now I want to bring this feature to my mobile users : I need to intercept the standard pinch-zoom gestures (without zooming the page). Is that possible today ? Is it possible to get the center of the gesture (for localized zoom and unzoom) ?