Summary Here are some key points to writing good API reference documentation: 

Sometimes, however, the terms -- while meaningful in their original contexts -- do not play well in a global index. In a book about database integration "synchronization" might be a good index term (how to keep your app up to date with the DB), but "synchronization" means something different in a book about networking, and if you're trying to look up the former you don't want to be bothered with the latter. You could change those entries to "synchornization, database" and "synchronization, venue", which helps the global index, but they look kind of stupid in individual books that are all about databases or venues. Similarly, "rendering" means different things if you're talking about the low-level graphics layer (e.g. Swing) or a higher-level graphing system. (While I'm semi-making up these examples, yes a single SDK does cover topics this broad.) We have been focusing on the individual books in crafting our index nouns and verbs. Sometimes combining them in the global index produces the right result -- if books A, B, and C all use verb1, verb2, noun1, etc in the same way, you generally want those to sort together. As Viktor said, FrameMaker is probably the best widely-used tool for doing what you're trying to do. Another (Windows-only) tool that I'm using now is Madcap Flare, but it's pretty pricy. 

Have a central place to leave notes (shared document, wiki page, etc). This works pretty well if you can sort it by who/what is affected, so each person has just one place to look, but it can be kind of unwieldy if dependencies are vague or numerous. While reviewing our glossary for terms that should obviously be pruned (that first group), I started to wonder about the bigger question: is having a glossary in this doc set useful at all? Our analytics tell us that almost nobody goes to the glossary to look up particular topics, but it looks like we aren't separately measuring those in-page popups so people might be using those. Or not. We do see that people use our search to look up terms, and they usually go to the places in the doc that talk about them in context, not the glossary entries. Many of the habits that (I hope) you already have as a software developer apply equally to technical writing: Image formats are PNG for screen shots, GIF for line art. Is there any tool that would let us embed, and query, meta-data right into files in those formats? 

How can I most easily prevent bad hyphenation breaks in my code elements, working within the tool chain I have? (I'm not free to change that.) 

That all makes sense; I've been doing this for years in strongly-typed languages like Java and C++. I will now be venturing into the world of a weakly-typed language (Javascript), where the syntax may only tell you that an argument is an object but, really, that object is required to have properties A (string), B (number), C (string), and D (boolean). (See example below.) Nothing in the syntax conveys that; it has to be handled in the documentation. (This answer applies to English-language technical writing. I'm not qualified to address other languages.) 

I am using DocBook, which we transform to Formatting Objects (FO) and thence to PDF. Ideally I would like to be able to write a style directive that says "don't hyphenate inside these XML elements" and apply it to <classname>, <methodname>, and several others. This FO documentation describes a way to do this at the page-block level, e.g. to turn off hyphenation in a table of contents or a preface, but that's too coarse. This forum post suggests a way to hard-wire them within the text, meaning I would have to put a special directive around each class name, method name, and so on. (Also, it sounds like it didn't work for him.) 

Our ~1500-page documentation set contains numerous screen shots and related graphics (schematics, flow diagrams, etc). Sometimes the user interface changes and we have to update all the affected graphics. The affected graphics are not necesarily all in one book; they can be spread across several. In short, they could be anywhere, so we rely on writers' knowledge of the doc set and sometimes just paging through the whole thing looking for graphics that are no longer correct. The first is fragile and the second is tedious (and also can be fragile). 

Given the following function declaration: Also note that I went beyond your original question to cover invalid parameters and error conditions. Good API documentation goes beyond what they can get from just reading the signature and tells them what they wouldn't be able to figure out otherwise. Let's break down your illustrative sentence: I've seen other online documentation sets that have glossaries; it's not just us. Are there established best practices for glossaries specifically for online, searchable documentation? What use cases do glossaries support, that we should be mindful of and avoid breaking? Or are glossaries basically irrelevant and instead of pruning it we should be thinking of getting rid of it entirely? Compare your documentation to the following: First you're going to need to come up with an outline or broad plan of attack. What topics do you need to cover (in what detail)? Is the organization of the original book workable now, or do you need to re-arrange things? In (or prior to!) your first print, come up with your initial list of work to be done. Start thinking about how it breaks down into stories. (This is the initial backlog; you should expect to discover more things that will need to be covered as sprints progress. Use your usual process for managing those; in our case newly-discovered issues got added to the backlog and considered in the next planning session.)