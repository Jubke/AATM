Bear in mind that your Scrum Master is asking you to meet a commitment you, as a team, made at the start of your sprint. I prefer a physical board for several reasons: This lets you get an up front cost estimate and makes it really clear to all involved what (foreseeable) things will affect that cost without going to the level of creating all your stories up front or having to convert from points to hours. Story Huddles - This takes place as a story is starting, usually between the dev pain, BA, QA and PO. It's an opportunity to make sure we've captured acceptance criteria, have an idea of the tests we need to write and we can split a story up if we start to think it's too big to be done as one. This replaces points 2 and 3. That said, we do still have some stories that come through where we end up doing dev to wireframes to get stuff in the right place and end up doing the CSS a week or two later when we've got the actual designs. For quite a while now, we've not done sprint planning or story point estimation. On the occasions this has happened with my teams, we look for the smallest testable slices we can make, even if we know we wouldn't release them. For example, we were integrating with a 3rd party and wanted to do single sign on between them and our site. Our story was: All teams now have a clear understanding of the interfaces between systems and can work under those assumptions. The key with this approach is communicating if agreed dates won't be hit or if any team needs to change the interface for any reason. The key is to ask what purpose the docs fulfil. Approval of scope, knowledge transfer to devs and QA input into testing can be handled by involving the customer in discussions with devs/testers and making sure the requirements are captured in the form of acceptance criteria. For my team, we decided that Sprint Planning was done for three reasons: It's (usually) easier to change your process. We also run communities of practice amongst the different disciplines (Dev, QA, BA, ScrumMaster). These tend to be more focused on detail than the brown bags, e.g. informing devs of major changes that have been made to systems that everyone needs to be aware of. More info on Mike Cohn's blog on that http://blog.mountaingoatsoftware.com/cultivate-communities-of-practice. 1) Don't start Project A or B until sufficient work (or the whole of) Project I is complete. Only Scrum Alliance Certified Scrum Trainers (CST) can run the Scrum Alliance Certified Scrum xxx courses (CSM, CSPO etc). I've tackled this previously by using a session similar to your early requirements workshop to break the work up into reasonably large epics (usually workflow steps from a customer perspective). Backlog sessions - This is a 30 min slot each day (although only used on an 'as needed' basis) where the Product Owner introduces upcoming stories to the team. We then discuss them at a high level, identify where we may need spike or a technical design session to elaborate and decide if it is of a size we're willing to accept or if it needs breaking up (rule of thumb is do we think we can do it in a week). This replaces points 4, 5 and 6. That all being said, my team is co-located. In a distributed environment, I'd be using a virtual board (as well as kicking and screaming to get my team co-located!). My CIO is unlikely to open a virtual board but will have a look at our physical one when he walks past. Equally, if I see him looking at the board, I'll usually go over and we can have a chat about how things are going. Even if he did view a virtual board, we'd miss out on those informal chats. Replace documents with conversations and aim for shared understanding rather than knowledge transfer. Design is part of our definition of ready Also, consider how much work the requester is having to test in one go. If they're having to test several weeks worth of features in one go, it'll be harder for them to find the time to do it. Reducing how much work you are batching up by getting them to test (for example) once a week might help you get feedback sooner and make doing the testing a less onerous task. As our iterations got shorter and we got burnt by more stories being blocked awaiting design sign off, we tried: