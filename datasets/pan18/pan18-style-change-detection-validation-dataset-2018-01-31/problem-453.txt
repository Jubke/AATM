Since the target doesn't exist in this case, when the server returns the 409 response about rate-limiting your comment voting, the error dialog is appended to an empty jQuery set and therefore isn't visible to the user. However, this doesn't seem to happen for per-site metas: You can test this by going to the search page and putting in either an unpopular tag, or one that doesn't exist, like "ja". I was able to reproduce this in Firefox 3.6, Chrome 11 and 13, IE 9 (for good measure), and Opera 11 (for Jeff's amusement). When using the Careers candidate search, the client-side code refuses to believe that changes to (at least) your Skills search criteria will be fruitless, and continuously double-checks with the server for results. While I appreciate its enthusiasm, the requests are excessive at around 6 per second: When hovering, the tab shifts down one pixel, causing it to move out from under the mouse. This returns it to its normal state, which causes the tab to go back up, causing the hover to reoccur, ad infinitum. Causing the textarea to refocus fixes things, since it has the full list of comments to work with at that point. However, since the textarea is auto-focused after you click the link to load additional comments, it's not too hard to end up in a situation where you don't have all of the expected names displayed. As there's some latency in the request, you see the original page for a brief period of time, after which it's replaced by the re-requested content. Given that the original request was recorded as you having viewed the new content, the re-requested view returns the tab as if you had already viewed it, effectively "unhighlighting" the new entries you were viewing. I couldn't find the code that would compress to the version used currently in user.js, so I'm unsure how to account for the discrepancy, but either accounting for it in the code or updating the History.js code that seems to be included in user.js should most likely fix this issue outright. As a test, I swapped in the updated History.js code by intercepting the user.js request with Fiddler to return my modified copy, and doing so seemed to produce the expected (corrected) behaviour.