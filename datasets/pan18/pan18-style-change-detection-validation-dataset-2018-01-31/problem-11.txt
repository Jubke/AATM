and the same amount of hands on people Update: The SM asked to be invited in the testers meeting. It turns out it is another stand up just for the testers. They are effective duplicating work after the team stand up. Is this necessarily bad though? EDIT: So, as an amusing update to this, the CTO of the company has left... 

In a company, they are transitioning from agile to scrum. They have hired a very skilled scrum master to facilitate change, they have an up to speed product owner, a development manager who is up to speed with scrum, and the business supports the change. Also in this company, there is a test manager who has his own test team of four testers. I am a software dev in a medium size company. We work with a few people remotely (in a different EU country). We used to have the following people: The test manager gathers his testers for a mini meeting after the morning standup, in a separate room, without informing the others or updating them on their talks. The test manager has no previous scrum experience either. He believes that if any of his testers forgets or doesn't do something, he should go around and chase them. Deliver the stories that are on the backlog and have been prioritized by the PO. 

Build a team, not a collection of individuals...and don't throw the Scrum Guide at them. It's just a PDF written by a couple of guys no smarter than yourself. Each team member draws up a personal timeline of high points and low points across a horizontal axis of time. It can be as detailed, colourful or personal as you like it. 

As the Scrum Master you are the master-servant of the team including coaching. Many agile commentators forget the master part but the business is paying you to impose your will upon the team to make them a productive, cohesive unit. You are not a tea-boy. Reaffirm to yourself that you are in control of team. The Product Owner manages the stakeholders, the business requirements and assumes the risk on behalf of the business entity. Of course, they absolutely must own the Definition of Done. It's important to consider that the needs of the Scrum Team may not be in line with the career aspirations of the Developer, especially in large organisations with entrenched employees and HR. HR is on their side, no ifs, no buts. Not every Scrum Team works in a start-up environment. This enabled us to bring the work in sooner, allowing us to better plan when we needed to start design work in order to ensure it was signed off in time to work on the story. This has worked OK but it does cause some issues with velocity and estimation (see Lunivore's answer) and I was never keen on having dependent stories in the backlog (design is valueless without the dev, dev cant be done without the design). Those are just speculation though. Ultimately, you won't know the root cause unless you all sit down and discuss it. 

Another point of knowledge transfer is 'Scrum of Scrums' which a member of each team attends once a week. The intent is to keep other teams appraised of who is working on what to avoid conflicts/dependencies. It's not as effective as it perhaps should be, something we need to look at. 

3) Define the interface upfront. If, for example, part of Project I is to create a service that A and B will consume, define what that service needs upfront and ensure that any changes to the interface are communicated between teams so they can adjust as they go.